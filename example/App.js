/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

/* eslint-disable react/no-did-mount-set-state */

import React, {Component} from 'react'
import {StyleSheet, Text, View} from 'react-native'

import misc from './runtimeTests/misc'
import bigNum from './runtimeTests/bigNum'
import multiAsset from './runtimeTests/multiAsset'
import linearFee from './runtimeTests/linearFee'
import privateKey from './runtimeTests/privateKey'
import publicKey from './runtimeTests/publicKey'
import bip32Keys from './runtimeTests/bip32Keys'
import address from './runtimeTests/address'
import byronAddress from './runtimeTests/byronAddress'
import crypto from './runtimeTests/crypto'
import ed25519Signature from './runtimeTests/ed25519Signature'
import stakeCredential from './runtimeTests/stakeCredential'
import stakeCertificates from './runtimeTests/stakeCertificates'
import certificate from './runtimeTests/certificate'
import baseAddress from './runtimeTests/baseAddress'
import rewardAddress from './runtimeTests/rewardAddress'
import transactionInput from './runtimeTests/transactionInput'
import transactionOutput from './runtimeTests/transactionOutput'
import bootstrapWitness from './runtimeTests/bootstrapWitness'
import vkeyWitness from './runtimeTests/vkeyWitness'
import transactionBody from './runtimeTests/transactionBody'
import utils from './runtimeTests/utils'
import transaction from './runtimeTests/transaction'
import transactionBuilder from './runtimeTests/transactionBuilder'

const tests = [
  {name: 'misc', testFn: misc},
  {name: 'BigNum', testFn: bigNum},
  {name: 'MultiAsset', testFn: multiAsset},
  {name: 'linearFee', testFn: linearFee},
  {name: 'PrivateKey', testFn: privateKey},
  {name: 'PublicKey', testFn: publicKey},
  {name: 'Bip32*Key', testFn: bip32Keys},
  {name: 'Address', testFn: address},
  {name: 'ByronAddress', testFn: byronAddress},
  {name: 'crypto', testFn: crypto},
  {name: 'ed25519Signature', testFn: ed25519Signature},
  {name: 'stakeCredential', testFn: stakeCredential},
  {name: 'stakeCertificates', testFn: stakeCertificates},
  {name: 'certificate', testFn: certificate},
  {name: 'baseAddress', testFn: baseAddress},
  {name: 'rewardAddress', testFn: rewardAddress},
  {name: 'transactionInput', testFn: transactionInput},
  {name: 'transactionOutput', testFn: transactionOutput},
  {name: 'bootstrapWitness', testFn: bootstrapWitness},
  {name: 'vkeyWitness', testFn: vkeyWitness},
  {name: 'transactionBody', testFn: transactionBody},
  {name: 'utils', testFn: utils},
  {name: 'transaction', testFn: transaction},
  {name: 'transactionBuilder', testFn: transactionBuilder},
]

let failed = 0
const total = tests.length
let mounted = false

export default class App extends Component<{}> {
  state = {
    status: 'starting',
    failed: 0,
    total: tests.length,
  }
  async componentDidMount() {
    if (!mounted) {
      for (const test of tests) {
        try {
          console.log(`Testing ${test.name}`)
          await test.testFn()
        } catch (e) {
          console.log(`Test ${test.name} failed`)
          console.log(e)
          failed++
          this.setState({
            failed: failed,
          })
        }
      }
      console.log(`Failed tests: ${failed}`)
      console.log(`Total tests: ${total}`)

      this.setState({
        status: 'tests finished',
      })
      console.log('test finished successfully')
      mounted = true
    }
  }
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆HaskellShelley example☆</Text>
        <Text style={styles.instructions}>STATUS: {this.state.status}</Text>
        <Text style={styles.instructions}>
          Failed tests: {this.state.failed}
        </Text>
        <Text style={styles.instructions}>Total tests: {total}</Text>
      </View>
    )
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
})
