/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

// /* eslint-disable react/no-did-mount-set-state */

import React, {Component} from 'react';
import {StyleSheet, Text, View} from 'react-native';

import address from './runtimeTests/address';
import auxiliaryData from './runtimeTests/auxiliaryData';
import baseAddress from './runtimeTests/baseAddress';
import bigNum from './runtimeTests/bigNum';
import bip32Keys from './runtimeTests/bip32Keys';
import bootstrapWitness from './runtimeTests/bootstrapWitness';
import byronAddress from './runtimeTests/byronAddress';
import catalyst from './runtimeTests/catalyst';
import certificate from './runtimeTests/certificate';
import crypto from './runtimeTests/crypto';
import ed25519Signature from './runtimeTests/ed25519Signature';
import emip3 from './runtimeTests/emip3';
import enterpriseAddress from './runtimeTests/enterpriseAddress';
import int from './runtimeTests/int';
import linearFee from './runtimeTests/linearFee';
import misc from './runtimeTests/misc';
import mixedTests from './runtimeTests/mixedTests';
import multiAsset from './runtimeTests/multiAsset';
import privateKey from './runtimeTests/privateKey';
import publicKey from './runtimeTests/publicKey';
import rewardAddress from './runtimeTests/rewardAddress';
import stakeCertificates from './runtimeTests/stakeCertificates';
import stakeCredential from './runtimeTests/stakeCredential';
import transaction from './runtimeTests/transaction';
import transactionBody from './runtimeTests/transactionBody';
import transactionBuilder from './runtimeTests/transactionBuilder';
import transactionInput from './runtimeTests/transactionInput';
import transactionOutput from './runtimeTests/transactionOutput';
import utils from './runtimeTests/utils';
import vkeyWitness from './runtimeTests/vkeyWitness';

const tests = [
  {name: 'misc', testFn: misc},
  {name: 'BigNum', testFn: bigNum},
  {name: 'Int', testFn: int},
  {name: 'MultiAsset', testFn: multiAsset},
  {name: 'linearFee', testFn: linearFee},
  {name: 'PrivateKey', testFn: privateKey},
  {name: 'PublicKey', testFn: publicKey},
  {name: 'Bip32*Key', testFn: bip32Keys},
  {name: 'Address', testFn: address},
  {name: 'ByronAddress', testFn: byronAddress},
  {name: 'crypto', testFn: crypto},
  {name: 'ed25519Signature', testFn: ed25519Signature},
  {name: 'stakeCredential', testFn: stakeCredential},
  {name: 'stakeCertificates', testFn: stakeCertificates},
  {name: 'certificate', testFn: certificate},
  {name: 'baseAddress', testFn: baseAddress},
  {name: 'enterpriseAddress', testFn: enterpriseAddress},
  {name: 'rewardAddress', testFn: rewardAddress},
  {name: 'transactionInput', testFn: transactionInput},
  {name: 'transactionOutput', testFn: transactionOutput},
  {name: 'bootstrapWitness', testFn: bootstrapWitness},
  {name: 'vkeyWitness', testFn: vkeyWitness},
  {name: 'transactionBody', testFn: transactionBody},
  {name: 'utils', testFn: utils},
  {name: 'transaction', testFn: transaction},
  {name: 'transactionBuilder', testFn: transactionBuilder},
  {name: 'auxiliaryData', testFn: auxiliaryData},
  {name: 'catalyst', testFn: catalyst},
  {name: 'emip3', testFn: emip3},
  {name: 'mixedTests', testFn: mixedTests},
];

let failed = 0;
const total = tests.length;
let mounted = false;

export default class App extends Component {

  state = {
    status: 'starting',
    failed: 0,
    total: tests.length,
  };

  async componentDidMount() {
    if (!mounted) {
      for (const test of tests) {
        try {
          await test.testFn();
          console.log(`${test.name} tests completed ✅`);
        } catch (e) {
          console.log(`${test.name} tests failed ❌`);
          console.log(e);
          failed++;
          this.setState({
            failed: failed,
          });
        }
      }
      console.log(`Failed tests: ${failed}`);
      console.log(`Total tests: ${total}`);

      this.setState({
        status: 'tests finished',
      });
      console.log('Tests finished');
      mounted = true;
    }
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆HaskellShelley example☆</Text>

        <Text style={styles.instructions}>STATUS: {this.state.status}</Text>

        <Text style={styles.instructions}>
            Failed tests: {this.state.failed}
        </Text>

        <Text style={styles.instructions}>Total tests: {total}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
