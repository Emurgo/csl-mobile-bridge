package io.emurgo.rnhaskellshelley;
import java.util.Map;

final class Native {
    static final Native I;

    static {
        I = new Native();
        System.loadLibrary("react_native_haskell_shelley");
        I.csl_bridge_initLibrary();
    }

    private Native() { } 
    private native void csl_bridge_initLibrary();

    public final native void ptrFree(RPtr ptr);

    public final native Result<RPtr> csl_bridge_addressFromBytes(byte[] data);
    public final native Result<String> csl_bridge_addressToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_addressFromJson(String json);
    public final native Result<Integer> csl_bridge_addressKind(RPtr self);
    public final native Result<RPtr> csl_bridge_addressPaymentCred(RPtr self);
    public final native Result<Boolean> csl_bridge_addressIsMalformed(RPtr self);
    public final native Result<String> csl_bridge_addressToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_addressFromHex(String hexStr);
    public final native Result<byte[]> csl_bridge_addressToBytes(RPtr self);
    public final native Result<String> csl_bridge_addressToBech32(RPtr self);
    public final native Result<String> csl_bridge_addressToBech32WithPrefix(RPtr self, String prefix);

    public final native Result<RPtr> csl_bridge_addressFromBech32(String bechStr);
    public final native Result<Long> csl_bridge_addressNetworkId(RPtr self);

    public final native Result<byte[]> csl_bridge_anchorToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_anchorFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_anchorToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_anchorFromHex(String hexStr);
    public final native Result<String> csl_bridge_anchorToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_anchorFromJson(String json);
    public final native Result<RPtr> csl_bridge_anchorUrl(RPtr self);
    public final native Result<RPtr> csl_bridge_anchorAnchorDataHash(RPtr self);
    public final native Result<RPtr> csl_bridge_anchorNew(RPtr anchorUrl, RPtr anchorDataHash);

    public final native Result<RPtr> csl_bridge_anchorDataHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_anchorDataHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_anchorDataHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_anchorDataHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_anchorDataHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_anchorDataHashFromHex(String hex);

    public final native Result<byte[]> csl_bridge_assetNameToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_assetNameFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_assetNameToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_assetNameFromHex(String hexStr);
    public final native Result<String> csl_bridge_assetNameToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_assetNameFromJson(String json);
    public final native Result<RPtr> csl_bridge_assetNameNew(byte[] name);
    public final native Result<byte[]> csl_bridge_assetNameName(RPtr self);

    public final native Result<byte[]> csl_bridge_assetNamesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_assetNamesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_assetNamesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_assetNamesFromHex(String hexStr);
    public final native Result<String> csl_bridge_assetNamesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_assetNamesFromJson(String json);
    public final native Result<RPtr> csl_bridge_assetNamesNew();
    public final native Result<Long> csl_bridge_assetNamesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_assetNamesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_assetNamesAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_assetsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_assetsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_assetsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_assetsFromHex(String hexStr);
    public final native Result<String> csl_bridge_assetsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_assetsFromJson(String json);
    public final native Result<RPtr> csl_bridge_assetsNew();
    public final native Result<Long> csl_bridge_assetsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_assetsInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_assetsGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_assetsKeys(RPtr self);

    public final native Result<byte[]> csl_bridge_auxiliaryDataToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_auxiliaryDataFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_auxiliaryDataToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_auxiliaryDataFromHex(String hexStr);
    public final native Result<String> csl_bridge_auxiliaryDataToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_auxiliaryDataFromJson(String json);
    public final native Result<RPtr> csl_bridge_auxiliaryDataNew();
    public final native Result<RPtr> csl_bridge_auxiliaryDataMetadata(RPtr self);
    public final native Result<Void> csl_bridge_auxiliaryDataSetMetadata(RPtr self, RPtr metadata);
    public final native Result<RPtr> csl_bridge_auxiliaryDataNativeScripts(RPtr self);
    public final native Result<Void> csl_bridge_auxiliaryDataSetNativeScripts(RPtr self, RPtr nativeScripts);
    public final native Result<RPtr> csl_bridge_auxiliaryDataPlutusScripts(RPtr self);
    public final native Result<Void> csl_bridge_auxiliaryDataSetPlutusScripts(RPtr self, RPtr plutusScripts);
    public final native Result<Boolean> csl_bridge_auxiliaryDataPreferAlonzoFormat(RPtr self);
    public final native Result<Void> csl_bridge_auxiliaryDataSetPreferAlonzoFormat(RPtr self, boolean prefer);

    public final native Result<RPtr> csl_bridge_auxiliaryDataHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_auxiliaryDataHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_auxiliaryDataHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_auxiliaryDataHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_auxiliaryDataHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_auxiliaryDataHashFromHex(String hex);

    public final native Result<RPtr> csl_bridge_auxiliaryDataSetNew();
    public final native Result<Long> csl_bridge_auxiliaryDataSetLen(RPtr self);
    public final native Result<RPtr> csl_bridge_auxiliaryDataSetInsert(RPtr self, long txIndex, RPtr data);
    public final native Result<RPtr> csl_bridge_auxiliaryDataSetGet(RPtr self, long txIndex);
    public final native Result<String> csl_bridge_auxiliaryDataSetIndices(RPtr self);

    public final native Result<RPtr> csl_bridge_baseAddressNew(long network, RPtr payment, RPtr stake);
    public final native Result<RPtr> csl_bridge_baseAddressPaymentCred(RPtr self);
    public final native Result<RPtr> csl_bridge_baseAddressStakeCred(RPtr self);
    public final native Result<RPtr> csl_bridge_baseAddressToAddress(RPtr self);
    public final native Result<RPtr> csl_bridge_baseAddressFromAddress(RPtr addr);
    public final native Result<Long> csl_bridge_baseAddressNetworkId(RPtr self);

    public final native Result<byte[]> csl_bridge_bigIntToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_bigIntToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntFromHex(String hexStr);
    public final native Result<String> csl_bridge_bigIntToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntFromJson(String json);
    public final native Result<Boolean> csl_bridge_bigIntIsZero(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntAsU64(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntAsInt(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntFromStr(String text);
    public final native Result<String> csl_bridge_bigIntToStr(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntAdd(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigIntSub(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigIntMul(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigIntPow(RPtr self, long exp);
    public final native Result<RPtr> csl_bridge_bigIntOne();
    public final native Result<RPtr> csl_bridge_bigIntZero();
    public final native Result<RPtr> csl_bridge_bigIntAbs(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntIncrement(RPtr self);
    public final native Result<RPtr> csl_bridge_bigIntDivCeil(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigIntDivFloor(RPtr self, RPtr other);

    public final native Result<byte[]> csl_bridge_bigNumToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_bigNumFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_bigNumToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_bigNumFromHex(String hexStr);
    public final native Result<String> csl_bridge_bigNumToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_bigNumFromJson(String json);
    public final native Result<RPtr> csl_bridge_bigNumFromStr(String string);
    public final native Result<String> csl_bridge_bigNumToStr(RPtr self);
    public final native Result<RPtr> csl_bridge_bigNumZero();
    public final native Result<RPtr> csl_bridge_bigNumOne();
    public final native Result<Boolean> csl_bridge_bigNumIsZero(RPtr self);
    public final native Result<RPtr> csl_bridge_bigNumDivFloor(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigNumCheckedMul(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigNumCheckedAdd(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigNumCheckedSub(RPtr self, RPtr other);
    public final native Result<RPtr> csl_bridge_bigNumClampedSub(RPtr self, RPtr other);
    public final native Result<Long> csl_bridge_bigNumCompare(RPtr self, RPtr rhsValue);
    public final native Result<Boolean> csl_bridge_bigNumLessThan(RPtr self, RPtr rhsValue);
    public final native Result<RPtr> csl_bridge_bigNumMaxValue();
    public final native Result<RPtr> csl_bridge_bigNumMax(RPtr a, RPtr b);

    public final native Result<RPtr> csl_bridge_bip32PrivateKeyDerive(RPtr self, long index);
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyFrom_128Xprv(byte[] bytes);
    public final native Result<byte[]> csl_bridge_bip32PrivateKeyTo_128Xprv(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyGenerateEd25519Bip32();
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyToRawKey(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyToPublic(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_bip32PrivateKeyAsBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyFromBech32(String bech32Str);
    public final native Result<String> csl_bridge_bip32PrivateKeyToBech32(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyFromBip39Entropy(byte[] entropy, byte[] password);
    public final native Result<byte[]> csl_bridge_bip32PrivateKeyChaincode(RPtr self);
    public final native Result<String> csl_bridge_bip32PrivateKeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PrivateKeyFromHex(String hexStr);

    public final native Result<RPtr> csl_bridge_bip32PublicKeyDerive(RPtr self, long index);
    public final native Result<RPtr> csl_bridge_bip32PublicKeyToRawKey(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PublicKeyFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_bip32PublicKeyAsBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PublicKeyFromBech32(String bech32Str);
    public final native Result<String> csl_bridge_bip32PublicKeyToBech32(RPtr self);
    public final native Result<byte[]> csl_bridge_bip32PublicKeyChaincode(RPtr self);
    public final native Result<String> csl_bridge_bip32PublicKeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_bip32PublicKeyFromHex(String hexStr);

    public final native Result<byte[]> csl_bridge_blockToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_blockFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_blockToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_blockFromHex(String hexStr);
    public final native Result<String> csl_bridge_blockToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_blockFromJson(String json);
    public final native Result<RPtr> csl_bridge_blockHeader(RPtr self);
    public final native Result<RPtr> csl_bridge_blockTransactionBodies(RPtr self);
    public final native Result<RPtr> csl_bridge_blockTransactionWitnessSets(RPtr self);
    public final native Result<RPtr> csl_bridge_blockAuxiliaryDataSet(RPtr self);
    public final native Result<String> csl_bridge_blockInvalidTransactions(RPtr self);
    public final native Result<RPtr> csl_bridge_blockNew(RPtr header, RPtr transactionBodies, RPtr transactionWitnessSets, RPtr auxiliaryDataSet, String invalidTransactions);

    public final native Result<RPtr> csl_bridge_blockHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_blockHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_blockHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_blockHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_blockHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_blockHashFromHex(String hex);

    public final native Result<byte[]> csl_bridge_bootstrapWitnessToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_bootstrapWitnessToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessFromHex(String hexStr);
    public final native Result<String> csl_bridge_bootstrapWitnessToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessFromJson(String json);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessVkey(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessSignature(RPtr self);
    public final native Result<byte[]> csl_bridge_bootstrapWitnessChainCode(RPtr self);
    public final native Result<byte[]> csl_bridge_bootstrapWitnessAttributes(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessNew(RPtr vkey, RPtr signature, byte[] chainCode, byte[] attributes);

    public final native Result<byte[]> csl_bridge_bootstrapWitnessesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_bootstrapWitnessesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessesFromHex(String hexStr);
    public final native Result<String> csl_bridge_bootstrapWitnessesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessesFromJson(String json);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessesNew();
    public final native Result<Long> csl_bridge_bootstrapWitnessesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_bootstrapWitnessesGet(RPtr self, long index);
    public final native Result<Boolean> csl_bridge_bootstrapWitnessesAdd(RPtr self, RPtr elem);

    public final native Result<String> csl_bridge_byronAddressToBase58(RPtr self);
    public final native Result<byte[]> csl_bridge_byronAddressToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_byronAddressFromBytes(byte[] bytes);
    public final native Result<Long> csl_bridge_byronAddressByronProtocolMagic(RPtr self);
    public final native Result<byte[]> csl_bridge_byronAddressAttributes(RPtr self);
    public final native Result<Long> csl_bridge_byronAddressNetworkId(RPtr self);
    public final native Result<RPtr> csl_bridge_byronAddressFromBase58(String s);
    public final native Result<RPtr> csl_bridge_byronAddressIcarusFromKey(RPtr key, long protocolMagic);
    public final native Result<Boolean> csl_bridge_byronAddressIsValid(String s);
    public final native Result<RPtr> csl_bridge_byronAddressToAddress(RPtr self);
    public final native Result<RPtr> csl_bridge_byronAddressFromAddress(RPtr addr);

    public final native Result<byte[]> csl_bridge_certificateToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_certificateToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateFromHex(String hexStr);
    public final native Result<String> csl_bridge_certificateToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateFromJson(String json);
    public final native Result<RPtr> csl_bridge_certificateNewStakeRegistration(RPtr stakeRegistration);
    public final native Result<RPtr> csl_bridge_certificateNewRegCert(RPtr stakeRegistration);
    public final native Result<RPtr> csl_bridge_certificateNewStakeDeregistration(RPtr stakeDeregistration);
    public final native Result<RPtr> csl_bridge_certificateNewUnregCert(RPtr stakeDeregistration);
    public final native Result<RPtr> csl_bridge_certificateNewStakeDelegation(RPtr stakeDelegation);
    public final native Result<RPtr> csl_bridge_certificateNewPoolRegistration(RPtr poolRegistration);
    public final native Result<RPtr> csl_bridge_certificateNewPoolRetirement(RPtr poolRetirement);
    public final native Result<RPtr> csl_bridge_certificateNewGenesisKeyDelegation(RPtr genesisKeyDelegation);
    public final native Result<RPtr> csl_bridge_certificateNewMoveInstantaneousRewardsCert(RPtr moveInstantaneousRewardsCert);
    public final native Result<RPtr> csl_bridge_certificateNewCommitteeHotAuth(RPtr committeeHotAuth);
    public final native Result<RPtr> csl_bridge_certificateNewCommitteeColdResign(RPtr committeeColdResign);
    public final native Result<RPtr> csl_bridge_certificateNewDrepDeregistration(RPtr drepDeregistration);
    public final native Result<RPtr> csl_bridge_certificateNewDrepRegistration(RPtr drepRegistration);
    public final native Result<RPtr> csl_bridge_certificateNewDrepUpdate(RPtr drepUpdate);
    public final native Result<RPtr> csl_bridge_certificateNewStakeAndVoteDelegation(RPtr stakeAndVoteDelegation);
    public final native Result<RPtr> csl_bridge_certificateNewStakeRegistrationAndDelegation(RPtr stakeRegistrationAndDelegation);
    public final native Result<RPtr> csl_bridge_certificateNewStakeVoteRegistrationAndDelegation(RPtr stakeVoteRegistrationAndDelegation);
    public final native Result<RPtr> csl_bridge_certificateNewVoteDelegation(RPtr voteDelegation);
    public final native Result<RPtr> csl_bridge_certificateNewVoteRegistrationAndDelegation(RPtr voteRegistrationAndDelegation);
    public final native Result<Integer> csl_bridge_certificateKind(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsStakeRegistration(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsRegCert(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsStakeDeregistration(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsUnregCert(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsStakeDelegation(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsPoolRegistration(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsPoolRetirement(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsGenesisKeyDelegation(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsMoveInstantaneousRewardsCert(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsCommitteeHotAuth(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsCommitteeColdResign(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsDrepDeregistration(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsDrepRegistration(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsDrepUpdate(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsStakeAndVoteDelegation(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsStakeRegistrationAndDelegation(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsStakeVoteRegistrationAndDelegation(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsVoteDelegation(RPtr self);
    public final native Result<RPtr> csl_bridge_certificateAsVoteRegistrationAndDelegation(RPtr self);
    public final native Result<Boolean> csl_bridge_certificateHasRequiredScriptWitness(RPtr self);

    public final native Result<byte[]> csl_bridge_certificatesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_certificatesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesFromHex(String hexStr);
    public final native Result<String> csl_bridge_certificatesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesFromJson(String json);
    public final native Result<RPtr> csl_bridge_certificatesNew();
    public final native Result<Long> csl_bridge_certificatesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesGet(RPtr self, long index);
    public final native Result<Boolean> csl_bridge_certificatesAdd(RPtr self, RPtr elem);

    public final native Result<RPtr> csl_bridge_certificatesBuilderNew();
    public final native Result<Void> csl_bridge_certificatesBuilderAdd(RPtr self, RPtr cert);
    public final native Result<Void> csl_bridge_certificatesBuilderAddWithPlutusWitness(RPtr self, RPtr cert, RPtr witness);
    public final native Result<Void> csl_bridge_certificatesBuilderAddWithNativeScript(RPtr self, RPtr cert, RPtr nativeScriptSource);
    public final native Result<RPtr> csl_bridge_certificatesBuilderGetPlutusWitnesses(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesBuilderGetRefInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesBuilderGetNativeScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesBuilderGetCertificatesRefund(RPtr self, RPtr poolDeposit, RPtr keyDeposit);
    public final native Result<RPtr> csl_bridge_certificatesBuilderGetCertificatesDeposit(RPtr self, RPtr poolDeposit, RPtr keyDeposit);
    public final native Result<Boolean> csl_bridge_certificatesBuilderHasPlutusScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_certificatesBuilderBuild(RPtr self);

    public final native Result<RPtr> csl_bridge_changeConfigNew(RPtr address);
    public final native Result<RPtr> csl_bridge_changeConfigChangeAddress(RPtr self, RPtr address);
    public final native Result<RPtr> csl_bridge_changeConfigChangePlutusData(RPtr self, RPtr plutusData);
    public final native Result<RPtr> csl_bridge_changeConfigChangeScriptRef(RPtr self, RPtr scriptRef);

    public final native Result<byte[]> csl_bridge_committeeToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_committeeToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeFromHex(String hexStr);
    public final native Result<String> csl_bridge_committeeToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeFromJson(String json);
    public final native Result<RPtr> csl_bridge_committeeNew(RPtr quorumThreshold);
    public final native Result<RPtr> csl_bridge_committeeMembersKeys(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeQuorumThreshold(RPtr self);
    public final native Result<Void> csl_bridge_committeeAddMember(RPtr self, RPtr committeeColdCredential, long epoch);
    public final native Result<Long> csl_bridge_committeeGetMemberEpoch(RPtr self, RPtr committeeColdCredential);

    public final native Result<byte[]> csl_bridge_committeeColdResignToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeColdResignFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_committeeColdResignToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeColdResignFromHex(String hexStr);
    public final native Result<String> csl_bridge_committeeColdResignToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeColdResignFromJson(String json);
    public final native Result<RPtr> csl_bridge_committeeColdResignCommitteeColdCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeColdResignAnchor(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeColdResignNew(RPtr committeeColdCredential);
    public final native Result<RPtr> csl_bridge_committeeColdResignNewWithAnchor(RPtr committeeColdCredential, RPtr anchor);
    public final native Result<Boolean> csl_bridge_committeeColdResignHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_committeeHotAuthToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeHotAuthFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_committeeHotAuthToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeHotAuthFromHex(String hexStr);
    public final native Result<String> csl_bridge_committeeHotAuthToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeHotAuthFromJson(String json);
    public final native Result<RPtr> csl_bridge_committeeHotAuthCommitteeColdCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeHotAuthCommitteeHotCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_committeeHotAuthNew(RPtr committeeColdCredential, RPtr committeeHotCredential);
    public final native Result<Boolean> csl_bridge_committeeHotAuthHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_constitutionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_constitutionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_constitutionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_constitutionFromHex(String hexStr);
    public final native Result<String> csl_bridge_constitutionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_constitutionFromJson(String json);
    public final native Result<RPtr> csl_bridge_constitutionAnchor(RPtr self);
    public final native Result<RPtr> csl_bridge_constitutionScriptHash(RPtr self);
    public final native Result<RPtr> csl_bridge_constitutionNew(RPtr anchor);
    public final native Result<RPtr> csl_bridge_constitutionNewWithScriptHash(RPtr anchor, RPtr scriptHash);

    public final native Result<byte[]> csl_bridge_constrPlutusDataToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_constrPlutusDataFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_constrPlutusDataToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_constrPlutusDataFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_constrPlutusDataAlternative(RPtr self);
    public final native Result<RPtr> csl_bridge_constrPlutusDataData(RPtr self);
    public final native Result<RPtr> csl_bridge_constrPlutusDataNew(RPtr alternative, RPtr data);

    public final native Result<byte[]> csl_bridge_costModelToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_costModelFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_costModelToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_costModelFromHex(String hexStr);
    public final native Result<String> csl_bridge_costModelToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_costModelFromJson(String json);
    public final native Result<RPtr> csl_bridge_costModelNew();
    public final native Result<RPtr> csl_bridge_costModelSet(RPtr self, long operation, RPtr cost);
    public final native Result<RPtr> csl_bridge_costModelGet(RPtr self, long operation);
    public final native Result<Long> csl_bridge_costModelLen(RPtr self);

    public final native Result<byte[]> csl_bridge_costmdlsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_costmdlsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_costmdlsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_costmdlsFromHex(String hexStr);
    public final native Result<String> csl_bridge_costmdlsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_costmdlsFromJson(String json);
    public final native Result<RPtr> csl_bridge_costmdlsNew();
    public final native Result<Long> csl_bridge_costmdlsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_costmdlsInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_costmdlsGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_costmdlsKeys(RPtr self);
    public final native Result<RPtr> csl_bridge_costmdlsRetainLanguageVersions(RPtr self, RPtr languages);

    public final native Result<RPtr> csl_bridge_credentialFromKeyhash(RPtr hash);
    public final native Result<RPtr> csl_bridge_credentialFromScripthash(RPtr hash);
    public final native Result<RPtr> csl_bridge_credentialToKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialToScripthash(RPtr self);
    public final native Result<Integer> csl_bridge_credentialKind(RPtr self);
    public final native Result<Boolean> csl_bridge_credentialHasScriptHash(RPtr self);
    public final native Result<byte[]> csl_bridge_credentialToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_credentialToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialFromHex(String hexStr);
    public final native Result<String> csl_bridge_credentialToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialFromJson(String json);

    public final native Result<byte[]> csl_bridge_credentialsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_credentialsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialsFromHex(String hexStr);
    public final native Result<String> csl_bridge_credentialsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialsFromJson(String json);
    public final native Result<RPtr> csl_bridge_credentialsNew();
    public final native Result<Long> csl_bridge_credentialsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_credentialsGet(RPtr self, long index);
    public final native Result<Boolean> csl_bridge_credentialsAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_dNSRecordAorAAAAToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_dNSRecordAorAAAAFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_dNSRecordAorAAAAToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dNSRecordAorAAAAFromHex(String hexStr);
    public final native Result<String> csl_bridge_dNSRecordAorAAAAToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_dNSRecordAorAAAAFromJson(String json);
    public final native Result<RPtr> csl_bridge_dNSRecordAorAAAANew(String dnsName);
    public final native Result<String> csl_bridge_dNSRecordAorAAAARecord(RPtr self);

    public final native Result<byte[]> csl_bridge_dNSRecordSRVToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_dNSRecordSRVFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_dNSRecordSRVToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dNSRecordSRVFromHex(String hexStr);
    public final native Result<String> csl_bridge_dNSRecordSRVToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_dNSRecordSRVFromJson(String json);
    public final native Result<RPtr> csl_bridge_dNSRecordSRVNew(String dnsName);
    public final native Result<String> csl_bridge_dNSRecordSRVRecord(RPtr self);

    public final native Result<byte[]> csl_bridge_dRepToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_dRepToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepFromHex(String hexStr);
    public final native Result<String> csl_bridge_dRepToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepFromJson(String json);
    public final native Result<RPtr> csl_bridge_dRepNewKeyHash(RPtr keyHash);
    public final native Result<RPtr> csl_bridge_dRepNewScriptHash(RPtr scriptHash);
    public final native Result<RPtr> csl_bridge_dRepNewAlwaysAbstain();
    public final native Result<RPtr> csl_bridge_dRepNewAlwaysNoConfidence();
    public final native Result<RPtr> csl_bridge_dRepNewFromCredential(RPtr cred);
    public final native Result<Integer> csl_bridge_dRepKind(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepToKeyHash(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepToScriptHash(RPtr self);
    public final native Result<String> csl_bridge_dRepToBech32(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepFromBech32(String bech32Str);

    public final native Result<byte[]> csl_bridge_dRepDeregistrationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepDeregistrationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_dRepDeregistrationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepDeregistrationFromHex(String hexStr);
    public final native Result<String> csl_bridge_dRepDeregistrationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepDeregistrationFromJson(String json);
    public final native Result<RPtr> csl_bridge_dRepDeregistrationVotingCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepDeregistrationCoin(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepDeregistrationNew(RPtr votingCredential, RPtr coin);
    public final native Result<Boolean> csl_bridge_dRepDeregistrationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_dRepRegistrationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepRegistrationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_dRepRegistrationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepRegistrationFromHex(String hexStr);
    public final native Result<String> csl_bridge_dRepRegistrationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepRegistrationFromJson(String json);
    public final native Result<RPtr> csl_bridge_dRepRegistrationVotingCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepRegistrationCoin(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepRegistrationAnchor(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepRegistrationNew(RPtr votingCredential, RPtr coin);
    public final native Result<RPtr> csl_bridge_dRepRegistrationNewWithAnchor(RPtr votingCredential, RPtr coin, RPtr anchor);
    public final native Result<Boolean> csl_bridge_dRepRegistrationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_dRepUpdateToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepUpdateFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_dRepUpdateToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepUpdateFromHex(String hexStr);
    public final native Result<String> csl_bridge_dRepUpdateToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepUpdateFromJson(String json);
    public final native Result<RPtr> csl_bridge_dRepUpdateVotingCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepUpdateAnchor(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepUpdateNew(RPtr votingCredential);
    public final native Result<RPtr> csl_bridge_dRepUpdateNewWithAnchor(RPtr votingCredential, RPtr anchor);
    public final native Result<Boolean> csl_bridge_dRepUpdateHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_dRepVotingThresholdsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_dRepVotingThresholdsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsFromHex(String hexStr);
    public final native Result<String> csl_bridge_dRepVotingThresholdsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsFromJson(String json);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsNew(RPtr motionNoConfidence, RPtr committeeNormal, RPtr committeeNoConfidence, RPtr updateConstitution, RPtr hardForkInitiation, RPtr ppNetworkGroup, RPtr ppEconomicGroup, RPtr ppTechnicalGroup, RPtr ppGovernanceGroup, RPtr treasuryWithdrawal);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetMotionNoConfidence(RPtr self, RPtr motionNoConfidence);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetCommitteeNormal(RPtr self, RPtr committeeNormal);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetCommitteeNoConfidence(RPtr self, RPtr committeeNoConfidence);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetUpdateConstitution(RPtr self, RPtr updateConstitution);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetHardForkInitiation(RPtr self, RPtr hardForkInitiation);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetPpNetworkGroup(RPtr self, RPtr ppNetworkGroup);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetPpEconomicGroup(RPtr self, RPtr ppEconomicGroup);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetPpTechnicalGroup(RPtr self, RPtr ppTechnicalGroup);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetPpGovernanceGroup(RPtr self, RPtr ppGovernanceGroup);
    public final native Result<Void> csl_bridge_dRepVotingThresholdsSetTreasuryWithdrawal(RPtr self, RPtr treasuryWithdrawal);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsMotionNoConfidence(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsCommitteeNormal(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsCommitteeNoConfidence(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsUpdateConstitution(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsHardForkInitiation(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsPpNetworkGroup(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsPpEconomicGroup(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsPpTechnicalGroup(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsPpGovernanceGroup(RPtr self);
    public final native Result<RPtr> csl_bridge_dRepVotingThresholdsTreasuryWithdrawal(RPtr self);

    public final native Result<RPtr> csl_bridge_dataCostNewCoinsPerByte(RPtr coinsPerByte);
    public final native Result<RPtr> csl_bridge_dataCostCoinsPerByte(RPtr self);

    public final native Result<RPtr> csl_bridge_dataHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_dataHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_dataHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_dataHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_dataHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_dataHashFromHex(String hex);

    public final native Result<RPtr> csl_bridge_datumSourceNew(RPtr datum);
    public final native Result<RPtr> csl_bridge_datumSourceNewRefInput(RPtr input);

    public final native Result<RPtr> csl_bridge_ed25519KeyHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_ed25519KeyHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_ed25519KeyHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_ed25519KeyHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashFromHex(String hex);

    public final native Result<byte[]> csl_bridge_ed25519KeyHashesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_ed25519KeyHashesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashesFromHex(String hexStr);
    public final native Result<String> csl_bridge_ed25519KeyHashesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashesFromJson(String json);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashesNew();
    public final native Result<Long> csl_bridge_ed25519KeyHashesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashesGet(RPtr self, long index);
    public final native Result<Boolean> csl_bridge_ed25519KeyHashesAdd(RPtr self, RPtr elem);
    public final native Result<Boolean> csl_bridge_ed25519KeyHashesContains(RPtr self, RPtr elem);
    public final native Result<RPtr> csl_bridge_ed25519KeyHashesToOption(RPtr self);

    public final native Result<byte[]> csl_bridge_ed25519SignatureToBytes(RPtr self);
    public final native Result<String> csl_bridge_ed25519SignatureToBech32(RPtr self);
    public final native Result<String> csl_bridge_ed25519SignatureToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_ed25519SignatureFromBech32(String bech32Str);
    public final native Result<RPtr> csl_bridge_ed25519SignatureFromHex(String input);
    public final native Result<RPtr> csl_bridge_ed25519SignatureFromBytes(byte[] bytes);

    public final native Result<RPtr> csl_bridge_enterpriseAddressNew(long network, RPtr payment);
    public final native Result<RPtr> csl_bridge_enterpriseAddressPaymentCred(RPtr self);
    public final native Result<RPtr> csl_bridge_enterpriseAddressToAddress(RPtr self);
    public final native Result<RPtr> csl_bridge_enterpriseAddressFromAddress(RPtr addr);
    public final native Result<Long> csl_bridge_enterpriseAddressNetworkId(RPtr self);

    public final native Result<byte[]> csl_bridge_exUnitPricesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitPricesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_exUnitPricesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitPricesFromHex(String hexStr);
    public final native Result<String> csl_bridge_exUnitPricesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitPricesFromJson(String json);
    public final native Result<RPtr> csl_bridge_exUnitPricesMemPrice(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitPricesStepPrice(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitPricesNew(RPtr memPrice, RPtr stepPrice);

    public final native Result<byte[]> csl_bridge_exUnitsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_exUnitsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitsFromHex(String hexStr);
    public final native Result<String> csl_bridge_exUnitsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitsFromJson(String json);
    public final native Result<RPtr> csl_bridge_exUnitsMem(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitsSteps(RPtr self);
    public final native Result<RPtr> csl_bridge_exUnitsNew(RPtr mem, RPtr steps);

    public final native Result<RPtr> csl_bridge_fixedBlockFromBytes(byte[] bytes);
    public final native Result<RPtr> csl_bridge_fixedBlockFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_fixedBlockHeader(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedBlockTransactionBodies(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedBlockTransactionWitnessSets(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedBlockAuxiliaryDataSet(RPtr self);
    public final native Result<String> csl_bridge_fixedBlockInvalidTransactions(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedBlockBlockHash(RPtr self);

    public final native Result<byte[]> csl_bridge_fixedTransactionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedTransactionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_fixedTransactionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedTransactionFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_fixedTransactionNew(byte[] rawBody, byte[] rawWitnessSet, boolean isValid);
    public final native Result<RPtr> csl_bridge_fixedTransactionNewWithAuxiliary(byte[] rawBody, byte[] rawWitnessSet, byte[] rawAuxiliaryData, boolean isValid);
    public final native Result<RPtr> csl_bridge_fixedTransactionBody(RPtr self);
    public final native Result<byte[]> csl_bridge_fixedTransactionRawBody(RPtr self);
    public final native Result<Void> csl_bridge_fixedTransactionSetBody(RPtr self, byte[] rawBody);
    public final native Result<Void> csl_bridge_fixedTransactionSetWitnessSet(RPtr self, byte[] rawWitnessSet);
    public final native Result<RPtr> csl_bridge_fixedTransactionWitnessSet(RPtr self);
    public final native Result<byte[]> csl_bridge_fixedTransactionRawWitnessSet(RPtr self);
    public final native Result<Void> csl_bridge_fixedTransactionSetIsValid(RPtr self, boolean valid);
    public final native Result<Boolean> csl_bridge_fixedTransactionIsValid(RPtr self);
    public final native Result<Void> csl_bridge_fixedTransactionSetAuxiliaryData(RPtr self, byte[] rawAuxiliaryData);
    public final native Result<RPtr> csl_bridge_fixedTransactionAuxiliaryData(RPtr self);
    public final native Result<byte[]> csl_bridge_fixedTransactionRawAuxiliaryData(RPtr self);
    public final native Result<Void> csl_bridge_fixedTransactionSignAndAddVkeySignature(RPtr self, RPtr privateKey);
    public final native Result<Void> csl_bridge_fixedTransactionSignAndAddIcarusBootstrapSignature(RPtr self, RPtr addr, RPtr privateKey);
    public final native Result<Void> csl_bridge_fixedTransactionSignAndAddDaedalusBootstrapSignature(RPtr self, RPtr addr, RPtr privateKey);

    public final native Result<RPtr> csl_bridge_fixedTransactionBodiesFromBytes(byte[] bytes);
    public final native Result<RPtr> csl_bridge_fixedTransactionBodiesFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_fixedTransactionBodiesNew();
    public final native Result<Long> csl_bridge_fixedTransactionBodiesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedTransactionBodiesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_fixedTransactionBodiesAdd(RPtr self, RPtr elem);

    public final native Result<RPtr> csl_bridge_fixedTransactionBodyFromBytes(byte[] bytes);
    public final native Result<RPtr> csl_bridge_fixedTransactionBodyFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_fixedTransactionBodyTransactionBody(RPtr self);
    public final native Result<RPtr> csl_bridge_fixedTransactionBodyTxHash(RPtr self);
    public final native Result<byte[]> csl_bridge_fixedTransactionBodyOriginalBytes(RPtr self);

    public final native Result<RPtr> csl_bridge_fixedVersionedBlockFromBytes(byte[] bytes);
    public final native Result<RPtr> csl_bridge_fixedVersionedBlockFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_fixedVersionedBlockBlock(RPtr self);
    public final native Result<Integer> csl_bridge_fixedVersionedBlockEra(RPtr self);

    public final native Result<byte[]> csl_bridge_generalTransactionMetadataToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_generalTransactionMetadataFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_generalTransactionMetadataToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_generalTransactionMetadataFromHex(String hexStr);
    public final native Result<String> csl_bridge_generalTransactionMetadataToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_generalTransactionMetadataFromJson(String json);
    public final native Result<RPtr> csl_bridge_generalTransactionMetadataNew();
    public final native Result<Long> csl_bridge_generalTransactionMetadataLen(RPtr self);
    public final native Result<RPtr> csl_bridge_generalTransactionMetadataInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_generalTransactionMetadataGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_generalTransactionMetadataKeys(RPtr self);

    public final native Result<RPtr> csl_bridge_genesisDelegateHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_genesisDelegateHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_genesisDelegateHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_genesisDelegateHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_genesisDelegateHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisDelegateHashFromHex(String hex);

    public final native Result<RPtr> csl_bridge_genesisHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_genesisHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_genesisHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_genesisHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_genesisHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisHashFromHex(String hex);

    public final native Result<byte[]> csl_bridge_genesisHashesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisHashesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_genesisHashesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisHashesFromHex(String hexStr);
    public final native Result<String> csl_bridge_genesisHashesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisHashesFromJson(String json);
    public final native Result<RPtr> csl_bridge_genesisHashesNew();
    public final native Result<Long> csl_bridge_genesisHashesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisHashesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_genesisHashesAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_genesisKeyDelegationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisKeyDelegationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_genesisKeyDelegationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisKeyDelegationFromHex(String hexStr);
    public final native Result<String> csl_bridge_genesisKeyDelegationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisKeyDelegationFromJson(String json);
    public final native Result<RPtr> csl_bridge_genesisKeyDelegationGenesishash(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisKeyDelegationGenesisDelegateHash(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisKeyDelegationVrfKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_genesisKeyDelegationNew(RPtr genesishash, RPtr genesisDelegateHash, RPtr vrfKeyhash);

    public final native Result<byte[]> csl_bridge_governanceActionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_governanceActionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionFromHex(String hexStr);
    public final native Result<String> csl_bridge_governanceActionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionFromJson(String json);
    public final native Result<RPtr> csl_bridge_governanceActionNewParameterChangeAction(RPtr parameterChangeAction);
    public final native Result<RPtr> csl_bridge_governanceActionNewHardForkInitiationAction(RPtr hardForkInitiationAction);
    public final native Result<RPtr> csl_bridge_governanceActionNewTreasuryWithdrawalsAction(RPtr treasuryWithdrawalsAction);
    public final native Result<RPtr> csl_bridge_governanceActionNewNoConfidenceAction(RPtr noConfidenceAction);
    public final native Result<RPtr> csl_bridge_governanceActionNewNewCommitteeAction(RPtr newCommitteeAction);
    public final native Result<RPtr> csl_bridge_governanceActionNewNewConstitutionAction(RPtr newConstitutionAction);
    public final native Result<RPtr> csl_bridge_governanceActionNewInfoAction(RPtr infoAction);
    public final native Result<Integer> csl_bridge_governanceActionKind(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionAsParameterChangeAction(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionAsHardForkInitiationAction(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionAsTreasuryWithdrawalsAction(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionAsNoConfidenceAction(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionAsNewCommitteeAction(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionAsNewConstitutionAction(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionAsInfoAction(RPtr self);

    public final native Result<byte[]> csl_bridge_governanceActionIdToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionIdFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_governanceActionIdToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionIdFromHex(String hexStr);
    public final native Result<String> csl_bridge_governanceActionIdToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionIdFromJson(String json);
    public final native Result<RPtr> csl_bridge_governanceActionIdTransactionId(RPtr self);
    public final native Result<Long> csl_bridge_governanceActionIdIndex(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionIdNew(RPtr transactionId, long index);

    public final native Result<String> csl_bridge_governanceActionIdsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_governanceActionIdsFromJson(String json);
    public final native Result<RPtr> csl_bridge_governanceActionIdsNew();
    public final native Result<Void> csl_bridge_governanceActionIdsAdd(RPtr self, RPtr governanceActionId);
    public final native Result<RPtr> csl_bridge_governanceActionIdsGet(RPtr self, long index);
    public final native Result<Long> csl_bridge_governanceActionIdsLen(RPtr self);

    public final native Result<byte[]> csl_bridge_hardForkInitiationActionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_hardForkInitiationActionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_hardForkInitiationActionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_hardForkInitiationActionFromHex(String hexStr);
    public final native Result<String> csl_bridge_hardForkInitiationActionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_hardForkInitiationActionFromJson(String json);
    public final native Result<RPtr> csl_bridge_hardForkInitiationActionGovActionId(RPtr self);
    public final native Result<RPtr> csl_bridge_hardForkInitiationActionProtocolVersion(RPtr self);
    public final native Result<RPtr> csl_bridge_hardForkInitiationActionNew(RPtr protocolVersion);
    public final native Result<RPtr> csl_bridge_hardForkInitiationActionNewWithActionId(RPtr govActionId, RPtr protocolVersion);

    public final native Result<byte[]> csl_bridge_headerToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_headerFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_headerToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_headerFromHex(String hexStr);
    public final native Result<String> csl_bridge_headerToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_headerFromJson(String json);
    public final native Result<RPtr> csl_bridge_headerHeaderBody(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodySignature(RPtr self);
    public final native Result<RPtr> csl_bridge_headerNew(RPtr headerBody, RPtr bodySignature);

    public final native Result<byte[]> csl_bridge_headerBodyToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_headerBodyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyFromHex(String hexStr);
    public final native Result<String> csl_bridge_headerBodyToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyFromJson(String json);
    public final native Result<Long> csl_bridge_headerBodyBlockNumber(RPtr self);
    public final native Result<Long> csl_bridge_headerBodySlot(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodySlotBignum(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyPrevHash(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyIssuerVkey(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyVrfVkey(RPtr self);
    public final native Result<Boolean> csl_bridge_headerBodyHasNonceAndLeaderVrf(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyNonceVrfOrNothing(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyLeaderVrfOrNothing(RPtr self);
    public final native Result<Boolean> csl_bridge_headerBodyHasVrfResult(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyVrfResultOrNothing(RPtr self);
    public final native Result<Long> csl_bridge_headerBodyBlockBodySize(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyBlockBodyHash(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyOperationalCert(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyProtocolVersion(RPtr self);
    public final native Result<RPtr> csl_bridge_headerBodyNew(long blockNumber, long slot, RPtr issuerVkey, RPtr vrfVkey, RPtr vrfResult, long blockBodySize, RPtr blockBodyHash, RPtr operationalCert, RPtr protocolVersion);
    public final native Result<RPtr> csl_bridge_headerBodyNewWithPrevHash(long blockNumber, long slot, RPtr prevHash, RPtr issuerVkey, RPtr vrfVkey, RPtr vrfResult, long blockBodySize, RPtr blockBodyHash, RPtr operationalCert, RPtr protocolVersion);

    public final native Result<RPtr> csl_bridge_headerBodyNewHeaderbody(long blockNumber, RPtr slot, RPtr issuerVkey, RPtr vrfVkey, RPtr vrfResult, long blockBodySize, RPtr blockBodyHash, RPtr operationalCert, RPtr protocolVersion);
    public final native Result<RPtr> csl_bridge_headerBodyNewHeaderbodyWithPrevHash(long blockNumber, RPtr slot, RPtr prevHash, RPtr issuerVkey, RPtr vrfVkey, RPtr vrfResult, long blockBodySize, RPtr blockBodyHash, RPtr operationalCert, RPtr protocolVersion);


    public final native Result<RPtr> csl_bridge_infoActionNew();

    public final native Result<byte[]> csl_bridge_intToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_intFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_intToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_intFromHex(String hexStr);
    public final native Result<String> csl_bridge_intToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_intFromJson(String json);
    public final native Result<RPtr> csl_bridge_intNew(RPtr x);
    public final native Result<RPtr> csl_bridge_intNewNegative(RPtr x);
    public final native Result<RPtr> csl_bridge_intNewI32(long x);
    public final native Result<Boolean> csl_bridge_intIsPositive(RPtr self);
    public final native Result<RPtr> csl_bridge_intAsPositive(RPtr self);
    public final native Result<RPtr> csl_bridge_intAsNegative(RPtr self);
    public final native Result<Long> csl_bridge_intAsI32(RPtr self);
    public final native Result<Long> csl_bridge_intAsI32OrNothing(RPtr self);
    public final native Result<Long> csl_bridge_intAsI32OrFail(RPtr self);
    public final native Result<String> csl_bridge_intToStr(RPtr self);
    public final native Result<RPtr> csl_bridge_intFromStr(String string);

    public final native Result<byte[]> csl_bridge_ipv4ToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_ipv4FromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_ipv4ToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_ipv4FromHex(String hexStr);
    public final native Result<String> csl_bridge_ipv4ToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_ipv4FromJson(String json);
    public final native Result<RPtr> csl_bridge_ipv4New(byte[] data);
    public final native Result<byte[]> csl_bridge_ipv4Ip(RPtr self);

    public final native Result<byte[]> csl_bridge_ipv6ToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_ipv6FromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_ipv6ToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_ipv6FromHex(String hexStr);
    public final native Result<String> csl_bridge_ipv6ToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_ipv6FromJson(String json);
    public final native Result<RPtr> csl_bridge_ipv6New(byte[] data);
    public final native Result<byte[]> csl_bridge_ipv6Ip(RPtr self);

    public final native Result<byte[]> csl_bridge_kESSignatureToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_kESSignatureFromBytes(byte[] bytes);

    public final native Result<RPtr> csl_bridge_kESVKeyFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_kESVKeyToBytes(RPtr self);
    public final native Result<String> csl_bridge_kESVKeyToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_kESVKeyFromBech32(String bechStr);
    public final native Result<String> csl_bridge_kESVKeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_kESVKeyFromHex(String hex);

    public final native Result<byte[]> csl_bridge_languageToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_languageFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_languageToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_languageFromHex(String hexStr);
    public final native Result<String> csl_bridge_languageToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_languageFromJson(String json);
    public final native Result<RPtr> csl_bridge_languageNewPlutusV1();
    public final native Result<RPtr> csl_bridge_languageNewPlutusV2();
    public final native Result<RPtr> csl_bridge_languageNewPlutusV3();
    public final native Result<Integer> csl_bridge_languageKind(RPtr self);

    public final native Result<RPtr> csl_bridge_languagesNew();
    public final native Result<Long> csl_bridge_languagesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_languagesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_languagesAdd(RPtr self, RPtr elem);
    public final native Result<RPtr> csl_bridge_languagesList();

    public final native Result<RPtr> csl_bridge_legacyDaedalusPrivateKeyFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_legacyDaedalusPrivateKeyAsBytes(RPtr self);
    public final native Result<byte[]> csl_bridge_legacyDaedalusPrivateKeyChaincode(RPtr self);

    public final native Result<RPtr> csl_bridge_linearFeeConstant(RPtr self);
    public final native Result<RPtr> csl_bridge_linearFeeCoefficient(RPtr self);
    public final native Result<RPtr> csl_bridge_linearFeeNew(RPtr coefficient, RPtr constant);

    public final native Result<byte[]> csl_bridge_mIRToStakeCredentialsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_mIRToStakeCredentialsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_mIRToStakeCredentialsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_mIRToStakeCredentialsFromHex(String hexStr);
    public final native Result<String> csl_bridge_mIRToStakeCredentialsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_mIRToStakeCredentialsFromJson(String json);
    public final native Result<RPtr> csl_bridge_mIRToStakeCredentialsNew();
    public final native Result<Long> csl_bridge_mIRToStakeCredentialsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_mIRToStakeCredentialsInsert(RPtr self, RPtr cred, RPtr delta);
    public final native Result<RPtr> csl_bridge_mIRToStakeCredentialsGet(RPtr self, RPtr cred);
    public final native Result<RPtr> csl_bridge_mIRToStakeCredentialsKeys(RPtr self);

    public final native Result<byte[]> csl_bridge_malformedAddressOriginalBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_malformedAddressToAddress(RPtr self);
    public final native Result<RPtr> csl_bridge_malformedAddressFromAddress(RPtr addr);

    public final native Result<byte[]> csl_bridge_metadataListToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_metadataListFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_metadataListToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_metadataListFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_metadataListNew();
    public final native Result<Long> csl_bridge_metadataListLen(RPtr self);
    public final native Result<RPtr> csl_bridge_metadataListGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_metadataListAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_metadataMapToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_metadataMapFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_metadataMapToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_metadataMapFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_metadataMapNew();
    public final native Result<Long> csl_bridge_metadataMapLen(RPtr self);
    public final native Result<RPtr> csl_bridge_metadataMapInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_metadataMapInsertStr(RPtr self, String key, RPtr value);
    public final native Result<RPtr> csl_bridge_metadataMapInsertI32(RPtr self, long key, RPtr value);
    public final native Result<RPtr> csl_bridge_metadataMapGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_metadataMapGetStr(RPtr self, String key);
    public final native Result<RPtr> csl_bridge_metadataMapGetI32(RPtr self, long key);
    public final native Result<Boolean> csl_bridge_metadataMapHas(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_metadataMapKeys(RPtr self);

    public final native Result<byte[]> csl_bridge_mintToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_mintFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_mintToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_mintFromHex(String hexStr);
    public final native Result<String> csl_bridge_mintToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_mintFromJson(String json);
    public final native Result<RPtr> csl_bridge_mintNew();
    public final native Result<RPtr> csl_bridge_mintNewFromEntry(RPtr key, RPtr value);
    public final native Result<Long> csl_bridge_mintLen(RPtr self);
    public final native Result<RPtr> csl_bridge_mintInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_mintGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_mintKeys(RPtr self);
    public final native Result<RPtr> csl_bridge_mintAsPositiveMultiasset(RPtr self);
    public final native Result<RPtr> csl_bridge_mintAsNegativeMultiasset(RPtr self);

    public final native Result<RPtr> csl_bridge_mintAssetsNew();
    public final native Result<RPtr> csl_bridge_mintAssetsNewFromEntry(RPtr key, RPtr value);
    public final native Result<Long> csl_bridge_mintAssetsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_mintAssetsInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_mintAssetsGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_mintAssetsKeys(RPtr self);

    public final native Result<RPtr> csl_bridge_mintBuilderNew();
    public final native Result<Void> csl_bridge_mintBuilderAddAsset(RPtr self, RPtr mint, RPtr assetName, RPtr amount);
    public final native Result<Void> csl_bridge_mintBuilderSetAsset(RPtr self, RPtr mint, RPtr assetName, RPtr amount);
    public final native Result<RPtr> csl_bridge_mintBuilderBuild(RPtr self);
    public final native Result<RPtr> csl_bridge_mintBuilderGetNativeScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_mintBuilderGetPlutusWitnesses(RPtr self);
    public final native Result<RPtr> csl_bridge_mintBuilderGetRefInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_mintBuilderGetRedeemers(RPtr self);
    public final native Result<Boolean> csl_bridge_mintBuilderHasPlutusScripts(RPtr self);
    public final native Result<Boolean> csl_bridge_mintBuilderHasNativeScripts(RPtr self);

    public final native Result<RPtr> csl_bridge_mintWitnessNewNativeScript(RPtr nativeScript);
    public final native Result<RPtr> csl_bridge_mintWitnessNewPlutusScript(RPtr plutusScript, RPtr redeemer);

    public final native Result<String> csl_bridge_mintsAssetsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_mintsAssetsFromJson(String json);
    public final native Result<RPtr> csl_bridge_mintsAssetsNew();
    public final native Result<Void> csl_bridge_mintsAssetsAdd(RPtr self, RPtr mintAssets);
    public final native Result<RPtr> csl_bridge_mintsAssetsGet(RPtr self, long index);
    public final native Result<Long> csl_bridge_mintsAssetsLen(RPtr self);

    public final native Result<byte[]> csl_bridge_moveInstantaneousRewardToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_moveInstantaneousRewardToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardFromHex(String hexStr);
    public final native Result<String> csl_bridge_moveInstantaneousRewardToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardFromJson(String json);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardNewToOtherPot(int pot, RPtr amount);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardNewToStakeCreds(int pot, RPtr amounts);
    public final native Result<Integer> csl_bridge_moveInstantaneousRewardPot(RPtr self);
    public final native Result<Integer> csl_bridge_moveInstantaneousRewardKind(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardAsToOtherPot(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardAsToStakeCreds(RPtr self);

    public final native Result<byte[]> csl_bridge_moveInstantaneousRewardsCertToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardsCertFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_moveInstantaneousRewardsCertToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardsCertFromHex(String hexStr);
    public final native Result<String> csl_bridge_moveInstantaneousRewardsCertToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardsCertFromJson(String json);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardsCertMoveInstantaneousReward(RPtr self);
    public final native Result<RPtr> csl_bridge_moveInstantaneousRewardsCertNew(RPtr moveInstantaneousReward);

    public final native Result<byte[]> csl_bridge_multiAssetToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_multiAssetFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_multiAssetToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_multiAssetFromHex(String hexStr);
    public final native Result<String> csl_bridge_multiAssetToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_multiAssetFromJson(String json);
    public final native Result<RPtr> csl_bridge_multiAssetNew();
    public final native Result<Long> csl_bridge_multiAssetLen(RPtr self);
    public final native Result<RPtr> csl_bridge_multiAssetInsert(RPtr self, RPtr policyId, RPtr assets);
    public final native Result<RPtr> csl_bridge_multiAssetGet(RPtr self, RPtr policyId);
    public final native Result<RPtr> csl_bridge_multiAssetSetAsset(RPtr self, RPtr policyId, RPtr assetName, RPtr value);
    public final native Result<RPtr> csl_bridge_multiAssetGetAsset(RPtr self, RPtr policyId, RPtr assetName);
    public final native Result<RPtr> csl_bridge_multiAssetKeys(RPtr self);
    public final native Result<RPtr> csl_bridge_multiAssetSub(RPtr self, RPtr rhsMa);

    public final native Result<byte[]> csl_bridge_multiHostNameToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_multiHostNameFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_multiHostNameToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_multiHostNameFromHex(String hexStr);
    public final native Result<String> csl_bridge_multiHostNameToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_multiHostNameFromJson(String json);
    public final native Result<RPtr> csl_bridge_multiHostNameDnsName(RPtr self);
    public final native Result<RPtr> csl_bridge_multiHostNameNew(RPtr dnsName);

    public final native Result<byte[]> csl_bridge_nativeScriptToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_nativeScriptToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptFromHex(String hexStr);
    public final native Result<String> csl_bridge_nativeScriptToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptFromJson(String json);
    public final native Result<RPtr> csl_bridge_nativeScriptHash(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptNewScriptPubkey(RPtr scriptPubkey);
    public final native Result<RPtr> csl_bridge_nativeScriptNewScriptAll(RPtr scriptAll);
    public final native Result<RPtr> csl_bridge_nativeScriptNewScriptAny(RPtr scriptAny);
    public final native Result<RPtr> csl_bridge_nativeScriptNewScriptNOfK(RPtr scriptNOfK);
    public final native Result<RPtr> csl_bridge_nativeScriptNewTimelockStart(RPtr timelockStart);
    public final native Result<RPtr> csl_bridge_nativeScriptNewTimelockExpiry(RPtr timelockExpiry);
    public final native Result<Integer> csl_bridge_nativeScriptKind(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptAsScriptPubkey(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptAsScriptAll(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptAsScriptAny(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptAsScriptNOfK(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptAsTimelockStart(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptAsTimelockExpiry(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptGetRequiredSigners(RPtr self);

    public final native Result<RPtr> csl_bridge_nativeScriptSourceNew(RPtr script);
    public final native Result<RPtr> csl_bridge_nativeScriptSourceNewRefInput(RPtr scriptHash, RPtr input, long scriptSize);
    public final native Result<Void> csl_bridge_nativeScriptSourceSetRequiredSigners(RPtr self, RPtr keyHashes);
    public final native Result<Long> csl_bridge_nativeScriptSourceGetRefScriptSize(RPtr self);

    public final native Result<RPtr> csl_bridge_nativeScriptsNew();
    public final native Result<Long> csl_bridge_nativeScriptsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptsGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_nativeScriptsAdd(RPtr self, RPtr elem);
    public final native Result<byte[]> csl_bridge_nativeScriptsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_nativeScriptsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptsFromHex(String hexStr);
    public final native Result<String> csl_bridge_nativeScriptsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_nativeScriptsFromJson(String json);

    public final native Result<byte[]> csl_bridge_networkIdToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_networkIdFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_networkIdToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_networkIdFromHex(String hexStr);
    public final native Result<String> csl_bridge_networkIdToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_networkIdFromJson(String json);
    public final native Result<RPtr> csl_bridge_networkIdTestnet();
    public final native Result<RPtr> csl_bridge_networkIdMainnet();
    public final native Result<Integer> csl_bridge_networkIdKind(RPtr self);

    public final native Result<RPtr> csl_bridge_networkInfoNew(long networkId, long protocolMagic);
    public final native Result<Long> csl_bridge_networkInfoNetworkId(RPtr self);
    public final native Result<Long> csl_bridge_networkInfoProtocolMagic(RPtr self);
    public final native Result<RPtr> csl_bridge_networkInfoTestnetPreview();
    public final native Result<RPtr> csl_bridge_networkInfoTestnetPreprod();
    public final native Result<RPtr> csl_bridge_networkInfoMainnet();

    public final native Result<byte[]> csl_bridge_newConstitutionActionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_newConstitutionActionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_newConstitutionActionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_newConstitutionActionFromHex(String hexStr);
    public final native Result<String> csl_bridge_newConstitutionActionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_newConstitutionActionFromJson(String json);
    public final native Result<RPtr> csl_bridge_newConstitutionActionGovActionId(RPtr self);
    public final native Result<RPtr> csl_bridge_newConstitutionActionConstitution(RPtr self);
    public final native Result<RPtr> csl_bridge_newConstitutionActionNew(RPtr constitution);
    public final native Result<RPtr> csl_bridge_newConstitutionActionNewWithActionId(RPtr govActionId, RPtr constitution);
    public final native Result<Boolean> csl_bridge_newConstitutionActionHasScriptHash(RPtr self);

    public final native Result<byte[]> csl_bridge_noConfidenceActionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_noConfidenceActionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_noConfidenceActionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_noConfidenceActionFromHex(String hexStr);
    public final native Result<String> csl_bridge_noConfidenceActionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_noConfidenceActionFromJson(String json);
    public final native Result<RPtr> csl_bridge_noConfidenceActionGovActionId(RPtr self);
    public final native Result<RPtr> csl_bridge_noConfidenceActionNew();
    public final native Result<RPtr> csl_bridge_noConfidenceActionNewWithActionId(RPtr govActionId);

    public final native Result<byte[]> csl_bridge_nonceToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_nonceFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_nonceToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_nonceFromHex(String hexStr);
    public final native Result<String> csl_bridge_nonceToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_nonceFromJson(String json);
    public final native Result<RPtr> csl_bridge_nonceNewIdentity();
    public final native Result<RPtr> csl_bridge_nonceNewFromHash(byte[] hash);
    public final native Result<byte[]> csl_bridge_nonceGetHash(RPtr self);

    public final native Result<byte[]> csl_bridge_operationalCertToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_operationalCertFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_operationalCertToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_operationalCertFromHex(String hexStr);
    public final native Result<String> csl_bridge_operationalCertToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_operationalCertFromJson(String json);
    public final native Result<RPtr> csl_bridge_operationalCertHotVkey(RPtr self);
    public final native Result<Long> csl_bridge_operationalCertSequenceNumber(RPtr self);
    public final native Result<Long> csl_bridge_operationalCertKesPeriod(RPtr self);
    public final native Result<RPtr> csl_bridge_operationalCertSigma(RPtr self);
    public final native Result<RPtr> csl_bridge_operationalCertNew(RPtr hotVkey, long sequenceNumber, long kesPeriod, RPtr sigma);

    public final native Result<RPtr> csl_bridge_outputDatumNewDataHash(RPtr dataHash);
    public final native Result<RPtr> csl_bridge_outputDatumNewData(RPtr data);
    public final native Result<RPtr> csl_bridge_outputDatumDataHash(RPtr self);
    public final native Result<RPtr> csl_bridge_outputDatumData(RPtr self);

    public final native Result<byte[]> csl_bridge_parameterChangeActionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_parameterChangeActionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_parameterChangeActionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_parameterChangeActionFromHex(String hexStr);
    public final native Result<String> csl_bridge_parameterChangeActionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_parameterChangeActionFromJson(String json);
    public final native Result<RPtr> csl_bridge_parameterChangeActionGovActionId(RPtr self);
    public final native Result<RPtr> csl_bridge_parameterChangeActionProtocolParamUpdates(RPtr self);
    public final native Result<RPtr> csl_bridge_parameterChangeActionPolicyHash(RPtr self);
    public final native Result<RPtr> csl_bridge_parameterChangeActionNew(RPtr protocolParamUpdates);
    public final native Result<RPtr> csl_bridge_parameterChangeActionNewWithActionId(RPtr govActionId, RPtr protocolParamUpdates);
    public final native Result<RPtr> csl_bridge_parameterChangeActionNewWithPolicyHash(RPtr protocolParamUpdates, RPtr policyHash);
    public final native Result<RPtr> csl_bridge_parameterChangeActionNewWithPolicyHashAndActionId(RPtr govActionId, RPtr protocolParamUpdates, RPtr policyHash);

    public final native Result<byte[]> csl_bridge_plutusDataToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusDataFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_plutusDataToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusDataFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_plutusDataNewConstrPlutusData(RPtr constrPlutusData);
    public final native Result<RPtr> csl_bridge_plutusDataNewEmptyConstrPlutusData(RPtr alternative);
    public final native Result<RPtr> csl_bridge_plutusDataNewSingleValueConstrPlutusData(RPtr alternative, RPtr plutusData);
    public final native Result<RPtr> csl_bridge_plutusDataNewMap(RPtr map);
    public final native Result<RPtr> csl_bridge_plutusDataNewList(RPtr list);
    public final native Result<RPtr> csl_bridge_plutusDataNewInteger(RPtr integer);
    public final native Result<RPtr> csl_bridge_plutusDataNewBytes(byte[] bytes);
    public final native Result<Integer> csl_bridge_plutusDataKind(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusDataAsConstrPlutusData(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusDataAsMap(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusDataAsList(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusDataAsInteger(RPtr self);
    public final native Result<byte[]> csl_bridge_plutusDataAsBytes(RPtr self);
    public final native Result<String> csl_bridge_plutusDataToJson(RPtr self, int schema);
    public final native Result<RPtr> csl_bridge_plutusDataFromJson(String json, int schema);
    public final native Result<RPtr> csl_bridge_plutusDataFromAddress(RPtr address);

    public final native Result<byte[]> csl_bridge_plutusListToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusListFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_plutusListToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusListFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_plutusListNew();
    public final native Result<Long> csl_bridge_plutusListLen(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusListGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_plutusListAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_plutusMapToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusMapFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_plutusMapToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusMapFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_plutusMapNew();
    public final native Result<Long> csl_bridge_plutusMapLen(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusMapInsert(RPtr self, RPtr key, RPtr values);
    public final native Result<RPtr> csl_bridge_plutusMapGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_plutusMapKeys(RPtr self);

    public final native Result<RPtr> csl_bridge_plutusMapValuesNew();
    public final native Result<Long> csl_bridge_plutusMapValuesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusMapValuesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_plutusMapValuesAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_plutusScriptToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_plutusScriptToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_plutusScriptNew(byte[] bytes);
    public final native Result<RPtr> csl_bridge_plutusScriptNewV2(byte[] bytes);
    public final native Result<RPtr> csl_bridge_plutusScriptNewV3(byte[] bytes);
    public final native Result<RPtr> csl_bridge_plutusScriptNewWithVersion(byte[] bytes, RPtr language);
    public final native Result<byte[]> csl_bridge_plutusScriptBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptFromBytesV2(byte[] bytes);
    public final native Result<RPtr> csl_bridge_plutusScriptFromBytesV3(byte[] bytes);
    public final native Result<RPtr> csl_bridge_plutusScriptFromBytesWithVersion(byte[] bytes, RPtr language);
    public final native Result<RPtr> csl_bridge_plutusScriptFromHexWithVersion(String hexStr, RPtr language);
    public final native Result<RPtr> csl_bridge_plutusScriptHash(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptLanguageVersion(RPtr self);

    public final native Result<RPtr> csl_bridge_plutusScriptSourceNew(RPtr script);
    public final native Result<RPtr> csl_bridge_plutusScriptSourceNewRefInput(RPtr scriptHash, RPtr input, RPtr langVer, long scriptSize);
    public final native Result<Void> csl_bridge_plutusScriptSourceSetRequiredSigners(RPtr self, RPtr keyHashes);
    public final native Result<Long> csl_bridge_plutusScriptSourceGetRefScriptSize(RPtr self);

    public final native Result<byte[]> csl_bridge_plutusScriptsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_plutusScriptsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptsFromHex(String hexStr);
    public final native Result<String> csl_bridge_plutusScriptsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptsFromJson(String json);
    public final native Result<RPtr> csl_bridge_plutusScriptsNew();
    public final native Result<Long> csl_bridge_plutusScriptsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusScriptsGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_plutusScriptsAdd(RPtr self, RPtr elem);

    public final native Result<RPtr> csl_bridge_plutusWitnessNew(RPtr script, RPtr datum, RPtr redeemer);
    public final native Result<RPtr> csl_bridge_plutusWitnessNewWithRef(RPtr script, RPtr datum, RPtr redeemer);
    public final native Result<RPtr> csl_bridge_plutusWitnessNewWithoutDatum(RPtr script, RPtr redeemer);
    public final native Result<RPtr> csl_bridge_plutusWitnessNewWithRefWithoutDatum(RPtr script, RPtr redeemer);
    public final native Result<RPtr> csl_bridge_plutusWitnessScript(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusWitnessDatum(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusWitnessRedeemer(RPtr self);

    public final native Result<RPtr> csl_bridge_plutusWitnessesNew();
    public final native Result<Long> csl_bridge_plutusWitnessesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_plutusWitnessesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_plutusWitnessesAdd(RPtr self, RPtr elem);

    public final native Result<RPtr> csl_bridge_pointerNew(long slot, long txIndex, long certIndex);
    public final native Result<RPtr> csl_bridge_pointerNewPointer(RPtr slot, RPtr txIndex, RPtr certIndex);
    public final native Result<Long> csl_bridge_pointerSlot(RPtr self);
    public final native Result<Long> csl_bridge_pointerTxIndex(RPtr self);
    public final native Result<Long> csl_bridge_pointerCertIndex(RPtr self);
    public final native Result<RPtr> csl_bridge_pointerSlotBignum(RPtr self);
    public final native Result<RPtr> csl_bridge_pointerTxIndexBignum(RPtr self);
    public final native Result<RPtr> csl_bridge_pointerCertIndexBignum(RPtr self);

    public final native Result<RPtr> csl_bridge_pointerAddressNew(long network, RPtr payment, RPtr stake);
    public final native Result<RPtr> csl_bridge_pointerAddressPaymentCred(RPtr self);
    public final native Result<RPtr> csl_bridge_pointerAddressStakePointer(RPtr self);
    public final native Result<RPtr> csl_bridge_pointerAddressToAddress(RPtr self);
    public final native Result<RPtr> csl_bridge_pointerAddressFromAddress(RPtr addr);
    public final native Result<Long> csl_bridge_pointerAddressNetworkId(RPtr self);

    public final native Result<byte[]> csl_bridge_poolMetadataToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_poolMetadataFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_poolMetadataToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_poolMetadataFromHex(String hexStr);
    public final native Result<String> csl_bridge_poolMetadataToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_poolMetadataFromJson(String json);
    public final native Result<RPtr> csl_bridge_poolMetadataUrl(RPtr self);
    public final native Result<RPtr> csl_bridge_poolMetadataPoolMetadataHash(RPtr self);
    public final native Result<RPtr> csl_bridge_poolMetadataNew(RPtr url, RPtr poolMetadataHash);

    public final native Result<RPtr> csl_bridge_poolMetadataHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_poolMetadataHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_poolMetadataHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_poolMetadataHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_poolMetadataHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_poolMetadataHashFromHex(String hex);

    public final native Result<byte[]> csl_bridge_poolParamsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_poolParamsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsFromHex(String hexStr);
    public final native Result<String> csl_bridge_poolParamsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsFromJson(String json);
    public final native Result<RPtr> csl_bridge_poolParamsOperator(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsVrfKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsPledge(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsCost(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsMargin(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsRewardAccount(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsPoolOwners(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsRelays(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsPoolMetadata(RPtr self);
    public final native Result<RPtr> csl_bridge_poolParamsNew(RPtr operator, RPtr vrfKeyhash, RPtr pledge, RPtr cost, RPtr margin, RPtr rewardAccount, RPtr poolOwners, RPtr relays);
    public final native Result<RPtr> csl_bridge_poolParamsNewWithPoolMetadata(RPtr operator, RPtr vrfKeyhash, RPtr pledge, RPtr cost, RPtr margin, RPtr rewardAccount, RPtr poolOwners, RPtr relays, RPtr poolMetadata);


    public final native Result<byte[]> csl_bridge_poolRegistrationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRegistrationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_poolRegistrationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRegistrationFromHex(String hexStr);
    public final native Result<String> csl_bridge_poolRegistrationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRegistrationFromJson(String json);
    public final native Result<RPtr> csl_bridge_poolRegistrationPoolParams(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRegistrationNew(RPtr poolParams);

    public final native Result<byte[]> csl_bridge_poolRetirementToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRetirementFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_poolRetirementToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRetirementFromHex(String hexStr);
    public final native Result<String> csl_bridge_poolRetirementToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRetirementFromJson(String json);
    public final native Result<RPtr> csl_bridge_poolRetirementPoolKeyhash(RPtr self);
    public final native Result<Long> csl_bridge_poolRetirementEpoch(RPtr self);
    public final native Result<RPtr> csl_bridge_poolRetirementNew(RPtr poolKeyhash, long epoch);

    public final native Result<byte[]> csl_bridge_poolVotingThresholdsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_poolVotingThresholdsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsFromHex(String hexStr);
    public final native Result<String> csl_bridge_poolVotingThresholdsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsFromJson(String json);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsNew(RPtr motionNoConfidence, RPtr committeeNormal, RPtr committeeNoConfidence, RPtr hardForkInitiation, RPtr securityRelevantThreshold);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsMotionNoConfidence(RPtr self);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsCommitteeNormal(RPtr self);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsCommitteeNoConfidence(RPtr self);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsHardForkInitiation(RPtr self);
    public final native Result<RPtr> csl_bridge_poolVotingThresholdsSecurityRelevantThreshold(RPtr self);

    public final native Result<RPtr> csl_bridge_privateKeyToPublic(RPtr self);
    public final native Result<RPtr> csl_bridge_privateKeyGenerateEd25519();
    public final native Result<RPtr> csl_bridge_privateKeyGenerateEd25519extended();
    public final native Result<RPtr> csl_bridge_privateKeyFromBech32(String bech32Str);
    public final native Result<String> csl_bridge_privateKeyToBech32(RPtr self);
    public final native Result<byte[]> csl_bridge_privateKeyAsBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_privateKeyFromExtendedBytes(byte[] bytes);
    public final native Result<RPtr> csl_bridge_privateKeyFromNormalBytes(byte[] bytes);
    public final native Result<RPtr> csl_bridge_privateKeySign(RPtr self, byte[] message);
    public final native Result<String> csl_bridge_privateKeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_privateKeyFromHex(String hexStr);

    public final native Result<byte[]> csl_bridge_proposedProtocolParameterUpdatesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_proposedProtocolParameterUpdatesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_proposedProtocolParameterUpdatesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_proposedProtocolParameterUpdatesFromHex(String hexStr);
    public final native Result<String> csl_bridge_proposedProtocolParameterUpdatesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_proposedProtocolParameterUpdatesFromJson(String json);
    public final native Result<RPtr> csl_bridge_proposedProtocolParameterUpdatesNew();
    public final native Result<Long> csl_bridge_proposedProtocolParameterUpdatesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_proposedProtocolParameterUpdatesInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_proposedProtocolParameterUpdatesGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_proposedProtocolParameterUpdatesKeys(RPtr self);

    public final native Result<byte[]> csl_bridge_protocolParamUpdateToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_protocolParamUpdateToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateFromHex(String hexStr);
    public final native Result<String> csl_bridge_protocolParamUpdateToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateFromJson(String json);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMinfeeA(RPtr self, RPtr minfeeA);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateMinfeeA(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMinfeeB(RPtr self, RPtr minfeeB);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateMinfeeB(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxBlockBodySize(RPtr self, long maxBlockBodySize);
    public final native Result<Long> csl_bridge_protocolParamUpdateMaxBlockBodySize(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxTxSize(RPtr self, long maxTxSize);
    public final native Result<Long> csl_bridge_protocolParamUpdateMaxTxSize(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxBlockHeaderSize(RPtr self, long maxBlockHeaderSize);
    public final native Result<Long> csl_bridge_protocolParamUpdateMaxBlockHeaderSize(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetKeyDeposit(RPtr self, RPtr keyDeposit);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateKeyDeposit(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetPoolDeposit(RPtr self, RPtr poolDeposit);
    public final native Result<RPtr> csl_bridge_protocolParamUpdatePoolDeposit(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxEpoch(RPtr self, long maxEpoch);
    public final native Result<Long> csl_bridge_protocolParamUpdateMaxEpoch(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetNOpt(RPtr self, long nOpt);
    public final native Result<Long> csl_bridge_protocolParamUpdateNOpt(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetPoolPledgeInfluence(RPtr self, RPtr poolPledgeInfluence);
    public final native Result<RPtr> csl_bridge_protocolParamUpdatePoolPledgeInfluence(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetExpansionRate(RPtr self, RPtr expansionRate);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateExpansionRate(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetTreasuryGrowthRate(RPtr self, RPtr treasuryGrowthRate);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateTreasuryGrowthRate(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateD(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateExtraEntropy(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetProtocolVersion(RPtr self, RPtr protocolVersion);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateProtocolVersion(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMinPoolCost(RPtr self, RPtr minPoolCost);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateMinPoolCost(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetAdaPerUtxoByte(RPtr self, RPtr adaPerUtxoByte);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateAdaPerUtxoByte(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetCostModels(RPtr self, RPtr costModels);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateCostModels(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetExecutionCosts(RPtr self, RPtr executionCosts);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateExecutionCosts(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxTxExUnits(RPtr self, RPtr maxTxExUnits);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateMaxTxExUnits(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxBlockExUnits(RPtr self, RPtr maxBlockExUnits);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateMaxBlockExUnits(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxValueSize(RPtr self, long maxValueSize);
    public final native Result<Long> csl_bridge_protocolParamUpdateMaxValueSize(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetCollateralPercentage(RPtr self, long collateralPercentage);
    public final native Result<Long> csl_bridge_protocolParamUpdateCollateralPercentage(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMaxCollateralInputs(RPtr self, long maxCollateralInputs);
    public final native Result<Long> csl_bridge_protocolParamUpdateMaxCollateralInputs(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetPoolVotingThresholds(RPtr self, RPtr poolVotingThresholds);
    public final native Result<RPtr> csl_bridge_protocolParamUpdatePoolVotingThresholds(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetDrepVotingThresholds(RPtr self, RPtr drepVotingThresholds);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateDrepVotingThresholds(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetMinCommitteeSize(RPtr self, long minCommitteeSize);
    public final native Result<Long> csl_bridge_protocolParamUpdateMinCommitteeSize(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetCommitteeTermLimit(RPtr self, long committeeTermLimit);
    public final native Result<Long> csl_bridge_protocolParamUpdateCommitteeTermLimit(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetGovernanceActionValidityPeriod(RPtr self, long governanceActionValidityPeriod);
    public final native Result<Long> csl_bridge_protocolParamUpdateGovernanceActionValidityPeriod(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetGovernanceActionDeposit(RPtr self, RPtr governanceActionDeposit);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateGovernanceActionDeposit(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetDrepDeposit(RPtr self, RPtr drepDeposit);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateDrepDeposit(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetDrepInactivityPeriod(RPtr self, long drepInactivityPeriod);
    public final native Result<Long> csl_bridge_protocolParamUpdateDrepInactivityPeriod(RPtr self);
    public final native Result<Void> csl_bridge_protocolParamUpdateSetRefScriptCoinsPerByte(RPtr self, RPtr refScriptCoinsPerByte);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateRefScriptCoinsPerByte(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolParamUpdateNew();

    public final native Result<byte[]> csl_bridge_protocolVersionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolVersionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_protocolVersionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolVersionFromHex(String hexStr);
    public final native Result<String> csl_bridge_protocolVersionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolVersionFromJson(String json);
    public final native Result<Long> csl_bridge_protocolVersionMajor(RPtr self);
    public final native Result<Long> csl_bridge_protocolVersionMinor(RPtr self);
    public final native Result<RPtr> csl_bridge_protocolVersionNew(long major, long minor);

    public final native Result<RPtr> csl_bridge_publicKeyFromBech32(String bech32Str);
    public final native Result<String> csl_bridge_publicKeyToBech32(RPtr self);
    public final native Result<byte[]> csl_bridge_publicKeyAsBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_publicKeyFromBytes(byte[] bytes);
    public final native Result<Boolean> csl_bridge_publicKeyVerify(RPtr self, byte[] data, RPtr signature);
    public final native Result<RPtr> csl_bridge_publicKeyHash(RPtr self);
    public final native Result<String> csl_bridge_publicKeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_publicKeyFromHex(String hexStr);

    public final native Result<RPtr> csl_bridge_publicKeysNew();
    public final native Result<Long> csl_bridge_publicKeysSize(RPtr self);
    public final native Result<RPtr> csl_bridge_publicKeysGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_publicKeysAdd(RPtr self, RPtr key);

    public final native Result<byte[]> csl_bridge_redeemerToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_redeemerToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerFromHex(String hexStr);
    public final native Result<String> csl_bridge_redeemerToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerFromJson(String json);
    public final native Result<RPtr> csl_bridge_redeemerTag(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerIndex(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerData(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerExUnits(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerNew(RPtr tag, RPtr index, RPtr data, RPtr exUnits);

    public final native Result<byte[]> csl_bridge_redeemerTagToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerTagFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_redeemerTagToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerTagFromHex(String hexStr);
    public final native Result<String> csl_bridge_redeemerTagToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemerTagFromJson(String json);
    public final native Result<RPtr> csl_bridge_redeemerTagNewSpend();
    public final native Result<RPtr> csl_bridge_redeemerTagNewMint();
    public final native Result<RPtr> csl_bridge_redeemerTagNewCert();
    public final native Result<RPtr> csl_bridge_redeemerTagNewReward();
    public final native Result<RPtr> csl_bridge_redeemerTagNewVote();
    public final native Result<RPtr> csl_bridge_redeemerTagNewVotingProposal();
    public final native Result<Integer> csl_bridge_redeemerTagKind(RPtr self);

    public final native Result<byte[]> csl_bridge_redeemersToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemersFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_redeemersToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemersFromHex(String hexStr);
    public final native Result<String> csl_bridge_redeemersToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemersFromJson(String json);
    public final native Result<RPtr> csl_bridge_redeemersNew();
    public final native Result<Long> csl_bridge_redeemersLen(RPtr self);
    public final native Result<RPtr> csl_bridge_redeemersGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_redeemersAdd(RPtr self, RPtr elem);
    public final native Result<RPtr> csl_bridge_redeemersTotalExUnits(RPtr self);

    public final native Result<byte[]> csl_bridge_relayToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_relayFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_relayToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_relayFromHex(String hexStr);
    public final native Result<String> csl_bridge_relayToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_relayFromJson(String json);
    public final native Result<RPtr> csl_bridge_relayNewSingleHostAddr(RPtr singleHostAddr);
    public final native Result<RPtr> csl_bridge_relayNewSingleHostName(RPtr singleHostName);
    public final native Result<RPtr> csl_bridge_relayNewMultiHostName(RPtr multiHostName);
    public final native Result<Integer> csl_bridge_relayKind(RPtr self);
    public final native Result<RPtr> csl_bridge_relayAsSingleHostAddr(RPtr self);
    public final native Result<RPtr> csl_bridge_relayAsSingleHostName(RPtr self);
    public final native Result<RPtr> csl_bridge_relayAsMultiHostName(RPtr self);

    public final native Result<byte[]> csl_bridge_relaysToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_relaysFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_relaysToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_relaysFromHex(String hexStr);
    public final native Result<String> csl_bridge_relaysToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_relaysFromJson(String json);
    public final native Result<RPtr> csl_bridge_relaysNew();
    public final native Result<Long> csl_bridge_relaysLen(RPtr self);
    public final native Result<RPtr> csl_bridge_relaysGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_relaysAdd(RPtr self, RPtr elem);

    public final native Result<RPtr> csl_bridge_rewardAddressNew(long network, RPtr payment);
    public final native Result<RPtr> csl_bridge_rewardAddressPaymentCred(RPtr self);
    public final native Result<RPtr> csl_bridge_rewardAddressToAddress(RPtr self);
    public final native Result<RPtr> csl_bridge_rewardAddressFromAddress(RPtr addr);
    public final native Result<Long> csl_bridge_rewardAddressNetworkId(RPtr self);

    public final native Result<byte[]> csl_bridge_rewardAddressesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_rewardAddressesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_rewardAddressesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_rewardAddressesFromHex(String hexStr);
    public final native Result<String> csl_bridge_rewardAddressesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_rewardAddressesFromJson(String json);
    public final native Result<RPtr> csl_bridge_rewardAddressesNew();
    public final native Result<Long> csl_bridge_rewardAddressesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_rewardAddressesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_rewardAddressesAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_scriptAllToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAllFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_scriptAllToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAllFromHex(String hexStr);
    public final native Result<String> csl_bridge_scriptAllToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAllFromJson(String json);
    public final native Result<RPtr> csl_bridge_scriptAllNativeScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAllNew(RPtr nativeScripts);

    public final native Result<byte[]> csl_bridge_scriptAnyToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAnyFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_scriptAnyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAnyFromHex(String hexStr);
    public final native Result<String> csl_bridge_scriptAnyToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAnyFromJson(String json);
    public final native Result<RPtr> csl_bridge_scriptAnyNativeScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptAnyNew(RPtr nativeScripts);

    public final native Result<RPtr> csl_bridge_scriptDataHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_scriptDataHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_scriptDataHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_scriptDataHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_scriptDataHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptDataHashFromHex(String hex);

    public final native Result<RPtr> csl_bridge_scriptHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_scriptHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_scriptHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_scriptHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_scriptHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptHashFromHex(String hex);

    public final native Result<byte[]> csl_bridge_scriptHashesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptHashesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_scriptHashesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptHashesFromHex(String hexStr);
    public final native Result<String> csl_bridge_scriptHashesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptHashesFromJson(String json);
    public final native Result<RPtr> csl_bridge_scriptHashesNew();
    public final native Result<Long> csl_bridge_scriptHashesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptHashesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_scriptHashesAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_scriptNOfKToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptNOfKFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_scriptNOfKToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptNOfKFromHex(String hexStr);
    public final native Result<String> csl_bridge_scriptNOfKToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptNOfKFromJson(String json);
    public final native Result<Long> csl_bridge_scriptNOfKN(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptNOfKNativeScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptNOfKNew(long n, RPtr nativeScripts);

    public final native Result<byte[]> csl_bridge_scriptPubkeyToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptPubkeyFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_scriptPubkeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptPubkeyFromHex(String hexStr);
    public final native Result<String> csl_bridge_scriptPubkeyToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptPubkeyFromJson(String json);
    public final native Result<RPtr> csl_bridge_scriptPubkeyAddrKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptPubkeyNew(RPtr addrKeyhash);

    public final native Result<byte[]> csl_bridge_scriptRefToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptRefFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_scriptRefToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptRefFromHex(String hexStr);
    public final native Result<String> csl_bridge_scriptRefToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptRefFromJson(String json);
    public final native Result<RPtr> csl_bridge_scriptRefNewNativeScript(RPtr nativeScript);
    public final native Result<RPtr> csl_bridge_scriptRefNewPlutusScript(RPtr plutusScript);
    public final native Result<Boolean> csl_bridge_scriptRefIsNativeScript(RPtr self);
    public final native Result<Boolean> csl_bridge_scriptRefIsPlutusScript(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptRefNativeScript(RPtr self);
    public final native Result<RPtr> csl_bridge_scriptRefPlutusScript(RPtr self);
    public final native Result<byte[]> csl_bridge_scriptRefToUnwrappedBytes(RPtr self);

    public final native Result<byte[]> csl_bridge_singleHostAddrToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostAddrFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_singleHostAddrToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostAddrFromHex(String hexStr);
    public final native Result<String> csl_bridge_singleHostAddrToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostAddrFromJson(String json);
    public final native Result<Long> csl_bridge_singleHostAddrPort(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostAddrIpv4(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostAddrIpv6(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostAddrNew();
    public final native Result<RPtr> csl_bridge_singleHostAddrNewWithPort(long port);
    public final native Result<RPtr> csl_bridge_singleHostAddrNewWithIpv4(RPtr ipv4);
    public final native Result<RPtr> csl_bridge_singleHostAddrNewWithPortIpv4(long port, RPtr ipv4);
    public final native Result<RPtr> csl_bridge_singleHostAddrNewWithIpv6(RPtr ipv6);
    public final native Result<RPtr> csl_bridge_singleHostAddrNewWithPortIpv6(long port, RPtr ipv6);
    public final native Result<RPtr> csl_bridge_singleHostAddrNewWithIpv4Ipv6(RPtr ipv4, RPtr ipv6);
    public final native Result<RPtr> csl_bridge_singleHostAddrNewWithPortIpv4Ipv6(long port, RPtr ipv4, RPtr ipv6);


    public final native Result<byte[]> csl_bridge_singleHostNameToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostNameFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_singleHostNameToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostNameFromHex(String hexStr);
    public final native Result<String> csl_bridge_singleHostNameToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostNameFromJson(String json);
    public final native Result<Long> csl_bridge_singleHostNamePort(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostNameDnsName(RPtr self);
    public final native Result<RPtr> csl_bridge_singleHostNameNew(RPtr dnsName);
    public final native Result<RPtr> csl_bridge_singleHostNameNewWithPort(long port, RPtr dnsName);


    public final native Result<byte[]> csl_bridge_stakeAndVoteDelegationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeAndVoteDelegationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_stakeAndVoteDelegationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeAndVoteDelegationFromHex(String hexStr);
    public final native Result<String> csl_bridge_stakeAndVoteDelegationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeAndVoteDelegationFromJson(String json);
    public final native Result<RPtr> csl_bridge_stakeAndVoteDelegationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeAndVoteDelegationPoolKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeAndVoteDelegationDrep(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeAndVoteDelegationNew(RPtr stakeCredential, RPtr poolKeyhash, RPtr drep);
    public final native Result<Boolean> csl_bridge_stakeAndVoteDelegationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_stakeDelegationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDelegationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_stakeDelegationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDelegationFromHex(String hexStr);
    public final native Result<String> csl_bridge_stakeDelegationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDelegationFromJson(String json);
    public final native Result<RPtr> csl_bridge_stakeDelegationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDelegationPoolKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDelegationNew(RPtr stakeCredential, RPtr poolKeyhash);
    public final native Result<Boolean> csl_bridge_stakeDelegationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_stakeDeregistrationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDeregistrationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_stakeDeregistrationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDeregistrationFromHex(String hexStr);
    public final native Result<String> csl_bridge_stakeDeregistrationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDeregistrationFromJson(String json);
    public final native Result<RPtr> csl_bridge_stakeDeregistrationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDeregistrationCoin(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeDeregistrationNew(RPtr stakeCredential);
    public final native Result<RPtr> csl_bridge_stakeDeregistrationNewWithExplicitRefund(RPtr stakeCredential, RPtr coin);
    public final native Result<Boolean> csl_bridge_stakeDeregistrationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_stakeRegistrationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_stakeRegistrationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationFromHex(String hexStr);
    public final native Result<String> csl_bridge_stakeRegistrationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationFromJson(String json);
    public final native Result<RPtr> csl_bridge_stakeRegistrationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationCoin(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationNew(RPtr stakeCredential);
    public final native Result<RPtr> csl_bridge_stakeRegistrationNewWithExplicitDeposit(RPtr stakeCredential, RPtr coin);
    public final native Result<Boolean> csl_bridge_stakeRegistrationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_stakeRegistrationAndDelegationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationAndDelegationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_stakeRegistrationAndDelegationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationAndDelegationFromHex(String hexStr);
    public final native Result<String> csl_bridge_stakeRegistrationAndDelegationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationAndDelegationFromJson(String json);
    public final native Result<RPtr> csl_bridge_stakeRegistrationAndDelegationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationAndDelegationPoolKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationAndDelegationCoin(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeRegistrationAndDelegationNew(RPtr stakeCredential, RPtr poolKeyhash, RPtr coin);
    public final native Result<Boolean> csl_bridge_stakeRegistrationAndDelegationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_stakeVoteRegistrationAndDelegationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_stakeVoteRegistrationAndDelegationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationFromHex(String hexStr);
    public final native Result<String> csl_bridge_stakeVoteRegistrationAndDelegationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationFromJson(String json);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationPoolKeyhash(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationDrep(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationCoin(RPtr self);
    public final native Result<RPtr> csl_bridge_stakeVoteRegistrationAndDelegationNew(RPtr stakeCredential, RPtr poolKeyhash, RPtr drep, RPtr coin);
    public final native Result<Boolean> csl_bridge_stakeVoteRegistrationAndDelegationHasScriptCredentials(RPtr self);

    public final native Result<RPtr> csl_bridge_stringsNew();
    public final native Result<Long> csl_bridge_stringsLen(RPtr self);
    public final native Result<String> csl_bridge_stringsGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_stringsAdd(RPtr self, String elem);

    public final native Result<byte[]> csl_bridge_timelockExpiryToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockExpiryFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_timelockExpiryToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockExpiryFromHex(String hexStr);
    public final native Result<String> csl_bridge_timelockExpiryToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockExpiryFromJson(String json);
    public final native Result<Long> csl_bridge_timelockExpirySlot(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockExpirySlotBignum(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockExpiryNew(long slot);
    public final native Result<RPtr> csl_bridge_timelockExpiryNewTimelockexpiry(RPtr slot);

    public final native Result<byte[]> csl_bridge_timelockStartToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockStartFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_timelockStartToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockStartFromHex(String hexStr);
    public final native Result<String> csl_bridge_timelockStartToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockStartFromJson(String json);
    public final native Result<Long> csl_bridge_timelockStartSlot(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockStartSlotBignum(RPtr self);
    public final native Result<RPtr> csl_bridge_timelockStartNew(long slot);
    public final native Result<RPtr> csl_bridge_timelockStartNewTimelockstart(RPtr slot);

    public final native Result<byte[]> csl_bridge_transactionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionBody(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSet(RPtr self);
    public final native Result<Boolean> csl_bridge_transactionIsValid(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionAuxiliaryData(RPtr self);
    public final native Result<Void> csl_bridge_transactionSetIsValid(RPtr self, boolean valid);
    public final native Result<RPtr> csl_bridge_transactionNew(RPtr body, RPtr witnessSet);
    public final native Result<RPtr> csl_bridge_transactionNewWithAuxiliaryData(RPtr body, RPtr witnessSet, RPtr auxiliaryData);


    public final native Result<Long> csl_bridge_transactionBatchLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBatchGet(RPtr self, long index);

    public final native Result<Long> csl_bridge_transactionBatchListLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBatchListGet(RPtr self, long index);

    public final native Result<byte[]> csl_bridge_transactionBodiesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodiesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionBodiesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodiesFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionBodiesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodiesFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionBodiesNew();
    public final native Result<Long> csl_bridge_transactionBodiesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodiesGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_transactionBodiesAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_transactionBodyToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodyFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionBodyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodyFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionBodyToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodyFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionBodyInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodyOutputs(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodyFee(RPtr self);
    public final native Result<Long> csl_bridge_transactionBodyTtl(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodyTtlBignum(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetTtl(RPtr self, RPtr ttl);
    public final native Result<Void> csl_bridge_transactionBodyRemoveTtl(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetCerts(RPtr self, RPtr certs);
    public final native Result<RPtr> csl_bridge_transactionBodyCerts(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetWithdrawals(RPtr self, RPtr withdrawals);
    public final native Result<RPtr> csl_bridge_transactionBodyWithdrawals(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetUpdate(RPtr self, RPtr update);
    public final native Result<RPtr> csl_bridge_transactionBodyUpdate(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetAuxiliaryDataHash(RPtr self, RPtr auxiliaryDataHash);
    public final native Result<RPtr> csl_bridge_transactionBodyAuxiliaryDataHash(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetValidityStartInterval(RPtr self, long validityStartInterval);
    public final native Result<Void> csl_bridge_transactionBodySetValidityStartIntervalBignum(RPtr self, RPtr validityStartInterval);
    public final native Result<RPtr> csl_bridge_transactionBodyValidityStartIntervalBignum(RPtr self);
    public final native Result<Long> csl_bridge_transactionBodyValidityStartInterval(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetMint(RPtr self, RPtr mint);
    public final native Result<RPtr> csl_bridge_transactionBodyMint(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetReferenceInputs(RPtr self, RPtr referenceInputs);
    public final native Result<RPtr> csl_bridge_transactionBodyReferenceInputs(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetScriptDataHash(RPtr self, RPtr scriptDataHash);
    public final native Result<RPtr> csl_bridge_transactionBodyScriptDataHash(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetCollateral(RPtr self, RPtr collateral);
    public final native Result<RPtr> csl_bridge_transactionBodyCollateral(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetRequiredSigners(RPtr self, RPtr requiredSigners);
    public final native Result<RPtr> csl_bridge_transactionBodyRequiredSigners(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetNetworkId(RPtr self, RPtr networkId);
    public final native Result<RPtr> csl_bridge_transactionBodyNetworkId(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetCollateralReturn(RPtr self, RPtr collateralReturn);
    public final native Result<RPtr> csl_bridge_transactionBodyCollateralReturn(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetTotalCollateral(RPtr self, RPtr totalCollateral);
    public final native Result<RPtr> csl_bridge_transactionBodyTotalCollateral(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetVotingProcedures(RPtr self, RPtr votingProcedures);
    public final native Result<RPtr> csl_bridge_transactionBodyVotingProcedures(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetVotingProposals(RPtr self, RPtr votingProposals);
    public final native Result<RPtr> csl_bridge_transactionBodyVotingProposals(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetDonation(RPtr self, RPtr donation);
    public final native Result<RPtr> csl_bridge_transactionBodyDonation(RPtr self);
    public final native Result<Void> csl_bridge_transactionBodySetCurrentTreasuryValue(RPtr self, RPtr currentTreasuryValue);
    public final native Result<RPtr> csl_bridge_transactionBodyCurrentTreasuryValue(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBodyNew(RPtr inputs, RPtr outputs, RPtr fee);
    public final native Result<RPtr> csl_bridge_transactionBodyNewWithTtl(RPtr inputs, RPtr outputs, RPtr fee, long ttl);

    public final native Result<RPtr> csl_bridge_transactionBodyNewTxBody(RPtr inputs, RPtr outputs, RPtr fee);

    public final native Result<Void> csl_bridge_transactionBuilderAddInputsFrom(RPtr self, RPtr inputs, int strategy);
    public final native Result<Void> csl_bridge_transactionBuilderSetInputs(RPtr self, RPtr inputs);
    public final native Result<Void> csl_bridge_transactionBuilderSetCollateral(RPtr self, RPtr collateral);
    public final native Result<Void> csl_bridge_transactionBuilderSetCollateralReturn(RPtr self, RPtr collateralReturn);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveCollateralReturn(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetCollateralReturnAndTotal(RPtr self, RPtr collateralReturn);
    public final native Result<Void> csl_bridge_transactionBuilderSetTotalCollateral(RPtr self, RPtr totalCollateral);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveTotalCollateral(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetTotalCollateralAndReturn(RPtr self, RPtr totalCollateral, RPtr returnAddress);
    public final native Result<Void> csl_bridge_transactionBuilderAddReferenceInput(RPtr self, RPtr referenceInput);
    public final native Result<Void> csl_bridge_transactionBuilderAddScriptReferenceInput(RPtr self, RPtr referenceInput, long scriptSize);
    public final native Result<Void> csl_bridge_transactionBuilderAddKeyInput(RPtr self, RPtr hash, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_transactionBuilderAddNativeScriptInput(RPtr self, RPtr script, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_transactionBuilderAddPlutusScriptInput(RPtr self, RPtr witness, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_transactionBuilderAddBootstrapInput(RPtr self, RPtr hash, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_transactionBuilderAddRegularInput(RPtr self, RPtr address, RPtr input, RPtr amount);
    public final native Result<Boolean> csl_bridge_transactionBuilderAddInputsFromAndChange(RPtr self, RPtr inputs, int strategy, RPtr changeConfig);
    public final native Result<Void> csl_bridge_transactionBuilderAddInputsFromAndChangeWithCollateralReturn(RPtr self, RPtr inputs, int strategy, RPtr changeConfig, RPtr collateralPercentage);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetNativeInputScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetPlutusInputScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderFeeForInput(RPtr self, RPtr address, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_transactionBuilderAddOutput(RPtr self, RPtr output);
    public final native Result<RPtr> csl_bridge_transactionBuilderFeeForOutput(RPtr self, RPtr output);
    public final native Result<Void> csl_bridge_transactionBuilderSetFee(RPtr self, RPtr fee);
    public final native Result<Void> csl_bridge_transactionBuilderSetTtl(RPtr self, long ttl);
    public final native Result<Void> csl_bridge_transactionBuilderSetTtlBignum(RPtr self, RPtr ttl);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveTtl(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetValidityStartInterval(RPtr self, long validityStartInterval);
    public final native Result<Void> csl_bridge_transactionBuilderSetValidityStartIntervalBignum(RPtr self, RPtr validityStartInterval);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveValidityStartInterval(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetCerts(RPtr self, RPtr certs);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveCerts(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetCertsBuilder(RPtr self, RPtr certs);
    public final native Result<Void> csl_bridge_transactionBuilderSetWithdrawals(RPtr self, RPtr withdrawals);
    public final native Result<Void> csl_bridge_transactionBuilderSetWithdrawalsBuilder(RPtr self, RPtr withdrawals);
    public final native Result<Void> csl_bridge_transactionBuilderSetVotingBuilder(RPtr self, RPtr votingBuilder);
    public final native Result<Void> csl_bridge_transactionBuilderSetVotingProposalBuilder(RPtr self, RPtr votingProposalBuilder);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveWithdrawals(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetAuxiliaryData(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetAuxiliaryData(RPtr self, RPtr auxiliaryData);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveAuxiliaryData(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetMetadata(RPtr self, RPtr metadata);
    public final native Result<Void> csl_bridge_transactionBuilderAddMetadatum(RPtr self, RPtr key, RPtr val);
    public final native Result<Void> csl_bridge_transactionBuilderAddJsonMetadatum(RPtr self, RPtr key, String val);
    public final native Result<Void> csl_bridge_transactionBuilderAddJsonMetadatumWithSchema(RPtr self, RPtr key, String val, int schema);
    public final native Result<Void> csl_bridge_transactionBuilderSetMintBuilder(RPtr self, RPtr mintBuilder);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveMintBuilder(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetMintBuilder(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetMint(RPtr self, RPtr mint, RPtr mintScripts);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetMint(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetMintScripts(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetMintAsset(RPtr self, RPtr policyScript, RPtr mintAssets);
    public final native Result<Void> csl_bridge_transactionBuilderAddMintAsset(RPtr self, RPtr policyScript, RPtr assetName, RPtr amount);
    public final native Result<Void> csl_bridge_transactionBuilderAddMintAssetAndOutput(RPtr self, RPtr policyScript, RPtr assetName, RPtr amount, RPtr outputBuilder, RPtr outputCoin);
    public final native Result<Void> csl_bridge_transactionBuilderAddMintAssetAndOutputMinRequiredCoin(RPtr self, RPtr policyScript, RPtr assetName, RPtr amount, RPtr outputBuilder);
    public final native Result<Void> csl_bridge_transactionBuilderAddExtraWitnessDatum(RPtr self, RPtr datum);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetExtraWitnessDatums(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetDonation(RPtr self, RPtr donation);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetDonation(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderSetCurrentTreasuryValue(RPtr self, RPtr currentTreasuryValue);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetCurrentTreasuryValue(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderNew(RPtr cfg);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetReferenceInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetExplicitInput(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetImplicitInput(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetTotalInput(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetTotalOutput(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetExplicitOutput(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetDeposit(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderGetFeeIfSet(RPtr self);
    public final native Result<Boolean> csl_bridge_transactionBuilderAddChangeIfNeeded(RPtr self, RPtr address);
    public final native Result<Boolean> csl_bridge_transactionBuilderAddChangeIfNeededWithDatum(RPtr self, RPtr address, RPtr plutusData);
    public final native Result<Void> csl_bridge_transactionBuilderCalcScriptDataHash(RPtr self, RPtr costModels);
    public final native Result<Void> csl_bridge_transactionBuilderSetScriptDataHash(RPtr self, RPtr hash);
    public final native Result<Void> csl_bridge_transactionBuilderRemoveScriptDataHash(RPtr self);
    public final native Result<Void> csl_bridge_transactionBuilderAddRequiredSigner(RPtr self, RPtr key);
    public final native Result<Long> csl_bridge_transactionBuilderFullSize(RPtr self);
    public final native Result<String> csl_bridge_transactionBuilderOutputSizes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderBuild(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderBuildTx(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderBuildTxUnsafe(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionBuilderMinFee(RPtr self);


    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderNew();
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderFeeAlgo(RPtr self, RPtr feeAlgo);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderCoinsPerUtxoByte(RPtr self, RPtr coinsPerUtxoByte);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderExUnitPrices(RPtr self, RPtr exUnitPrices);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderPoolDeposit(RPtr self, RPtr poolDeposit);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderKeyDeposit(RPtr self, RPtr keyDeposit);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderMaxValueSize(RPtr self, long maxValueSize);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderMaxTxSize(RPtr self, long maxTxSize);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderRefScriptCoinsPerByte(RPtr self, RPtr refScriptCoinsPerByte);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderPreferPureChange(RPtr self, boolean preferPureChange);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderDeduplicateExplicitRefInputsWithRegularInputs(RPtr self, boolean deduplicateExplicitRefInputsWithRegularInputs);
    public final native Result<RPtr> csl_bridge_transactionBuilderConfigBuilderBuild(RPtr self);

    public final native Result<RPtr> csl_bridge_transactionHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_transactionHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_transactionHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_transactionHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_transactionHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionHashFromHex(String hex);

    public final native Result<byte[]> csl_bridge_transactionInputToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionInputToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionInputToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionInputTransactionId(RPtr self);
    public final native Result<Long> csl_bridge_transactionInputIndex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputNew(RPtr transactionId, long index);

    public final native Result<byte[]> csl_bridge_transactionInputsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionInputsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputsFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionInputsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputsFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionInputsNew();
    public final native Result<Long> csl_bridge_transactionInputsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionInputsGet(RPtr self, long index);
    public final native Result<Boolean> csl_bridge_transactionInputsAdd(RPtr self, RPtr elem);
    public final native Result<RPtr> csl_bridge_transactionInputsToOption(RPtr self);

    public final native Result<byte[]> csl_bridge_transactionMetadatumToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionMetadatumToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_transactionMetadatumNewMap(RPtr map);
    public final native Result<RPtr> csl_bridge_transactionMetadatumNewList(RPtr list);
    public final native Result<RPtr> csl_bridge_transactionMetadatumNewInt(RPtr intValue);
    public final native Result<RPtr> csl_bridge_transactionMetadatumNewBytes(byte[] bytes);
    public final native Result<RPtr> csl_bridge_transactionMetadatumNewText(String text);
    public final native Result<Integer> csl_bridge_transactionMetadatumKind(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumAsMap(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumAsList(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumAsInt(RPtr self);
    public final native Result<byte[]> csl_bridge_transactionMetadatumAsBytes(RPtr self);
    public final native Result<String> csl_bridge_transactionMetadatumAsText(RPtr self);

    public final native Result<byte[]> csl_bridge_transactionMetadatumLabelsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumLabelsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionMetadatumLabelsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumLabelsFromHex(String hexStr);
    public final native Result<RPtr> csl_bridge_transactionMetadatumLabelsNew();
    public final native Result<Long> csl_bridge_transactionMetadatumLabelsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionMetadatumLabelsGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_transactionMetadatumLabelsAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_transactionOutputToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionOutputToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionOutputToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionOutputAddress(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputAmount(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputDataHash(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputPlutusData(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputScriptRef(RPtr self);
    public final native Result<Void> csl_bridge_transactionOutputSetScriptRef(RPtr self, RPtr scriptRef);
    public final native Result<Void> csl_bridge_transactionOutputSetPlutusData(RPtr self, RPtr data);
    public final native Result<Void> csl_bridge_transactionOutputSetDataHash(RPtr self, RPtr dataHash);
    public final native Result<Boolean> csl_bridge_transactionOutputHasPlutusData(RPtr self);
    public final native Result<Boolean> csl_bridge_transactionOutputHasDataHash(RPtr self);
    public final native Result<Boolean> csl_bridge_transactionOutputHasScriptRef(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputNew(RPtr address, RPtr amount);
    public final native Result<Integer> csl_bridge_transactionOutputSerializationFormat(RPtr self);

    public final native Result<RPtr> csl_bridge_transactionOutputAmountBuilderWithValue(RPtr self, RPtr amount);
    public final native Result<RPtr> csl_bridge_transactionOutputAmountBuilderWithCoin(RPtr self, RPtr coin);
    public final native Result<RPtr> csl_bridge_transactionOutputAmountBuilderWithCoinAndAsset(RPtr self, RPtr coin, RPtr multiasset);
    public final native Result<RPtr> csl_bridge_transactionOutputAmountBuilderWithAssetAndMinRequiredCoinByUtxoCost(RPtr self, RPtr multiasset, RPtr dataCost);
    public final native Result<RPtr> csl_bridge_transactionOutputAmountBuilderBuild(RPtr self);

    public final native Result<RPtr> csl_bridge_transactionOutputBuilderNew();
    public final native Result<RPtr> csl_bridge_transactionOutputBuilderWithAddress(RPtr self, RPtr address);
    public final native Result<RPtr> csl_bridge_transactionOutputBuilderWithDataHash(RPtr self, RPtr dataHash);
    public final native Result<RPtr> csl_bridge_transactionOutputBuilderWithPlutusData(RPtr self, RPtr data);
    public final native Result<RPtr> csl_bridge_transactionOutputBuilderWithScriptRef(RPtr self, RPtr scriptRef);
    public final native Result<RPtr> csl_bridge_transactionOutputBuilderNext(RPtr self);

    public final native Result<byte[]> csl_bridge_transactionOutputsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionOutputsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputsFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionOutputsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputsFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionOutputsNew();
    public final native Result<Long> csl_bridge_transactionOutputsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionOutputsGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_transactionOutputsAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_transactionUnspentOutputToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionUnspentOutputToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionUnspentOutputToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputNew(RPtr input, RPtr output);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputInput(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputOutput(RPtr self);

    public final native Result<String> csl_bridge_transactionUnspentOutputsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputsFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputsNew();
    public final native Result<Long> csl_bridge_transactionUnspentOutputsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionUnspentOutputsGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_transactionUnspentOutputsAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_transactionWitnessSetToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionWitnessSetToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionWitnessSetToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetFromJson(String json);
    public final native Result<Void> csl_bridge_transactionWitnessSetSetVkeys(RPtr self, RPtr vkeys);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetVkeys(RPtr self);
    public final native Result<Void> csl_bridge_transactionWitnessSetSetNativeScripts(RPtr self, RPtr nativeScripts);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetNativeScripts(RPtr self);
    public final native Result<Void> csl_bridge_transactionWitnessSetSetBootstraps(RPtr self, RPtr bootstraps);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetBootstraps(RPtr self);
    public final native Result<Void> csl_bridge_transactionWitnessSetSetPlutusScripts(RPtr self, RPtr plutusScripts);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetPlutusScripts(RPtr self);
    public final native Result<Void> csl_bridge_transactionWitnessSetSetPlutusData(RPtr self, RPtr plutusData);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetPlutusData(RPtr self);
    public final native Result<Void> csl_bridge_transactionWitnessSetSetRedeemers(RPtr self, RPtr redeemers);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetRedeemers(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetNew();

    public final native Result<byte[]> csl_bridge_transactionWitnessSetsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_transactionWitnessSetsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetsFromHex(String hexStr);
    public final native Result<String> csl_bridge_transactionWitnessSetsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetsFromJson(String json);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetsNew();
    public final native Result<Long> csl_bridge_transactionWitnessSetsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_transactionWitnessSetsGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_transactionWitnessSetsAdd(RPtr self, RPtr elem);

    public final native Result<String> csl_bridge_treasuryWithdrawalsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsFromJson(String json);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsNew();
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsGet(RPtr self, RPtr key);
    public final native Result<Void> csl_bridge_treasuryWithdrawalsInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsKeys(RPtr self);
    public final native Result<Long> csl_bridge_treasuryWithdrawalsLen(RPtr self);

    public final native Result<byte[]> csl_bridge_treasuryWithdrawalsActionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsActionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_treasuryWithdrawalsActionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsActionFromHex(String hexStr);
    public final native Result<String> csl_bridge_treasuryWithdrawalsActionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsActionFromJson(String json);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsActionWithdrawals(RPtr self);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsActionPolicyHash(RPtr self);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsActionNew(RPtr withdrawals);
    public final native Result<RPtr> csl_bridge_treasuryWithdrawalsActionNewWithPolicyHash(RPtr withdrawals, RPtr policyHash);

    public final native Result<RPtr> csl_bridge_txBuilderConstantsPlutusDefaultCostModels();
    public final native Result<RPtr> csl_bridge_txBuilderConstantsPlutusAlonzoCostModels();
    public final native Result<RPtr> csl_bridge_txBuilderConstantsPlutusVasilCostModels();
    public final native Result<RPtr> csl_bridge_txBuilderConstantsPlutusConwayCostModels();

    public final native Result<RPtr> csl_bridge_txInputsBuilderNew();
    public final native Result<Void> csl_bridge_txInputsBuilderAddKeyInput(RPtr self, RPtr hash, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_txInputsBuilderAddNativeScriptInput(RPtr self, RPtr script, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_txInputsBuilderAddPlutusScriptInput(RPtr self, RPtr witness, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_txInputsBuilderAddBootstrapInput(RPtr self, RPtr address, RPtr input, RPtr amount);
    public final native Result<Void> csl_bridge_txInputsBuilderAddRegularInput(RPtr self, RPtr address, RPtr input, RPtr amount);
    public final native Result<RPtr> csl_bridge_txInputsBuilderGetRefInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_txInputsBuilderGetNativeInputScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_txInputsBuilderGetPlutusInputScripts(RPtr self);
    public final native Result<Long> csl_bridge_txInputsBuilderLen(RPtr self);
    public final native Result<Void> csl_bridge_txInputsBuilderAddRequiredSigner(RPtr self, RPtr key);
    public final native Result<Void> csl_bridge_txInputsBuilderAddRequiredSigners(RPtr self, RPtr keys);
    public final native Result<RPtr> csl_bridge_txInputsBuilderTotalValue(RPtr self);
    public final native Result<RPtr> csl_bridge_txInputsBuilderInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_txInputsBuilderInputsOption(RPtr self);

    public final native Result<byte[]> csl_bridge_uRLToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_uRLFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_uRLToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_uRLFromHex(String hexStr);
    public final native Result<String> csl_bridge_uRLToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_uRLFromJson(String json);
    public final native Result<RPtr> csl_bridge_uRLNew(String url);
    public final native Result<String> csl_bridge_uRLUrl(RPtr self);

    public final native Result<byte[]> csl_bridge_unitIntervalToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_unitIntervalFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_unitIntervalToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_unitIntervalFromHex(String hexStr);
    public final native Result<String> csl_bridge_unitIntervalToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_unitIntervalFromJson(String json);
    public final native Result<RPtr> csl_bridge_unitIntervalNumerator(RPtr self);
    public final native Result<RPtr> csl_bridge_unitIntervalDenominator(RPtr self);
    public final native Result<RPtr> csl_bridge_unitIntervalNew(RPtr numerator, RPtr denominator);

    public final native Result<byte[]> csl_bridge_updateToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_updateFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_updateToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_updateFromHex(String hexStr);
    public final native Result<String> csl_bridge_updateToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_updateFromJson(String json);
    public final native Result<RPtr> csl_bridge_updateProposedProtocolParameterUpdates(RPtr self);
    public final native Result<Long> csl_bridge_updateEpoch(RPtr self);
    public final native Result<RPtr> csl_bridge_updateNew(RPtr proposedProtocolParameterUpdates, long epoch);

    public final native Result<byte[]> csl_bridge_updateCommitteeActionToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_updateCommitteeActionToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionFromHex(String hexStr);
    public final native Result<String> csl_bridge_updateCommitteeActionToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionFromJson(String json);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionGovActionId(RPtr self);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionCommittee(RPtr self);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionMembersToRemove(RPtr self);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionNew(RPtr committee, RPtr membersToRemove);
    public final native Result<RPtr> csl_bridge_updateCommitteeActionNewWithActionId(RPtr govActionId, RPtr committee, RPtr membersToRemove);

    public final native Result<byte[]> csl_bridge_vRFCertToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_vRFCertFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_vRFCertToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_vRFCertFromHex(String hexStr);
    public final native Result<String> csl_bridge_vRFCertToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_vRFCertFromJson(String json);
    public final native Result<byte[]> csl_bridge_vRFCertOutput(RPtr self);
    public final native Result<byte[]> csl_bridge_vRFCertProof(RPtr self);
    public final native Result<RPtr> csl_bridge_vRFCertNew(byte[] output, byte[] proof);

    public final native Result<RPtr> csl_bridge_vRFKeyHashFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_vRFKeyHashToBytes(RPtr self);
    public final native Result<String> csl_bridge_vRFKeyHashToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_vRFKeyHashFromBech32(String bechStr);
    public final native Result<String> csl_bridge_vRFKeyHashToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_vRFKeyHashFromHex(String hex);

    public final native Result<RPtr> csl_bridge_vRFVKeyFromBytes(byte[] bytes);
    public final native Result<byte[]> csl_bridge_vRFVKeyToBytes(RPtr self);
    public final native Result<String> csl_bridge_vRFVKeyToBech32(RPtr self, String prefix);
    public final native Result<RPtr> csl_bridge_vRFVKeyFromBech32(String bechStr);
    public final native Result<String> csl_bridge_vRFVKeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_vRFVKeyFromHex(String hex);

    public final native Result<byte[]> csl_bridge_valueToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_valueFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_valueToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_valueFromHex(String hexStr);
    public final native Result<String> csl_bridge_valueToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_valueFromJson(String json);
    public final native Result<RPtr> csl_bridge_valueNew(RPtr coin);
    public final native Result<RPtr> csl_bridge_valueNewFromAssets(RPtr multiasset);
    public final native Result<RPtr> csl_bridge_valueNewWithAssets(RPtr coin, RPtr multiasset);
    public final native Result<RPtr> csl_bridge_valueZero();
    public final native Result<Boolean> csl_bridge_valueIsZero(RPtr self);
    public final native Result<RPtr> csl_bridge_valueCoin(RPtr self);
    public final native Result<Void> csl_bridge_valueSetCoin(RPtr self, RPtr coin);
    public final native Result<RPtr> csl_bridge_valueMultiasset(RPtr self);
    public final native Result<Void> csl_bridge_valueSetMultiasset(RPtr self, RPtr multiasset);
    public final native Result<RPtr> csl_bridge_valueCheckedAdd(RPtr self, RPtr rhs);
    public final native Result<RPtr> csl_bridge_valueCheckedSub(RPtr self, RPtr rhsValue);
    public final native Result<RPtr> csl_bridge_valueClampedSub(RPtr self, RPtr rhsValue);
    public final native Result<Long> csl_bridge_valueCompare(RPtr self, RPtr rhsValue);

    public final native Result<byte[]> csl_bridge_versionedBlockToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_versionedBlockFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_versionedBlockToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_versionedBlockFromHex(String hexStr);
    public final native Result<String> csl_bridge_versionedBlockToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_versionedBlockFromJson(String json);
    public final native Result<RPtr> csl_bridge_versionedBlockNew(RPtr block, long eraCode);
    public final native Result<RPtr> csl_bridge_versionedBlockBlock(RPtr self);
    public final native Result<Integer> csl_bridge_versionedBlockEra(RPtr self);

    public final native Result<byte[]> csl_bridge_vkeyToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeyFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_vkeyToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeyFromHex(String hexStr);
    public final native Result<String> csl_bridge_vkeyToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeyFromJson(String json);
    public final native Result<RPtr> csl_bridge_vkeyNew(RPtr pk);
    public final native Result<RPtr> csl_bridge_vkeyPublicKey(RPtr self);

    public final native Result<RPtr> csl_bridge_vkeysNew();
    public final native Result<Long> csl_bridge_vkeysLen(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeysGet(RPtr self, long index);
    public final native Result<Void> csl_bridge_vkeysAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_vkeywitnessToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_vkeywitnessToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessFromHex(String hexStr);
    public final native Result<String> csl_bridge_vkeywitnessToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessFromJson(String json);
    public final native Result<RPtr> csl_bridge_vkeywitnessNew(RPtr vkey, RPtr signature);
    public final native Result<RPtr> csl_bridge_vkeywitnessVkey(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessSignature(RPtr self);

    public final native Result<byte[]> csl_bridge_vkeywitnessesToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessesFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_vkeywitnessesToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessesFromHex(String hexStr);
    public final native Result<String> csl_bridge_vkeywitnessesToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessesFromJson(String json);
    public final native Result<RPtr> csl_bridge_vkeywitnessesNew();
    public final native Result<Long> csl_bridge_vkeywitnessesLen(RPtr self);
    public final native Result<RPtr> csl_bridge_vkeywitnessesGet(RPtr self, long index);
    public final native Result<Boolean> csl_bridge_vkeywitnessesAdd(RPtr self, RPtr elem);

    public final native Result<byte[]> csl_bridge_voteDelegationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_voteDelegationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_voteDelegationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_voteDelegationFromHex(String hexStr);
    public final native Result<String> csl_bridge_voteDelegationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_voteDelegationFromJson(String json);
    public final native Result<RPtr> csl_bridge_voteDelegationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_voteDelegationDrep(RPtr self);
    public final native Result<RPtr> csl_bridge_voteDelegationNew(RPtr stakeCredential, RPtr drep);
    public final native Result<Boolean> csl_bridge_voteDelegationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_voteRegistrationAndDelegationToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_voteRegistrationAndDelegationFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_voteRegistrationAndDelegationToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_voteRegistrationAndDelegationFromHex(String hexStr);
    public final native Result<String> csl_bridge_voteRegistrationAndDelegationToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_voteRegistrationAndDelegationFromJson(String json);
    public final native Result<RPtr> csl_bridge_voteRegistrationAndDelegationStakeCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_voteRegistrationAndDelegationDrep(RPtr self);
    public final native Result<RPtr> csl_bridge_voteRegistrationAndDelegationCoin(RPtr self);
    public final native Result<RPtr> csl_bridge_voteRegistrationAndDelegationNew(RPtr stakeCredential, RPtr drep, RPtr coin);
    public final native Result<Boolean> csl_bridge_voteRegistrationAndDelegationHasScriptCredentials(RPtr self);

    public final native Result<byte[]> csl_bridge_voterToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_voterFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_voterToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_voterFromHex(String hexStr);
    public final native Result<String> csl_bridge_voterToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_voterFromJson(String json);
    public final native Result<RPtr> csl_bridge_voterNewConstitutionalCommitteeHotCredential(RPtr cred);
    public final native Result<RPtr> csl_bridge_voterNewDrepCredential(RPtr cred);
    public final native Result<RPtr> csl_bridge_voterNewStakePoolKeyHash(RPtr keyHash);
    public final native Result<Integer> csl_bridge_voterKind(RPtr self);
    public final native Result<RPtr> csl_bridge_voterToConstitutionalCommitteeHotCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_voterToDrepCredential(RPtr self);
    public final native Result<RPtr> csl_bridge_voterToStakePoolKeyHash(RPtr self);
    public final native Result<Boolean> csl_bridge_voterHasScriptCredentials(RPtr self);
    public final native Result<RPtr> csl_bridge_voterToKeyHash(RPtr self);

    public final native Result<String> csl_bridge_votersToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_votersFromJson(String json);
    public final native Result<RPtr> csl_bridge_votersNew();
    public final native Result<Void> csl_bridge_votersAdd(RPtr self, RPtr voter);
    public final native Result<RPtr> csl_bridge_votersGet(RPtr self, long index);
    public final native Result<Long> csl_bridge_votersLen(RPtr self);

    public final native Result<RPtr> csl_bridge_votingBuilderNew();
    public final native Result<Void> csl_bridge_votingBuilderAdd(RPtr self, RPtr voter, RPtr govActionId, RPtr votingProcedure);
    public final native Result<Void> csl_bridge_votingBuilderAddWithPlutusWitness(RPtr self, RPtr voter, RPtr govActionId, RPtr votingProcedure, RPtr witness);
    public final native Result<Void> csl_bridge_votingBuilderAddWithNativeScript(RPtr self, RPtr voter, RPtr govActionId, RPtr votingProcedure, RPtr nativeScriptSource);
    public final native Result<RPtr> csl_bridge_votingBuilderGetPlutusWitnesses(RPtr self);
    public final native Result<RPtr> csl_bridge_votingBuilderGetRefInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_votingBuilderGetNativeScripts(RPtr self);
    public final native Result<Boolean> csl_bridge_votingBuilderHasPlutusScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_votingBuilderBuild(RPtr self);

    public final native Result<byte[]> csl_bridge_votingProcedureToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProcedureFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_votingProcedureToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProcedureFromHex(String hexStr);
    public final native Result<String> csl_bridge_votingProcedureToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProcedureFromJson(String json);
    public final native Result<RPtr> csl_bridge_votingProcedureNew(int vote);
    public final native Result<RPtr> csl_bridge_votingProcedureNewWithAnchor(int vote, RPtr anchor);
    public final native Result<Integer> csl_bridge_votingProcedureVoteKind(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProcedureAnchor(RPtr self);

    public final native Result<byte[]> csl_bridge_votingProceduresToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProceduresFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_votingProceduresToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProceduresFromHex(String hexStr);
    public final native Result<String> csl_bridge_votingProceduresToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProceduresFromJson(String json);
    public final native Result<RPtr> csl_bridge_votingProceduresNew();
    public final native Result<Void> csl_bridge_votingProceduresInsert(RPtr self, RPtr voter, RPtr governanceActionId, RPtr votingProcedure);
    public final native Result<RPtr> csl_bridge_votingProceduresGet(RPtr self, RPtr voter, RPtr governanceActionId);
    public final native Result<RPtr> csl_bridge_votingProceduresGetVoters(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProceduresGetGovernanceActionIdsByVoter(RPtr self, RPtr voter);

    public final native Result<byte[]> csl_bridge_votingProposalToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_votingProposalToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalFromHex(String hexStr);
    public final native Result<String> csl_bridge_votingProposalToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalFromJson(String json);
    public final native Result<RPtr> csl_bridge_votingProposalGovernanceAction(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalAnchor(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalRewardAccount(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalDeposit(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalNew(RPtr governanceAction, RPtr anchor, RPtr rewardAccount, RPtr deposit);

    public final native Result<RPtr> csl_bridge_votingProposalBuilderNew();
    public final native Result<Void> csl_bridge_votingProposalBuilderAdd(RPtr self, RPtr proposal);
    public final native Result<Void> csl_bridge_votingProposalBuilderAddWithPlutusWitness(RPtr self, RPtr proposal, RPtr witness);
    public final native Result<RPtr> csl_bridge_votingProposalBuilderGetPlutusWitnesses(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalBuilderGetRefInputs(RPtr self);
    public final native Result<Boolean> csl_bridge_votingProposalBuilderHasPlutusScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalBuilderBuild(RPtr self);

    public final native Result<byte[]> csl_bridge_votingProposalsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_votingProposalsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalsFromHex(String hexStr);
    public final native Result<String> csl_bridge_votingProposalsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalsFromJson(String json);
    public final native Result<RPtr> csl_bridge_votingProposalsNew();
    public final native Result<Long> csl_bridge_votingProposalsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_votingProposalsGet(RPtr self, long index);
    public final native Result<Boolean> csl_bridge_votingProposalsAdd(RPtr self, RPtr proposal);

    public final native Result<byte[]> csl_bridge_withdrawalsToBytes(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsFromBytes(byte[] bytes);
    public final native Result<String> csl_bridge_withdrawalsToHex(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsFromHex(String hexStr);
    public final native Result<String> csl_bridge_withdrawalsToJson(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsFromJson(String json);
    public final native Result<RPtr> csl_bridge_withdrawalsNew();
    public final native Result<Long> csl_bridge_withdrawalsLen(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsInsert(RPtr self, RPtr key, RPtr value);
    public final native Result<RPtr> csl_bridge_withdrawalsGet(RPtr self, RPtr key);
    public final native Result<RPtr> csl_bridge_withdrawalsKeys(RPtr self);

    public final native Result<RPtr> csl_bridge_withdrawalsBuilderNew();
    public final native Result<Void> csl_bridge_withdrawalsBuilderAdd(RPtr self, RPtr address, RPtr coin);
    public final native Result<Void> csl_bridge_withdrawalsBuilderAddWithPlutusWitness(RPtr self, RPtr address, RPtr coin, RPtr witness);
    public final native Result<Void> csl_bridge_withdrawalsBuilderAddWithNativeScript(RPtr self, RPtr address, RPtr coin, RPtr nativeScriptSource);
    public final native Result<RPtr> csl_bridge_withdrawalsBuilderGetPlutusWitnesses(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsBuilderGetRefInputs(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsBuilderGetNativeScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsBuilderGetTotalWithdrawals(RPtr self);
    public final native Result<Boolean> csl_bridge_withdrawalsBuilderHasPlutusScripts(RPtr self);
    public final native Result<RPtr> csl_bridge_withdrawalsBuilderBuild(RPtr self);

    public final native Result<RPtr> csl_bridge_calculateExUnitsCeilCost(RPtr exUnits, RPtr exUnitPrices);
    public final native Result<RPtr> csl_bridge_createSendAll(RPtr address, RPtr utxos, RPtr config);
    public final native Result<byte[]> csl_bridge_decodeArbitraryBytesFromMetadatum(RPtr metadata);
    public final native Result<String> csl_bridge_decodeMetadatumToJsonStr(RPtr metadatum, int schema);
    public final native Result<String> csl_bridge_decodePlutusDatumToJsonStr(RPtr datum, int schema);
    public final native Result<String> csl_bridge_decryptWithPassword(String password, String data);
    public final native Result<RPtr> csl_bridge_encodeArbitraryBytesAsMetadatum(byte[] bytes);
    public final native Result<RPtr> csl_bridge_encodeJsonStrToMetadatum(String json, int schema);
    public final native Result<RPtr> csl_bridge_encodeJsonStrToNativeScript(String json, String selfXpub, int schema);
    public final native Result<RPtr> csl_bridge_encodeJsonStrToPlutusDatum(String json, int schema);
    public final native Result<String> csl_bridge_encryptWithPassword(String password, String salt, String nonce, String data);
    public final native Result<RPtr> csl_bridge_getDeposit(RPtr txbody, RPtr poolDeposit, RPtr keyDeposit);
    public final native Result<RPtr> csl_bridge_getImplicitInput(RPtr txbody, RPtr poolDeposit, RPtr keyDeposit);
    public final native Result<RPtr> csl_bridge_hashAuxiliaryData(RPtr auxiliaryData);
    public final native Result<RPtr> csl_bridge_hashPlutusData(RPtr plutusData);
    public final native Result<RPtr> csl_bridge_hashScriptData(RPtr redeemers, RPtr costModels);
    public final native Result<RPtr> csl_bridge_hashScriptDataWithDatums(RPtr redeemers, RPtr costModels, RPtr datums);

    public final native Result<RPtr> csl_bridge_hashTransaction(RPtr txBody);
    public final native Result<RPtr> csl_bridge_makeDaedalusBootstrapWitness(RPtr txBodyHash, RPtr addr, RPtr key);
    public final native Result<RPtr> csl_bridge_makeIcarusBootstrapWitness(RPtr txBodyHash, RPtr addr, RPtr key);
    public final native Result<RPtr> csl_bridge_makeVkeyWitness(RPtr txBodyHash, RPtr sk);
    public final native Result<RPtr> csl_bridge_minAdaForOutput(RPtr output, RPtr dataCost);
    public final native Result<RPtr> csl_bridge_minFee(RPtr tx, RPtr linearFee);
    public final native Result<RPtr> csl_bridge_minRefScriptFee(long totalRefScriptsSize, RPtr refScriptCoinsPerByte);
    public final native Result<RPtr> csl_bridge_minScriptFee(RPtr tx, RPtr exUnitPrices);
}
