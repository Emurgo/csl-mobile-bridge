#import "HaskellShelley.h"
#import "NSString+RPtr.h"
#import "NSData+DataPtr.h"
#import "SafeOperation.h"
#import <react_native_haskell_shelley.h>


@implementation HaskellShelley

RCT_EXPORT_MODULE()

RCT_EXPORT_METHOD(ptrFree:(NSString *)ptr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    RPtr rPtr = [ptr rPtr];
    rptr_free(&rPtr);
    resolve(nil);
}

+ (void)csl_bridge_initialize
{
    if (self == [HaskellShelley class]) {
        init_haskell_shelley_library();
    }
}

RCT_EXPORT_METHOD(csl_bridge_addressFromBytes:(nonnull NSString *)dataVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dataVal, CharPtr* error) {
        RPtr result;
        NSData* dataData = [NSData fromBase64:dataVal];
        return csl_bridge_address_from_bytes((uint8_t*)dataData.bytes, dataData.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dataVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_address_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressPaymentCred:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_payment_cred(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressIsMalformed:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_is_malformed(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_address_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressToBech32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_to_bech32(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressToBech32WithPrefix:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_address_to_bech32_with_prefix(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_addressFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_address_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_addressNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_address_network_id(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_anchorToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_anchor_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_anchor_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_anchor_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_anchor_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_anchor_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_anchor_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorUrl:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_anchor_url(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorAnchorDataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_anchor_anchor_data_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorNew:(nonnull NSString *)anchorUrlPtr withAnchorDataHash:(nonnull NSString *)anchorDataHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr anchorUrl = [[params objectAtIndex:0]  rPtr];
        RPtr anchorDataHash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_anchor_new(anchorUrl, anchorDataHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[anchorUrlPtr, anchorDataHashPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_anchorDataHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_anchor_data_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorDataHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_anchor_data_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorDataHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_anchor_data_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorDataHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_anchor_data_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorDataHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_anchor_data_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_anchorDataHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_anchor_data_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_assetNameToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_name_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNameFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_asset_name_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNameToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_name_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNameFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_asset_name_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNameToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_name_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNameFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_asset_name_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNameNew:(nonnull NSString *)nameVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* nameVal, CharPtr* error) {
        RPtr result;
        NSData* dataName = [NSData fromBase64:nameVal];
        return csl_bridge_asset_name_new((uint8_t*)dataName.bytes, dataName.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nameVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNameName:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_name_name(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_assetNamesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_names_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_asset_names_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_names_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_asset_names_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_names_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_asset_names_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_asset_names_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_asset_names_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_asset_names_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetNamesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_asset_names_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_assetsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_assets_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_assets_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_assets_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_assets_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_assets_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_assets_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_assets_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_assets_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_assets_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_assets_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_assetsKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_assets_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_auxiliary_data_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_auxiliary_data_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_auxiliary_data_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_auxiliary_data_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataMetadata:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_metadata(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetMetadata:(nonnull NSString *)selfPtr withMetadata:(nonnull NSString *)metadataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr metadata = [[params objectAtIndex:1]  rPtr];
        csl_bridge_auxiliary_data_set_metadata(self, metadata, error);
        return nil;
    }] exec:@[selfPtr, metadataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetNativeScripts:(nonnull NSString *)selfPtr withNativeScripts:(nonnull NSString *)nativeScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr nativeScripts = [[params objectAtIndex:1]  rPtr];
        csl_bridge_auxiliary_data_set_native_scripts(self, nativeScripts, error);
        return nil;
    }] exec:@[selfPtr, nativeScriptsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataPlutusScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_plutus_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetPlutusScripts:(nonnull NSString *)selfPtr withPlutusScripts:(nonnull NSString *)plutusScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr plutusScripts = [[params objectAtIndex:1]  rPtr];
        csl_bridge_auxiliary_data_set_plutus_scripts(self, plutusScripts, error);
        return nil;
    }] exec:@[selfPtr, plutusScriptsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataPreferAlonzoFormat:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_prefer_alonzo_format(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetPreferAlonzoFormat:(nonnull NSString *)selfPtr withPrefer:(nonnull NSNumber *)preferVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        BOOL prefer = [[params objectAtIndex:1]  boolValue];
        csl_bridge_auxiliary_data_set_prefer_alonzo_format(self, prefer, error);
        return nil;
    }] exec:@[selfPtr, preferVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_auxiliary_data_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_auxiliary_data_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_auxiliary_data_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_auxiliary_data_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_auxiliary_data_set_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_set_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetInsert:(nonnull NSString *)selfPtr withTxIndex:(nonnull NSNumber *)txIndexVal withData:(nonnull NSString *)dataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t txIndex = [[params objectAtIndex:1]  longLongValue];
        RPtr data = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_auxiliary_data_set_insert(self, txIndex, data, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, txIndexVal, dataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetGet:(nonnull NSString *)selfPtr withTxIndex:(nonnull NSNumber *)txIndexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t txIndex = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_auxiliary_data_set_get(self, txIndex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, txIndexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_auxiliaryDataSetIndices:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_auxiliary_data_set_indices(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_baseAddressNew:(nonnull NSNumber *)networkVal withPayment:(nonnull NSString *)paymentPtr withStake:(nonnull NSString *)stakePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t network = [[params objectAtIndex:0]  longLongValue];
        RPtr payment = [[params objectAtIndex:1]  rPtr];
        RPtr stake = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_base_address_new(network, payment, stake, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[networkVal, paymentPtr, stakePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_baseAddressPaymentCred:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_base_address_payment_cred(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_baseAddressStakeCred:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_base_address_stake_cred(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_baseAddressToAddress:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_base_address_to_address(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_baseAddressFromAddress:(nonnull NSString *)addrPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addrPtr, CharPtr* error) {
        RPtr result;
        RPtr addr = [addrPtr  rPtr];
        return csl_bridge_base_address_from_address(addr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addrPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_baseAddressNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_base_address_network_id(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_bigIntToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_big_int_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_big_int_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_big_int_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntIsZero:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_is_zero(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntAsU64:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_as_u64(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntAsInt:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_as_int(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntFromStr:(nonnull NSString *)textVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* textVal, CharPtr* error) {
        RPtr result;
        CharPtr text = [textVal  charPtr];
        return csl_bridge_big_int_from_str(text, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:textVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntToStr:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_to_str(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntAdd:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_int_add(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntSub:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_int_sub(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntMul:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_int_mul(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntPow:(nonnull NSString *)selfPtr withExp:(nonnull NSNumber *)expVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t exp = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_big_int_pow(self, exp, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, expVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntOne:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_big_int_one(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntZero:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_big_int_zero(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntAbs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_abs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntIncrement:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_int_increment(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntDivCeil:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_int_div_ceil(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigIntDivFloor:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_int_div_floor(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_bigNumToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_num_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_big_num_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_num_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_big_num_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_num_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_big_num_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumFromStr:(nonnull NSString *)stringVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stringVal, CharPtr* error) {
        RPtr result;
        CharPtr string = [stringVal  charPtr];
        return csl_bridge_big_num_from_str(string, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stringVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumToStr:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_num_to_str(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumZero:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_big_num_zero(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumOne:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_big_num_one(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumIsZero:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_big_num_is_zero(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumDivFloor:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_div_floor(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumCheckedMul:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_checked_mul(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumCheckedAdd:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_checked_add(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumCheckedSub:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_checked_sub(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumClampedSub:(nonnull NSString *)selfPtr withOther:(nonnull NSString *)otherPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr other = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_clamped_sub(self, other, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, otherPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumCompare:(nonnull NSString *)selfPtr withRhsValue:(nonnull NSString *)rhsValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        int64_t result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr rhsValue = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_compare(self, rhsValue, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:@[selfPtr, rhsValuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumLessThan:(nonnull NSString *)selfPtr withRhsValue:(nonnull NSString *)rhsValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr rhsValue = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_less_than(self, rhsValue, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, rhsValuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumMaxValue:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_big_num_max_value(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bigNumMax:(nonnull NSString *)aPtr withB:(nonnull NSString *)bPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr a = [[params objectAtIndex:0]  rPtr];
        RPtr b = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_big_num_max(a, b, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[aPtr, bPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyDerive:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_bip32_private_key_derive(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyFrom_128Xprv:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_bip32_private_key_from_128_xprv((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyTo_128Xprv:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_private_key_to_128_xprv(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyGenerateEd25519Bip32:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_bip32_private_key_generate_ed25519_bip32(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyToRawKey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_private_key_to_raw_key(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyToPublic:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_private_key_to_public(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_bip32_private_key_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyAsBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_private_key_as_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyFromBech32:(nonnull NSString *)bech32StrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bech32StrVal, CharPtr* error) {
        RPtr result;
        CharPtr bech32Str = [bech32StrVal  charPtr];
        return csl_bridge_bip32_private_key_from_bech32(bech32Str, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bech32StrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyToBech32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_private_key_to_bech32(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyFromBip39Entropy:(nonnull NSString *)entropyVal withPassword:(nonnull NSString *)passwordVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        NSData* dataEntropy = [NSData fromBase64:[params objectAtIndex:0]];
        NSData* dataPassword = [NSData fromBase64:[params objectAtIndex:1]];
        return csl_bridge_bip32_private_key_from_bip39_entropy((uint8_t*)dataEntropy.bytes, dataEntropy.length, (uint8_t*)dataPassword.bytes, dataPassword.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[entropyVal, passwordVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyChaincode:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_private_key_chaincode(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_private_key_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PrivateKeyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_bip32_private_key_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyDerive:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_bip32_public_key_derive(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyToRawKey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_public_key_to_raw_key(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_bip32_public_key_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyAsBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_public_key_as_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyFromBech32:(nonnull NSString *)bech32StrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bech32StrVal, CharPtr* error) {
        RPtr result;
        CharPtr bech32Str = [bech32StrVal  charPtr];
        return csl_bridge_bip32_public_key_from_bech32(bech32Str, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bech32StrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyToBech32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_public_key_to_bech32(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyChaincode:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_public_key_chaincode(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bip32_public_key_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bip32PublicKeyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_bip32_public_key_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_blockToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_block_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_block_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_block_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockHeader:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_header(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockTransactionBodies:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_transaction_bodies(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockTransactionWitnessSets:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_transaction_witness_sets(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockAuxiliaryDataSet:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_auxiliary_data_set(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockInvalidTransactions:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_invalid_transactions(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockNew:(nonnull NSString *)headerPtr withTransactionBodies:(nonnull NSString *)transactionBodiesPtr withTransactionWitnessSets:(nonnull NSString *)transactionWitnessSetsPtr withAuxiliaryDataSet:(nonnull NSString *)auxiliaryDataSetPtr withInvalidTransactions:(nonnull NSString *)invalidTransactionsVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr header = [[params objectAtIndex:0]  rPtr];
        RPtr transactionBodies = [[params objectAtIndex:1]  rPtr];
        RPtr transactionWitnessSets = [[params objectAtIndex:2]  rPtr];
        RPtr auxiliaryDataSet = [[params objectAtIndex:3]  rPtr];
        CharPtr invalidTransactions = [[params objectAtIndex:4]  charPtr];
        return csl_bridge_block_new(header, transactionBodies, transactionWitnessSets, auxiliaryDataSet, invalidTransactions, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[headerPtr, transactionBodiesPtr, transactionWitnessSetsPtr, auxiliaryDataSetPtr, invalidTransactionsVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_blockHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_block_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_block_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_block_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_block_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_blockHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_block_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witness_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_bootstrap_witness_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witness_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_bootstrap_witness_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witness_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_bootstrap_witness_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessVkey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witness_vkey(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessSignature:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witness_signature(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessChainCode:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witness_chain_code(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessAttributes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witness_attributes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessNew:(nonnull NSString *)vkeyPtr withSignature:(nonnull NSString *)signaturePtr withChainCode:(nonnull NSString *)chainCodeVal withAttributes:(nonnull NSString *)attributesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr vkey = [[params objectAtIndex:0]  rPtr];
        RPtr signature = [[params objectAtIndex:1]  rPtr];
        NSData* dataChainCode = [NSData fromBase64:[params objectAtIndex:2]];
        NSData* dataAttributes = [NSData fromBase64:[params objectAtIndex:3]];
        return csl_bridge_bootstrap_witness_new(vkey, signature, (uint8_t*)dataChainCode.bytes, dataChainCode.length, (uint8_t*)dataAttributes.bytes, dataAttributes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[vkeyPtr, signaturePtr, chainCodeVal, attributesVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witnesses_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_bootstrap_witnesses_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witnesses_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_bootstrap_witnesses_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witnesses_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_bootstrap_witnesses_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_bootstrap_witnesses_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_bootstrap_witnesses_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_bootstrap_witnesses_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_bootstrapWitnessesAdd:(nonnull NSString *)selfPtr withWitness:(nonnull NSString *)witnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr witness = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_bootstrap_witnesses_add(self, witness, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, witnessPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_byronAddressToBase58:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_byron_address_to_base58(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_byron_address_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_byron_address_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressByronProtocolMagic:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_byron_address_byron_protocol_magic(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressAttributes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_byron_address_attributes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_byron_address_network_id(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressFromBase58:(nonnull NSString *)sVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* sVal, CharPtr* error) {
        RPtr result;
        CharPtr s = [sVal  charPtr];
        return csl_bridge_byron_address_from_base58(s, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:sVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressIcarusFromKey:(nonnull NSString *)keyPtr withProtocolMagic:(nonnull NSNumber *)protocolMagicVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr key = [[params objectAtIndex:0]  rPtr];
        int64_t protocolMagic = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_byron_address_icarus_from_key(key, protocolMagic, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[keyPtr, protocolMagicVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressIsValid:(nonnull NSString *)sVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* sVal, CharPtr* error) {
        BOOL result;
        CharPtr s = [sVal  charPtr];
        return csl_bridge_byron_address_is_valid(s, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:sVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressToAddress:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_byron_address_to_address(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_byronAddressFromAddress:(nonnull NSString *)addrPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addrPtr, CharPtr* error) {
        RPtr result;
        RPtr addr = [addrPtr  rPtr];
        return csl_bridge_byron_address_from_address(addr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addrPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_certificateToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_certificate_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_certificate_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_certificate_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewStakeRegistration:(nonnull NSString *)stakeRegistrationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeRegistrationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeRegistration = [stakeRegistrationPtr  rPtr];
        return csl_bridge_certificate_new_stake_registration(stakeRegistration, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeRegistrationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewRegCert:(nonnull NSString *)stakeRegistrationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeRegistrationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeRegistration = [stakeRegistrationPtr  rPtr];
        return csl_bridge_certificate_new_reg_cert(stakeRegistration, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeRegistrationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewStakeDeregistration:(nonnull NSString *)stakeDeregistrationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeDeregistrationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeDeregistration = [stakeDeregistrationPtr  rPtr];
        return csl_bridge_certificate_new_stake_deregistration(stakeDeregistration, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeDeregistrationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewUnregCert:(nonnull NSString *)stakeDeregistrationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeDeregistrationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeDeregistration = [stakeDeregistrationPtr  rPtr];
        return csl_bridge_certificate_new_unreg_cert(stakeDeregistration, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeDeregistrationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewStakeDelegation:(nonnull NSString *)stakeDelegationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeDelegationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeDelegation = [stakeDelegationPtr  rPtr];
        return csl_bridge_certificate_new_stake_delegation(stakeDelegation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeDelegationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewPoolRegistration:(nonnull NSString *)poolRegistrationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* poolRegistrationPtr, CharPtr* error) {
        RPtr result;
        RPtr poolRegistration = [poolRegistrationPtr  rPtr];
        return csl_bridge_certificate_new_pool_registration(poolRegistration, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:poolRegistrationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewPoolRetirement:(nonnull NSString *)poolRetirementPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* poolRetirementPtr, CharPtr* error) {
        RPtr result;
        RPtr poolRetirement = [poolRetirementPtr  rPtr];
        return csl_bridge_certificate_new_pool_retirement(poolRetirement, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:poolRetirementPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewGenesisKeyDelegation:(nonnull NSString *)genesisKeyDelegationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* genesisKeyDelegationPtr, CharPtr* error) {
        RPtr result;
        RPtr genesisKeyDelegation = [genesisKeyDelegationPtr  rPtr];
        return csl_bridge_certificate_new_genesis_key_delegation(genesisKeyDelegation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:genesisKeyDelegationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewMoveInstantaneousRewardsCert:(nonnull NSString *)moveInstantaneousRewardsCertPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* moveInstantaneousRewardsCertPtr, CharPtr* error) {
        RPtr result;
        RPtr moveInstantaneousRewardsCert = [moveInstantaneousRewardsCertPtr  rPtr];
        return csl_bridge_certificate_new_move_instantaneous_rewards_cert(moveInstantaneousRewardsCert, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:moveInstantaneousRewardsCertPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewCommitteeHotAuth:(nonnull NSString *)committeeHotAuthPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* committeeHotAuthPtr, CharPtr* error) {
        RPtr result;
        RPtr committeeHotAuth = [committeeHotAuthPtr  rPtr];
        return csl_bridge_certificate_new_committee_hot_auth(committeeHotAuth, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:committeeHotAuthPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewCommitteeColdResign:(nonnull NSString *)committeeColdResignPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* committeeColdResignPtr, CharPtr* error) {
        RPtr result;
        RPtr committeeColdResign = [committeeColdResignPtr  rPtr];
        return csl_bridge_certificate_new_committee_cold_resign(committeeColdResign, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:committeeColdResignPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewDrepDeregistration:(nonnull NSString *)drepDeregistrationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* drepDeregistrationPtr, CharPtr* error) {
        RPtr result;
        RPtr drepDeregistration = [drepDeregistrationPtr  rPtr];
        return csl_bridge_certificate_new_drep_deregistration(drepDeregistration, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:drepDeregistrationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewDrepRegistration:(nonnull NSString *)drepRegistrationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* drepRegistrationPtr, CharPtr* error) {
        RPtr result;
        RPtr drepRegistration = [drepRegistrationPtr  rPtr];
        return csl_bridge_certificate_new_drep_registration(drepRegistration, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:drepRegistrationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewDrepUpdate:(nonnull NSString *)drepUpdatePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* drepUpdatePtr, CharPtr* error) {
        RPtr result;
        RPtr drepUpdate = [drepUpdatePtr  rPtr];
        return csl_bridge_certificate_new_drep_update(drepUpdate, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:drepUpdatePtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewStakeAndVoteDelegation:(nonnull NSString *)stakeAndVoteDelegationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeAndVoteDelegationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeAndVoteDelegation = [stakeAndVoteDelegationPtr  rPtr];
        return csl_bridge_certificate_new_stake_and_vote_delegation(stakeAndVoteDelegation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeAndVoteDelegationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewStakeRegistrationAndDelegation:(nonnull NSString *)stakeRegistrationAndDelegationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeRegistrationAndDelegationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeRegistrationAndDelegation = [stakeRegistrationAndDelegationPtr  rPtr];
        return csl_bridge_certificate_new_stake_registration_and_delegation(stakeRegistrationAndDelegation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeRegistrationAndDelegationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewStakeVoteRegistrationAndDelegation:(nonnull NSString *)stakeVoteRegistrationAndDelegationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeVoteRegistrationAndDelegationPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeVoteRegistrationAndDelegation = [stakeVoteRegistrationAndDelegationPtr  rPtr];
        return csl_bridge_certificate_new_stake_vote_registration_and_delegation(stakeVoteRegistrationAndDelegation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeVoteRegistrationAndDelegationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewVoteDelegation:(nonnull NSString *)voteDelegationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* voteDelegationPtr, CharPtr* error) {
        RPtr result;
        RPtr voteDelegation = [voteDelegationPtr  rPtr];
        return csl_bridge_certificate_new_vote_delegation(voteDelegation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:voteDelegationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateNewVoteRegistrationAndDelegation:(nonnull NSString *)voteRegistrationAndDelegationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* voteRegistrationAndDelegationPtr, CharPtr* error) {
        RPtr result;
        RPtr voteRegistrationAndDelegation = [voteRegistrationAndDelegationPtr  rPtr];
        return csl_bridge_certificate_new_vote_registration_and_delegation(voteRegistrationAndDelegation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:voteRegistrationAndDelegationPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsStakeRegistration:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_stake_registration(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsRegCert:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_reg_cert(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsStakeDeregistration:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_stake_deregistration(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsUnregCert:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_unreg_cert(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsStakeDelegation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_stake_delegation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsPoolRegistration:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_pool_registration(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsPoolRetirement:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_pool_retirement(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsGenesisKeyDelegation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_genesis_key_delegation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsMoveInstantaneousRewardsCert:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_move_instantaneous_rewards_cert(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsCommitteeHotAuth:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_committee_hot_auth(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsCommitteeColdResign:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_committee_cold_resign(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsDrepDeregistration:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_drep_deregistration(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsDrepRegistration:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_drep_registration(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsDrepUpdate:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_drep_update(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsStakeAndVoteDelegation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_stake_and_vote_delegation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsStakeRegistrationAndDelegation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_stake_registration_and_delegation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsStakeVoteRegistrationAndDelegation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_stake_vote_registration_and_delegation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsVoteDelegation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_vote_delegation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateAsVoteRegistrationAndDelegation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_as_vote_registration_and_delegation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificateHasRequiredScriptWitness:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificate_has_required_script_witness(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_certificatesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_certificates_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_certificates_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_certificates_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_certificates_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_certificates_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_certificates_add(self, elem, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_certificates_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderAdd:(nonnull NSString *)selfPtr withCert:(nonnull NSString *)certPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr cert = [[params objectAtIndex:1]  rPtr];
        csl_bridge_certificates_builder_add(self, cert, error);
        return nil;
    }] exec:@[selfPtr, certPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderAddWithPlutusWitness:(nonnull NSString *)selfPtr withCert:(nonnull NSString *)certPtr withWitness:(nonnull NSString *)witnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr cert = [[params objectAtIndex:1]  rPtr];
        RPtr witness = [[params objectAtIndex:2]  rPtr];
        csl_bridge_certificates_builder_add_with_plutus_witness(self, cert, witness, error);
        return nil;
    }] exec:@[selfPtr, certPtr, witnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderAddWithNativeScript:(nonnull NSString *)selfPtr withCert:(nonnull NSString *)certPtr withNativeScriptSource:(nonnull NSString *)nativeScriptSourcePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr cert = [[params objectAtIndex:1]  rPtr];
        RPtr nativeScriptSource = [[params objectAtIndex:2]  rPtr];
        csl_bridge_certificates_builder_add_with_native_script(self, cert, nativeScriptSource, error);
        return nil;
    }] exec:@[selfPtr, certPtr, nativeScriptSourcePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderGetPlutusWitnesses:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_builder_get_plutus_witnesses(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderGetRefInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_builder_get_ref_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderGetNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_builder_get_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderGetCertificatesRefund:(nonnull NSString *)selfPtr withPoolDeposit:(nonnull NSString *)poolDepositPtr withKeyDeposit:(nonnull NSString *)keyDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr poolDeposit = [[params objectAtIndex:1]  rPtr];
        RPtr keyDeposit = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_certificates_builder_get_certificates_refund(self, poolDeposit, keyDeposit, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, poolDepositPtr, keyDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderGetCertificatesDeposit:(nonnull NSString *)selfPtr withPoolDeposit:(nonnull NSString *)poolDepositPtr withKeyDeposit:(nonnull NSString *)keyDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr poolDeposit = [[params objectAtIndex:1]  rPtr];
        RPtr keyDeposit = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_certificates_builder_get_certificates_deposit(self, poolDeposit, keyDeposit, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, poolDepositPtr, keyDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderHasPlutusScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_builder_has_plutus_scripts(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_certificatesBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_certificates_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_changeConfigNew:(nonnull NSString *)addressPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addressPtr, CharPtr* error) {
        RPtr result;
        RPtr address = [addressPtr  rPtr];
        return csl_bridge_change_config_new(address, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addressPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_changeConfigChangeAddress:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_change_config_change_address(self, address, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, addressPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_changeConfigChangePlutusData:(nonnull NSString *)selfPtr withPlutusData:(nonnull NSString *)plutusDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr plutusData = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_change_config_change_plutus_data(self, plutusData, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, plutusDataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_changeConfigChangeScriptRef:(nonnull NSString *)selfPtr withScriptRef:(nonnull NSString *)scriptRefPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr scriptRef = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_change_config_change_script_ref(self, scriptRef, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, scriptRefPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_committeeToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_committee_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_committee_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_committee_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeNew:(nonnull NSString *)quorumThresholdPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* quorumThresholdPtr, CharPtr* error) {
        RPtr result;
        RPtr quorumThreshold = [quorumThresholdPtr  rPtr];
        return csl_bridge_committee_new(quorumThreshold, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:quorumThresholdPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeMembersKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_members_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeQuorumThreshold:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_quorum_threshold(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeAddMember:(nonnull NSString *)selfPtr withCommitteeColdCredential:(nonnull NSString *)committeeColdCredentialPtr withEpoch:(nonnull NSNumber *)epochVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr committeeColdCredential = [[params objectAtIndex:1]  rPtr];
        int64_t epoch = [[params objectAtIndex:2]  longLongValue];
        csl_bridge_committee_add_member(self, committeeColdCredential, epoch, error);
        return nil;
    }] exec:@[selfPtr, committeeColdCredentialPtr, epochVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeGetMemberEpoch:(nonnull NSString *)selfPtr withCommitteeColdCredential:(nonnull NSString *)committeeColdCredentialPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        int64_t result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr committeeColdCredential = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_committee_get_member_epoch(self, committeeColdCredential, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:@[selfPtr, committeeColdCredentialPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_committeeColdResignToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_cold_resign_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_committee_cold_resign_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_cold_resign_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_committee_cold_resign_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_cold_resign_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_committee_cold_resign_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignCommitteeColdCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_cold_resign_committee_cold_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignAnchor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_cold_resign_anchor(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignNew:(nonnull NSString *)committeeColdCredentialPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* committeeColdCredentialPtr, CharPtr* error) {
        RPtr result;
        RPtr committeeColdCredential = [committeeColdCredentialPtr  rPtr];
        return csl_bridge_committee_cold_resign_new(committeeColdCredential, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:committeeColdCredentialPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignNewWithAnchor:(nonnull NSString *)committeeColdCredentialPtr withAnchor:(nonnull NSString *)anchorPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr committeeColdCredential = [[params objectAtIndex:0]  rPtr];
        RPtr anchor = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_committee_cold_resign_new_with_anchor(committeeColdCredential, anchor, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[committeeColdCredentialPtr, anchorPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeColdResignHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_cold_resign_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_hot_auth_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_committee_hot_auth_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_hot_auth_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_committee_hot_auth_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_hot_auth_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_committee_hot_auth_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthCommitteeColdCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_hot_auth_committee_cold_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthCommitteeHotCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_hot_auth_committee_hot_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthNew:(nonnull NSString *)committeeColdCredentialPtr withCommitteeHotCredential:(nonnull NSString *)committeeHotCredentialPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr committeeColdCredential = [[params objectAtIndex:0]  rPtr];
        RPtr committeeHotCredential = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_committee_hot_auth_new(committeeColdCredential, committeeHotCredential, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[committeeColdCredentialPtr, committeeHotCredentialPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_committeeHotAuthHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_committee_hot_auth_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_constitutionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constitution_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_constitution_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constitution_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_constitution_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constitution_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_constitution_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionAnchor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constitution_anchor(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionScriptHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constitution_script_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionNew:(nonnull NSString *)anchorPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* anchorPtr, CharPtr* error) {
        RPtr result;
        RPtr anchor = [anchorPtr  rPtr];
        return csl_bridge_constitution_new(anchor, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:anchorPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constitutionNewWithScriptHash:(nonnull NSString *)anchorPtr withScriptHash:(nonnull NSString *)scriptHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr anchor = [[params objectAtIndex:0]  rPtr];
        RPtr scriptHash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_constitution_new_with_script_hash(anchor, scriptHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[anchorPtr, scriptHashPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_constrPlutusDataToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constr_plutus_data_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constrPlutusDataFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_constr_plutus_data_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constrPlutusDataToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constr_plutus_data_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constrPlutusDataFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_constr_plutus_data_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constrPlutusDataAlternative:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constr_plutus_data_alternative(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constrPlutusDataData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_constr_plutus_data_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_constrPlutusDataNew:(nonnull NSString *)alternativePtr withData:(nonnull NSString *)dataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr alternative = [[params objectAtIndex:0]  rPtr];
        RPtr data = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_constr_plutus_data_new(alternative, data, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[alternativePtr, dataPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_costModelToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_cost_model_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_cost_model_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_cost_model_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_cost_model_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_cost_model_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_cost_model_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_cost_model_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelSet:(nonnull NSString *)selfPtr withOperation:(nonnull NSNumber *)operationVal withCost:(nonnull NSString *)costPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t operation = [[params objectAtIndex:1]  longLongValue];
        RPtr cost = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_cost_model_set(self, operation, cost, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, operationVal, costPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelGet:(nonnull NSString *)selfPtr withOperation:(nonnull NSNumber *)operationVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t operation = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_cost_model_get(self, operation, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, operationVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costModelLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_cost_model_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_costmdlsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_costmdls_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_costmdls_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_costmdls_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_costmdls_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_costmdls_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_costmdls_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_costmdls_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_costmdls_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_costmdls_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_costmdls_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_costmdls_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_costmdlsRetainLanguageVersions:(nonnull NSString *)selfPtr withLanguages:(nonnull NSString *)languagesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr languages = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_costmdls_retain_language_versions(self, languages, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, languagesPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_credentialFromKeyhash:(nonnull NSString *)hashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hashPtr, CharPtr* error) {
        RPtr result;
        RPtr hash = [hashPtr  rPtr];
        return csl_bridge_credential_from_keyhash(hash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hashPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialFromScripthash:(nonnull NSString *)hashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hashPtr, CharPtr* error) {
        RPtr result;
        RPtr hash = [hashPtr  rPtr];
        return csl_bridge_credential_from_scripthash(hash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hashPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialToKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credential_to_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialToScripthash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credential_to_scripthash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credential_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialHasScriptHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credential_has_script_hash(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credential_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_credential_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credential_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_credential_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credential_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_credential_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_credentialsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credentials_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_credentials_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credentials_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_credentials_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credentials_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_credentials_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_credentials_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_credentials_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_credentials_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_credentialsAdd:(nonnull NSString *)selfPtr withCredential:(nonnull NSString *)credentialPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr credential = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_credentials_add(self, credential, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, credentialPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAAToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAAFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAAToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAAFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAAToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAAFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAANew:(nonnull NSString *)dnsNameVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dnsNameVal, CharPtr* error) {
        RPtr result;
        CharPtr dnsName = [dnsNameVal  charPtr];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_new(dnsName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dnsNameVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordAorAAAARecord:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_aor_a_a_a_a_record(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_s_r_v_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_d_n_s_record_s_r_v_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_s_r_v_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_d_n_s_record_s_r_v_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_s_r_v_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_d_n_s_record_s_r_v_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVNew:(nonnull NSString *)dnsNameVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dnsNameVal, CharPtr* error) {
        RPtr result;
        CharPtr dnsName = [dnsNameVal  charPtr];
        return csl_bridge_d_n_s_record_s_r_v_new(dnsName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dnsNameVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dNSRecordSRVRecord:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_n_s_record_s_r_v_record(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dRepToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_d_rep_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_d_rep_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_d_rep_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepNewKeyHash:(nonnull NSString *)keyHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* keyHashPtr, CharPtr* error) {
        RPtr result;
        RPtr keyHash = [keyHashPtr  rPtr];
        return csl_bridge_d_rep_new_key_hash(keyHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:keyHashPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepNewScriptHash:(nonnull NSString *)scriptHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* scriptHashPtr, CharPtr* error) {
        RPtr result;
        RPtr scriptHash = [scriptHashPtr  rPtr];
        return csl_bridge_d_rep_new_script_hash(scriptHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:scriptHashPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepNewAlwaysAbstain:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_d_rep_new_always_abstain(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepNewAlwaysNoConfidence:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_d_rep_new_always_no_confidence(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepNewFromCredential:(nonnull NSString *)credPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* credPtr, CharPtr* error) {
        RPtr result;
        RPtr cred = [credPtr  rPtr];
        return csl_bridge_d_rep_new_from_credential(cred, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:credPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepToKeyHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_to_key_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepToScriptHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_to_script_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepToBech32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_to_bech32(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepFromBech32:(nonnull NSString *)bech32StrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bech32StrVal, CharPtr* error) {
        RPtr result;
        CharPtr bech32Str = [bech32StrVal  charPtr];
        return csl_bridge_d_rep_from_bech32(bech32Str, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bech32StrVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_deregistration_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_d_rep_deregistration_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_deregistration_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_d_rep_deregistration_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_deregistration_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_d_rep_deregistration_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationVotingCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_deregistration_voting_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_deregistration_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationNew:(nonnull NSString *)votingCredentialPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr votingCredential = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_d_rep_deregistration_new(votingCredential, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[votingCredentialPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepDeregistrationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_deregistration_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_registration_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_d_rep_registration_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_registration_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_d_rep_registration_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_registration_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_d_rep_registration_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationVotingCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_registration_voting_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_registration_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationAnchor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_registration_anchor(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationNew:(nonnull NSString *)votingCredentialPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr votingCredential = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_d_rep_registration_new(votingCredential, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[votingCredentialPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationNewWithAnchor:(nonnull NSString *)votingCredentialPtr withCoin:(nonnull NSString *)coinPtr withAnchor:(nonnull NSString *)anchorPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr votingCredential = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        RPtr anchor = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_d_rep_registration_new_with_anchor(votingCredential, coin, anchor, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[votingCredentialPtr, coinPtr, anchorPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepRegistrationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_registration_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dRepUpdateToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_update_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_d_rep_update_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_update_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_d_rep_update_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_update_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_d_rep_update_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateVotingCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_update_voting_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateAnchor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_update_anchor(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateNew:(nonnull NSString *)votingCredentialPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* votingCredentialPtr, CharPtr* error) {
        RPtr result;
        RPtr votingCredential = [votingCredentialPtr  rPtr];
        return csl_bridge_d_rep_update_new(votingCredential, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:votingCredentialPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateNewWithAnchor:(nonnull NSString *)votingCredentialPtr withAnchor:(nonnull NSString *)anchorPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr votingCredential = [[params objectAtIndex:0]  rPtr];
        RPtr anchor = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_d_rep_update_new_with_anchor(votingCredential, anchor, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[votingCredentialPtr, anchorPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepUpdateHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_update_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_d_rep_voting_thresholds_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_d_rep_voting_thresholds_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_d_rep_voting_thresholds_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsNew:(nonnull NSString *)motionNoConfidencePtr withCommitteeNormal:(nonnull NSString *)committeeNormalPtr withCommitteeNoConfidence:(nonnull NSString *)committeeNoConfidencePtr withUpdateConstitution:(nonnull NSString *)updateConstitutionPtr withHardForkInitiation:(nonnull NSString *)hardForkInitiationPtr withPpNetworkGroup:(nonnull NSString *)ppNetworkGroupPtr withPpEconomicGroup:(nonnull NSString *)ppEconomicGroupPtr withPpTechnicalGroup:(nonnull NSString *)ppTechnicalGroupPtr withPpGovernanceGroup:(nonnull NSString *)ppGovernanceGroupPtr withTreasuryWithdrawal:(nonnull NSString *)treasuryWithdrawalPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr motionNoConfidence = [[params objectAtIndex:0]  rPtr];
        RPtr committeeNormal = [[params objectAtIndex:1]  rPtr];
        RPtr committeeNoConfidence = [[params objectAtIndex:2]  rPtr];
        RPtr updateConstitution = [[params objectAtIndex:3]  rPtr];
        RPtr hardForkInitiation = [[params objectAtIndex:4]  rPtr];
        RPtr ppNetworkGroup = [[params objectAtIndex:5]  rPtr];
        RPtr ppEconomicGroup = [[params objectAtIndex:6]  rPtr];
        RPtr ppTechnicalGroup = [[params objectAtIndex:7]  rPtr];
        RPtr ppGovernanceGroup = [[params objectAtIndex:8]  rPtr];
        RPtr treasuryWithdrawal = [[params objectAtIndex:9]  rPtr];
        return csl_bridge_d_rep_voting_thresholds_new(motionNoConfidence, committeeNormal, committeeNoConfidence, updateConstitution, hardForkInitiation, ppNetworkGroup, ppEconomicGroup, ppTechnicalGroup, ppGovernanceGroup, treasuryWithdrawal, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[motionNoConfidencePtr, committeeNormalPtr, committeeNoConfidencePtr, updateConstitutionPtr, hardForkInitiationPtr, ppNetworkGroupPtr, ppEconomicGroupPtr, ppTechnicalGroupPtr, ppGovernanceGroupPtr, treasuryWithdrawalPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetMotionNoConfidence:(nonnull NSString *)selfPtr withMotionNoConfidence:(nonnull NSString *)motionNoConfidencePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr motionNoConfidence = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_motion_no_confidence(self, motionNoConfidence, error);
        return nil;
    }] exec:@[selfPtr, motionNoConfidencePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetCommitteeNormal:(nonnull NSString *)selfPtr withCommitteeNormal:(nonnull NSString *)committeeNormalPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr committeeNormal = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_committee_normal(self, committeeNormal, error);
        return nil;
    }] exec:@[selfPtr, committeeNormalPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetCommitteeNoConfidence:(nonnull NSString *)selfPtr withCommitteeNoConfidence:(nonnull NSString *)committeeNoConfidencePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr committeeNoConfidence = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_committee_no_confidence(self, committeeNoConfidence, error);
        return nil;
    }] exec:@[selfPtr, committeeNoConfidencePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetUpdateConstitution:(nonnull NSString *)selfPtr withUpdateConstitution:(nonnull NSString *)updateConstitutionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr updateConstitution = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_update_constitution(self, updateConstitution, error);
        return nil;
    }] exec:@[selfPtr, updateConstitutionPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetHardForkInitiation:(nonnull NSString *)selfPtr withHardForkInitiation:(nonnull NSString *)hardForkInitiationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr hardForkInitiation = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_hard_fork_initiation(self, hardForkInitiation, error);
        return nil;
    }] exec:@[selfPtr, hardForkInitiationPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetPpNetworkGroup:(nonnull NSString *)selfPtr withPpNetworkGroup:(nonnull NSString *)ppNetworkGroupPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr ppNetworkGroup = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_pp_network_group(self, ppNetworkGroup, error);
        return nil;
    }] exec:@[selfPtr, ppNetworkGroupPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetPpEconomicGroup:(nonnull NSString *)selfPtr withPpEconomicGroup:(nonnull NSString *)ppEconomicGroupPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr ppEconomicGroup = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_pp_economic_group(self, ppEconomicGroup, error);
        return nil;
    }] exec:@[selfPtr, ppEconomicGroupPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetPpTechnicalGroup:(nonnull NSString *)selfPtr withPpTechnicalGroup:(nonnull NSString *)ppTechnicalGroupPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr ppTechnicalGroup = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_pp_technical_group(self, ppTechnicalGroup, error);
        return nil;
    }] exec:@[selfPtr, ppTechnicalGroupPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetPpGovernanceGroup:(nonnull NSString *)selfPtr withPpGovernanceGroup:(nonnull NSString *)ppGovernanceGroupPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr ppGovernanceGroup = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_pp_governance_group(self, ppGovernanceGroup, error);
        return nil;
    }] exec:@[selfPtr, ppGovernanceGroupPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsSetTreasuryWithdrawal:(nonnull NSString *)selfPtr withTreasuryWithdrawal:(nonnull NSString *)treasuryWithdrawalPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr treasuryWithdrawal = [[params objectAtIndex:1]  rPtr];
        csl_bridge_d_rep_voting_thresholds_set_treasury_withdrawal(self, treasuryWithdrawal, error);
        return nil;
    }] exec:@[selfPtr, treasuryWithdrawalPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsMotionNoConfidence:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_motion_no_confidence(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsCommitteeNormal:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_committee_normal(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsCommitteeNoConfidence:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_committee_no_confidence(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsUpdateConstitution:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_update_constitution(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsHardForkInitiation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_hard_fork_initiation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsPpNetworkGroup:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_pp_network_group(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsPpEconomicGroup:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_pp_economic_group(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsPpTechnicalGroup:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_pp_technical_group(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsPpGovernanceGroup:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_pp_governance_group(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dRepVotingThresholdsTreasuryWithdrawal:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_d_rep_voting_thresholds_treasury_withdrawal(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dataCostNewCoinsPerByte:(nonnull NSString *)coinsPerBytePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* coinsPerBytePtr, CharPtr* error) {
        RPtr result;
        RPtr coinsPerByte = [coinsPerBytePtr  rPtr];
        return csl_bridge_data_cost_new_coins_per_byte(coinsPerByte, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:coinsPerBytePtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dataCostCoinsPerByte:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_data_cost_coins_per_byte(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_dataHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_data_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dataHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_data_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dataHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_data_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dataHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_data_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dataHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_data_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_dataHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_data_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_datumSourceNew:(nonnull NSString *)datumPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* datumPtr, CharPtr* error) {
        RPtr result;
        RPtr datum = [datumPtr  rPtr];
        return csl_bridge_datum_source_new(datum, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:datumPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_datumSourceNewRefInput:(nonnull NSString *)inputPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* inputPtr, CharPtr* error) {
        RPtr result;
        RPtr input = [inputPtr  rPtr];
        return csl_bridge_datum_source_new_ref_input(input, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:inputPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_ed25519_key_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_key_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_ed25519_key_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_ed25519_key_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_key_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_ed25519_key_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_key_hashes_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_ed25519_key_hashes_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_key_hashes_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_ed25519_key_hashes_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_key_hashes_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_ed25519_key_hashes_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_ed25519_key_hashes_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_key_hashes_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_ed25519_key_hashes_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesAdd:(nonnull NSString *)selfPtr withKeyhash:(nonnull NSString *)keyhashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr keyhash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_ed25519_key_hashes_add(self, keyhash, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, keyhashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesContains:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_ed25519_key_hashes_contains(self, elem, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519KeyHashesToOption:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_key_hashes_to_option(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_ed25519SignatureToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_signature_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519SignatureToBech32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_signature_to_bech32(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519SignatureToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ed25519_signature_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519SignatureFromBech32:(nonnull NSString *)bech32StrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bech32StrVal, CharPtr* error) {
        RPtr result;
        CharPtr bech32Str = [bech32StrVal  charPtr];
        return csl_bridge_ed25519_signature_from_bech32(bech32Str, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bech32StrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519SignatureFromHex:(nonnull NSString *)inputVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* inputVal, CharPtr* error) {
        RPtr result;
        CharPtr input = [inputVal  charPtr];
        return csl_bridge_ed25519_signature_from_hex(input, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:inputVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ed25519SignatureFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_ed25519_signature_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_enterpriseAddressNew:(nonnull NSNumber *)networkVal withPayment:(nonnull NSString *)paymentPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t network = [[params objectAtIndex:0]  longLongValue];
        RPtr payment = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_enterprise_address_new(network, payment, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[networkVal, paymentPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_enterpriseAddressPaymentCred:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_enterprise_address_payment_cred(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_enterpriseAddressToAddress:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_enterprise_address_to_address(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_enterpriseAddressFromAddress:(nonnull NSString *)addrPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addrPtr, CharPtr* error) {
        RPtr result;
        RPtr addr = [addrPtr  rPtr];
        return csl_bridge_enterprise_address_from_address(addr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addrPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_enterpriseAddressNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_enterprise_address_network_id(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_exUnitPricesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_unit_prices_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_ex_unit_prices_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_unit_prices_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_ex_unit_prices_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_unit_prices_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_ex_unit_prices_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesMemPrice:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_unit_prices_mem_price(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesStepPrice:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_unit_prices_step_price(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitPricesNew:(nonnull NSString *)memPricePtr withStepPrice:(nonnull NSString *)stepPricePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr memPrice = [[params objectAtIndex:0]  rPtr];
        RPtr stepPrice = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_ex_unit_prices_new(memPrice, stepPrice, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[memPricePtr, stepPricePtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_exUnitsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_units_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_ex_units_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_units_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_ex_units_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_units_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_ex_units_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsMem:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_units_mem(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsSteps:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ex_units_steps(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_exUnitsNew:(nonnull NSString *)memPtr withSteps:(nonnull NSString *)stepsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr mem = [[params objectAtIndex:0]  rPtr];
        RPtr steps = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_ex_units_new(mem, steps, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[memPtr, stepsPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_fixedBlockFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_fixed_block_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedBlockFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_fixed_block_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedBlockHeader:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_block_header(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedBlockTransactionBodies:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_block_transaction_bodies(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedBlockTransactionWitnessSets:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_block_transaction_witness_sets(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedBlockAuxiliaryDataSet:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_block_auxiliary_data_set(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedBlockInvalidTransactions:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_block_invalid_transactions(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedBlockBlockHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_block_block_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_fixedTransactionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_fixed_transaction_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_fixed_transaction_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionNew:(nonnull NSString *)rawBodyVal withRawWitnessSet:(nonnull NSString *)rawWitnessSetVal withIsValid:(nonnull NSNumber *)isValidVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        NSData* dataRawBody = [NSData fromBase64:[params objectAtIndex:0]];
        NSData* dataRawWitnessSet = [NSData fromBase64:[params objectAtIndex:1]];
        BOOL isValid = [[params objectAtIndex:2]  boolValue];
        return csl_bridge_fixed_transaction_new((uint8_t*)dataRawBody.bytes, dataRawBody.length, (uint8_t*)dataRawWitnessSet.bytes, dataRawWitnessSet.length, isValid, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[rawBodyVal, rawWitnessSetVal, isValidVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionNewWithAuxiliary:(nonnull NSString *)rawBodyVal withRawWitnessSet:(nonnull NSString *)rawWitnessSetVal withRawAuxiliaryData:(nonnull NSString *)rawAuxiliaryDataVal withIsValid:(nonnull NSNumber *)isValidVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        NSData* dataRawBody = [NSData fromBase64:[params objectAtIndex:0]];
        NSData* dataRawWitnessSet = [NSData fromBase64:[params objectAtIndex:1]];
        NSData* dataRawAuxiliaryData = [NSData fromBase64:[params objectAtIndex:2]];
        BOOL isValid = [[params objectAtIndex:3]  boolValue];
        return csl_bridge_fixed_transaction_new_with_auxiliary((uint8_t*)dataRawBody.bytes, dataRawBody.length, (uint8_t*)dataRawWitnessSet.bytes, dataRawWitnessSet.length, (uint8_t*)dataRawAuxiliaryData.bytes, dataRawAuxiliaryData.length, isValid, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[rawBodyVal, rawWitnessSetVal, rawAuxiliaryDataVal, isValidVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionNewFromBodyBytes:(nonnull NSString *)rawBodyVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* rawBodyVal, CharPtr* error) {
        RPtr result;
        NSData* dataRawBody = [NSData fromBase64:rawBodyVal];
        return csl_bridge_fixed_transaction_new_from_body_bytes((uint8_t*)dataRawBody.bytes, dataRawBody.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:rawBodyVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBody:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_body(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionRawBody:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_raw_body(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionSetBody:(nonnull NSString *)selfPtr withRawBody:(nonnull NSString *)rawBodyVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        NSData* dataRawBody = [NSData fromBase64:[params objectAtIndex:1]];
        csl_bridge_fixed_transaction_set_body(self, (uint8_t*)dataRawBody.bytes, dataRawBody.length, error);
        return nil;
    }] exec:@[selfPtr, rawBodyVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionSetWitnessSet:(nonnull NSString *)selfPtr withRawWitnessSet:(nonnull NSString *)rawWitnessSetVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        NSData* dataRawWitnessSet = [NSData fromBase64:[params objectAtIndex:1]];
        csl_bridge_fixed_transaction_set_witness_set(self, (uint8_t*)dataRawWitnessSet.bytes, dataRawWitnessSet.length, error);
        return nil;
    }] exec:@[selfPtr, rawWitnessSetVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionWitnessSet:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_witness_set(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionRawWitnessSet:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_raw_witness_set(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionSetIsValid:(nonnull NSString *)selfPtr withValid:(nonnull NSNumber *)validVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        BOOL valid = [[params objectAtIndex:1]  boolValue];
        csl_bridge_fixed_transaction_set_is_valid(self, valid, error);
        return nil;
    }] exec:@[selfPtr, validVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionIsValid:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_is_valid(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionSetAuxiliaryData:(nonnull NSString *)selfPtr withRawAuxiliaryData:(nonnull NSString *)rawAuxiliaryDataVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        NSData* dataRawAuxiliaryData = [NSData fromBase64:[params objectAtIndex:1]];
        csl_bridge_fixed_transaction_set_auxiliary_data(self, (uint8_t*)dataRawAuxiliaryData.bytes, dataRawAuxiliaryData.length, error);
        return nil;
    }] exec:@[selfPtr, rawAuxiliaryDataVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionAuxiliaryData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_auxiliary_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionRawAuxiliaryData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_raw_auxiliary_data(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionTransactionHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_transaction_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionAddVkeyWitness:(nonnull NSString *)selfPtr withVkeyWitness:(nonnull NSString *)vkeyWitnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr vkeyWitness = [[params objectAtIndex:1]  rPtr];
        csl_bridge_fixed_transaction_add_vkey_witness(self, vkeyWitness, error);
        return nil;
    }] exec:@[selfPtr, vkeyWitnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionAddBootstrapWitness:(nonnull NSString *)selfPtr withBootstrapWitness:(nonnull NSString *)bootstrapWitnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr bootstrapWitness = [[params objectAtIndex:1]  rPtr];
        csl_bridge_fixed_transaction_add_bootstrap_witness(self, bootstrapWitness, error);
        return nil;
    }] exec:@[selfPtr, bootstrapWitnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionSignAndAddVkeySignature:(nonnull NSString *)selfPtr withPrivateKey:(nonnull NSString *)privateKeyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr privateKey = [[params objectAtIndex:1]  rPtr];
        csl_bridge_fixed_transaction_sign_and_add_vkey_signature(self, privateKey, error);
        return nil;
    }] exec:@[selfPtr, privateKeyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionSignAndAddIcarusBootstrapSignature:(nonnull NSString *)selfPtr withAddr:(nonnull NSString *)addrPtr withPrivateKey:(nonnull NSString *)privateKeyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr addr = [[params objectAtIndex:1]  rPtr];
        RPtr privateKey = [[params objectAtIndex:2]  rPtr];
        csl_bridge_fixed_transaction_sign_and_add_icarus_bootstrap_signature(self, addr, privateKey, error);
        return nil;
    }] exec:@[selfPtr, addrPtr, privateKeyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionSignAndAddDaedalusBootstrapSignature:(nonnull NSString *)selfPtr withAddr:(nonnull NSString *)addrPtr withPrivateKey:(nonnull NSString *)privateKeyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr addr = [[params objectAtIndex:1]  rPtr];
        RPtr privateKey = [[params objectAtIndex:2]  rPtr];
        csl_bridge_fixed_transaction_sign_and_add_daedalus_bootstrap_signature(self, addr, privateKey, error);
        return nil;
    }] exec:@[selfPtr, addrPtr, privateKeyPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodiesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_fixed_transaction_bodies_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodiesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_fixed_transaction_bodies_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodiesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_fixed_transaction_bodies_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodiesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_bodies_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodiesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_fixed_transaction_bodies_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodiesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_fixed_transaction_bodies_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_fixed_transaction_body_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_fixed_transaction_body_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodyTransactionBody:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_body_transaction_body(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodyTxHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_body_tx_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTransactionBodyOriginalBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_transaction_body_original_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_fixedTxWitnessesSetTxWitnessesSet:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_tx_witnesses_set_tx_witnesses_set(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTxWitnessesSetAddVkeyWitness:(nonnull NSString *)selfPtr withVkeyWitness:(nonnull NSString *)vkeyWitnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr vkeyWitness = [[params objectAtIndex:1]  rPtr];
        csl_bridge_fixed_tx_witnesses_set_add_vkey_witness(self, vkeyWitness, error);
        return nil;
    }] exec:@[selfPtr, vkeyWitnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTxWitnessesSetAddBootstrapWitness:(nonnull NSString *)selfPtr withBootstrapWitness:(nonnull NSString *)bootstrapWitnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr bootstrapWitness = [[params objectAtIndex:1]  rPtr];
        csl_bridge_fixed_tx_witnesses_set_add_bootstrap_witness(self, bootstrapWitness, error);
        return nil;
    }] exec:@[selfPtr, bootstrapWitnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTxWitnessesSetToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_tx_witnesses_set_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedTxWitnessesSetFromBytes:(nonnull NSString *)dataVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dataVal, CharPtr* error) {
        RPtr result;
        NSData* dataData = [NSData fromBase64:dataVal];
        return csl_bridge_fixed_tx_witnesses_set_from_bytes((uint8_t*)dataData.bytes, dataData.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dataVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_fixedVersionedBlockFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_fixed_versioned_block_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedVersionedBlockFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_fixed_versioned_block_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedVersionedBlockBlock:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_versioned_block_block(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_fixedVersionedBlockEra:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_fixed_versioned_block_era(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_general_transaction_metadata_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_general_transaction_metadata_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_general_transaction_metadata_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_general_transaction_metadata_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_general_transaction_metadata_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_general_transaction_metadata_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_general_transaction_metadata_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_general_transaction_metadata_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_general_transaction_metadata_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_general_transaction_metadata_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_generalTransactionMetadataKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_general_transaction_metadata_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_genesisDelegateHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_genesis_delegate_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisDelegateHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_delegate_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisDelegateHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_genesis_delegate_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisDelegateHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_genesis_delegate_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisDelegateHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_delegate_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisDelegateHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_genesis_delegate_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_genesisHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_genesis_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_genesis_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_genesis_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_genesis_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_genesisHashesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_hashes_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_genesis_hashes_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_hashes_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_genesis_hashes_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_hashes_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_genesis_hashes_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_genesis_hashes_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_hashes_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_genesis_hashes_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisHashesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_genesis_hashes_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_key_delegation_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_genesis_key_delegation_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_key_delegation_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_genesis_key_delegation_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_key_delegation_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_genesis_key_delegation_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationGenesishash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_key_delegation_genesishash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationGenesisDelegateHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_key_delegation_genesis_delegate_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationVrfKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_genesis_key_delegation_vrf_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_genesisKeyDelegationNew:(nonnull NSString *)genesishashPtr withGenesisDelegateHash:(nonnull NSString *)genesisDelegateHashPtr withVrfKeyhash:(nonnull NSString *)vrfKeyhashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr genesishash = [[params objectAtIndex:0]  rPtr];
        RPtr genesisDelegateHash = [[params objectAtIndex:1]  rPtr];
        RPtr vrfKeyhash = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_genesis_key_delegation_new(genesishash, genesisDelegateHash, vrfKeyhash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[genesishashPtr, genesisDelegateHashPtr, vrfKeyhashPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_governanceActionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_governance_action_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_governance_action_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_governance_action_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionNewParameterChangeAction:(nonnull NSString *)parameterChangeActionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* parameterChangeActionPtr, CharPtr* error) {
        RPtr result;
        RPtr parameterChangeAction = [parameterChangeActionPtr  rPtr];
        return csl_bridge_governance_action_new_parameter_change_action(parameterChangeAction, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:parameterChangeActionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionNewHardForkInitiationAction:(nonnull NSString *)hardForkInitiationActionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hardForkInitiationActionPtr, CharPtr* error) {
        RPtr result;
        RPtr hardForkInitiationAction = [hardForkInitiationActionPtr  rPtr];
        return csl_bridge_governance_action_new_hard_fork_initiation_action(hardForkInitiationAction, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hardForkInitiationActionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionNewTreasuryWithdrawalsAction:(nonnull NSString *)treasuryWithdrawalsActionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* treasuryWithdrawalsActionPtr, CharPtr* error) {
        RPtr result;
        RPtr treasuryWithdrawalsAction = [treasuryWithdrawalsActionPtr  rPtr];
        return csl_bridge_governance_action_new_treasury_withdrawals_action(treasuryWithdrawalsAction, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:treasuryWithdrawalsActionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionNewNoConfidenceAction:(nonnull NSString *)noConfidenceActionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* noConfidenceActionPtr, CharPtr* error) {
        RPtr result;
        RPtr noConfidenceAction = [noConfidenceActionPtr  rPtr];
        return csl_bridge_governance_action_new_no_confidence_action(noConfidenceAction, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:noConfidenceActionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionNewNewCommitteeAction:(nonnull NSString *)newCommitteeActionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* newCommitteeActionPtr, CharPtr* error) {
        RPtr result;
        RPtr newCommitteeAction = [newCommitteeActionPtr  rPtr];
        return csl_bridge_governance_action_new_new_committee_action(newCommitteeAction, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:newCommitteeActionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionNewNewConstitutionAction:(nonnull NSString *)newConstitutionActionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* newConstitutionActionPtr, CharPtr* error) {
        RPtr result;
        RPtr newConstitutionAction = [newConstitutionActionPtr  rPtr];
        return csl_bridge_governance_action_new_new_constitution_action(newConstitutionAction, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:newConstitutionActionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionNewInfoAction:(nonnull NSString *)infoActionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* infoActionPtr, CharPtr* error) {
        RPtr result;
        RPtr infoAction = [infoActionPtr  rPtr];
        return csl_bridge_governance_action_new_info_action(infoAction, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:infoActionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionAsParameterChangeAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_as_parameter_change_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionAsHardForkInitiationAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_as_hard_fork_initiation_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionAsTreasuryWithdrawalsAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_as_treasury_withdrawals_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionAsNoConfidenceAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_as_no_confidence_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionAsNewCommitteeAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_as_new_committee_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionAsNewConstitutionAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_as_new_constitution_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionAsInfoAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_as_info_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_governanceActionIdToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_id_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_governance_action_id_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_id_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_governance_action_id_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_id_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_governance_action_id_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdTransactionId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_id_transaction_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdIndex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_id_index(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdNew:(nonnull NSString *)transactionIdPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr transactionId = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_governance_action_id_new(transactionId, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[transactionIdPtr, indexVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_governanceActionIdsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_ids_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_governance_action_ids_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_governance_action_ids_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdsAdd:(nonnull NSString *)selfPtr withGovernanceActionId:(nonnull NSString *)governanceActionIdPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr governanceActionId = [[params objectAtIndex:1]  rPtr];
        csl_bridge_governance_action_ids_add(self, governanceActionId, error);
        return nil;
    }] exec:@[selfPtr, governanceActionIdPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_governance_action_ids_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_governanceActionIdsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_governance_action_ids_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_hard_fork_initiation_action_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_hard_fork_initiation_action_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_hard_fork_initiation_action_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_hard_fork_initiation_action_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_hard_fork_initiation_action_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_hard_fork_initiation_action_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionGovActionId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_hard_fork_initiation_action_gov_action_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionProtocolVersion:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_hard_fork_initiation_action_protocol_version(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionNew:(nonnull NSString *)protocolVersionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* protocolVersionPtr, CharPtr* error) {
        RPtr result;
        RPtr protocolVersion = [protocolVersionPtr  rPtr];
        return csl_bridge_hard_fork_initiation_action_new(protocolVersion, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:protocolVersionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hardForkInitiationActionNewWithActionId:(nonnull NSString *)govActionIdPtr withProtocolVersion:(nonnull NSString *)protocolVersionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr govActionId = [[params objectAtIndex:0]  rPtr];
        RPtr protocolVersion = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_hard_fork_initiation_action_new_with_action_id(govActionId, protocolVersion, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[govActionIdPtr, protocolVersionPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_headerToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_header_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_header_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_header_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerHeaderBody:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_header_body(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodySignature:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_signature(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerNew:(nonnull NSString *)headerBodyPtr withBodySignature:(nonnull NSString *)bodySignaturePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr headerBody = [[params objectAtIndex:0]  rPtr];
        RPtr bodySignature = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_header_new(headerBody, bodySignature, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[headerBodyPtr, bodySignaturePtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_headerBodyToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_header_body_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_header_body_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_header_body_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyBlockNumber:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_block_number(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodySlot:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_slot(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodySlotBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_slot_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyPrevHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_prev_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyIssuerVkey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_issuer_vkey(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyVrfVkey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_vrf_vkey(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyHasNonceAndLeaderVrf:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_has_nonce_and_leader_vrf(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyNonceVrfOrNothing:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_nonce_vrf_or_nothing(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyLeaderVrfOrNothing:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_leader_vrf_or_nothing(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyHasVrfResult:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_has_vrf_result(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyVrfResultOrNothing:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_vrf_result_or_nothing(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyBlockBodySize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_block_body_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyBlockBodyHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_block_body_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyOperationalCert:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_operational_cert(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyProtocolVersion:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_header_body_protocol_version(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyNew:(nonnull NSNumber *)blockNumberVal withSlot:(nonnull NSNumber *)slotVal withIssuerVkey:(nonnull NSString *)issuerVkeyPtr withVrfVkey:(nonnull NSString *)vrfVkeyPtr withVrfResult:(nonnull NSString *)vrfResultPtr withBlockBodySize:(nonnull NSNumber *)blockBodySizeVal withBlockBodyHash:(nonnull NSString *)blockBodyHashPtr withOperationalCert:(nonnull NSString *)operationalCertPtr withProtocolVersion:(nonnull NSString *)protocolVersionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t blockNumber = [[params objectAtIndex:0]  longLongValue];
        int64_t slot = [[params objectAtIndex:1]  longLongValue];
        RPtr issuerVkey = [[params objectAtIndex:2]  rPtr];
        RPtr vrfVkey = [[params objectAtIndex:3]  rPtr];
        RPtr vrfResult = [[params objectAtIndex:4]  rPtr];
        int64_t blockBodySize = [[params objectAtIndex:5]  longLongValue];
        RPtr blockBodyHash = [[params objectAtIndex:6]  rPtr];
        RPtr operationalCert = [[params objectAtIndex:7]  rPtr];
        RPtr protocolVersion = [[params objectAtIndex:8]  rPtr];
        return csl_bridge_header_body_new(blockNumber, slot, issuerVkey, vrfVkey, vrfResult, blockBodySize, blockBodyHash, operationalCert, protocolVersion, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[blockNumberVal, slotVal, issuerVkeyPtr, vrfVkeyPtr, vrfResultPtr, blockBodySizeVal, blockBodyHashPtr, operationalCertPtr, protocolVersionPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyNewWithPrevHash:(nonnull NSNumber *)blockNumberVal withSlot:(nonnull NSNumber *)slotVal withPrevHash:(nonnull NSString *)prevHashPtr withIssuerVkey:(nonnull NSString *)issuerVkeyPtr withVrfVkey:(nonnull NSString *)vrfVkeyPtr withVrfResult:(nonnull NSString *)vrfResultPtr withBlockBodySize:(nonnull NSNumber *)blockBodySizeVal withBlockBodyHash:(nonnull NSString *)blockBodyHashPtr withOperationalCert:(nonnull NSString *)operationalCertPtr withProtocolVersion:(nonnull NSString *)protocolVersionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t blockNumber = [[params objectAtIndex:0]  longLongValue];
        int64_t slot = [[params objectAtIndex:1]  longLongValue];
        RPtr prevHash = [[params objectAtIndex:2]  rPtr];
        RPtr issuerVkey = [[params objectAtIndex:3]  rPtr];
        RPtr vrfVkey = [[params objectAtIndex:4]  rPtr];
        RPtr vrfResult = [[params objectAtIndex:5]  rPtr];
        int64_t blockBodySize = [[params objectAtIndex:6]  longLongValue];
        RPtr blockBodyHash = [[params objectAtIndex:7]  rPtr];
        RPtr operationalCert = [[params objectAtIndex:8]  rPtr];
        RPtr protocolVersion = [[params objectAtIndex:9]  rPtr];
        return csl_bridge_header_body_new_with_prev_hash(blockNumber, slot, prevHash, issuerVkey, vrfVkey, vrfResult, blockBodySize, blockBodyHash, operationalCert, protocolVersion, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[blockNumberVal, slotVal, prevHashPtr, issuerVkeyPtr, vrfVkeyPtr, vrfResultPtr, blockBodySizeVal, blockBodyHashPtr, operationalCertPtr, protocolVersionPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_headerBodyNewHeaderbody:(nonnull NSNumber *)blockNumberVal withSlot:(nonnull NSString *)slotPtr withIssuerVkey:(nonnull NSString *)issuerVkeyPtr withVrfVkey:(nonnull NSString *)vrfVkeyPtr withVrfResult:(nonnull NSString *)vrfResultPtr withBlockBodySize:(nonnull NSNumber *)blockBodySizeVal withBlockBodyHash:(nonnull NSString *)blockBodyHashPtr withOperationalCert:(nonnull NSString *)operationalCertPtr withProtocolVersion:(nonnull NSString *)protocolVersionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t blockNumber = [[params objectAtIndex:0]  longLongValue];
        RPtr slot = [[params objectAtIndex:1]  rPtr];
        RPtr issuerVkey = [[params objectAtIndex:2]  rPtr];
        RPtr vrfVkey = [[params objectAtIndex:3]  rPtr];
        RPtr vrfResult = [[params objectAtIndex:4]  rPtr];
        int64_t blockBodySize = [[params objectAtIndex:5]  longLongValue];
        RPtr blockBodyHash = [[params objectAtIndex:6]  rPtr];
        RPtr operationalCert = [[params objectAtIndex:7]  rPtr];
        RPtr protocolVersion = [[params objectAtIndex:8]  rPtr];
        return csl_bridge_header_body_new_headerbody(blockNumber, slot, issuerVkey, vrfVkey, vrfResult, blockBodySize, blockBodyHash, operationalCert, protocolVersion, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[blockNumberVal, slotPtr, issuerVkeyPtr, vrfVkeyPtr, vrfResultPtr, blockBodySizeVal, blockBodyHashPtr, operationalCertPtr, protocolVersionPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_headerBodyNewHeaderbodyWithPrevHash:(nonnull NSNumber *)blockNumberVal withSlot:(nonnull NSString *)slotPtr withPrevHash:(nonnull NSString *)prevHashPtr withIssuerVkey:(nonnull NSString *)issuerVkeyPtr withVrfVkey:(nonnull NSString *)vrfVkeyPtr withVrfResult:(nonnull NSString *)vrfResultPtr withBlockBodySize:(nonnull NSNumber *)blockBodySizeVal withBlockBodyHash:(nonnull NSString *)blockBodyHashPtr withOperationalCert:(nonnull NSString *)operationalCertPtr withProtocolVersion:(nonnull NSString *)protocolVersionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t blockNumber = [[params objectAtIndex:0]  longLongValue];
        RPtr slot = [[params objectAtIndex:1]  rPtr];
        RPtr prevHash = [[params objectAtIndex:2]  rPtr];
        RPtr issuerVkey = [[params objectAtIndex:3]  rPtr];
        RPtr vrfVkey = [[params objectAtIndex:4]  rPtr];
        RPtr vrfResult = [[params objectAtIndex:5]  rPtr];
        int64_t blockBodySize = [[params objectAtIndex:6]  longLongValue];
        RPtr blockBodyHash = [[params objectAtIndex:7]  rPtr];
        RPtr operationalCert = [[params objectAtIndex:8]  rPtr];
        RPtr protocolVersion = [[params objectAtIndex:9]  rPtr];
        return csl_bridge_header_body_new_headerbody_with_prev_hash(blockNumber, slot, prevHash, issuerVkey, vrfVkey, vrfResult, blockBodySize, blockBodyHash, operationalCert, protocolVersion, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[blockNumberVal, slotPtr, prevHashPtr, issuerVkeyPtr, vrfVkeyPtr, vrfResultPtr, blockBodySizeVal, blockBodyHashPtr, operationalCertPtr, protocolVersionPtr] andResolve:resolve orReject:reject];
}



RCT_EXPORT_METHOD(csl_bridge_infoActionNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_info_action_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_intToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_int_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_int_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_int_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intNew:(nonnull NSString *)xPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* xPtr, CharPtr* error) {
        RPtr result;
        RPtr x = [xPtr  rPtr];
        return csl_bridge_int_new(x, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:xPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intNewNegative:(nonnull NSString *)xPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* xPtr, CharPtr* error) {
        RPtr result;
        RPtr x = [xPtr  rPtr];
        return csl_bridge_int_new_negative(x, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:xPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intNewI32:(nonnull NSNumber *)xVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSNumber* xVal, CharPtr* error) {
        RPtr result;
        int64_t x = [xVal  longLongValue];
        return csl_bridge_int_new_i32(x, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:xVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intIsPositive:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_is_positive(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intAsPositive:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_as_positive(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intAsNegative:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_as_negative(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intAsI32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_as_i32(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intAsI32OrNothing:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_as_i32_or_nothing(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intAsI32OrFail:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_as_i32_or_fail(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intToStr:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_int_to_str(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_intFromStr:(nonnull NSString *)stringVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stringVal, CharPtr* error) {
        RPtr result;
        CharPtr string = [stringVal  charPtr];
        return csl_bridge_int_from_str(string, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stringVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_ipv4ToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv4_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv4FromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_ipv4_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv4ToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv4_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv4FromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_ipv4_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv4ToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv4_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv4FromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_ipv4_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv4New:(nonnull NSString *)dataVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dataVal, CharPtr* error) {
        RPtr result;
        NSData* dataData = [NSData fromBase64:dataVal];
        return csl_bridge_ipv4_new((uint8_t*)dataData.bytes, dataData.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dataVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv4Ip:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv4_ip(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_ipv6ToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv6_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv6FromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_ipv6_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv6ToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv6_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv6FromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_ipv6_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv6ToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv6_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv6FromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_ipv6_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv6New:(nonnull NSString *)dataVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dataVal, CharPtr* error) {
        RPtr result;
        NSData* dataData = [NSData fromBase64:dataVal];
        return csl_bridge_ipv6_new((uint8_t*)dataData.bytes, dataData.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dataVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_ipv6Ip:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_ipv6_ip(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_kESSignatureToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_k_e_s_signature_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_kESSignatureFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_k_e_s_signature_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_kESVKeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_k_e_s_v_key_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_kESVKeyToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_k_e_s_v_key_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_kESVKeyToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_k_e_s_v_key_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_kESVKeyFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_k_e_s_v_key_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_kESVKeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_k_e_s_v_key_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_kESVKeyFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_k_e_s_v_key_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_languageToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_language_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_language_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_language_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_language_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_language_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_language_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageNewPlutusV1:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_language_new_plutus_v1(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageNewPlutusV2:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_language_new_plutus_v2(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageNewPlutusV3:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_language_new_plutus_v3(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languageKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_language_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_languagesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_languages_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languagesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_languages_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languagesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_languages_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languagesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_languages_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_languagesList:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_languages_list(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_legacyDaedalusPrivateKeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_legacy_daedalus_private_key_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_legacyDaedalusPrivateKeyAsBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_legacy_daedalus_private_key_as_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_legacyDaedalusPrivateKeyChaincode:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_legacy_daedalus_private_key_chaincode(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_linearFeeConstant:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_linear_fee_constant(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_linearFeeCoefficient:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_linear_fee_coefficient(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_linearFeeNew:(nonnull NSString *)coefficientPtr withConstant:(nonnull NSString *)constantPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr coefficient = [[params objectAtIndex:0]  rPtr];
        RPtr constant = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_linear_fee_new(coefficient, constant, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[coefficientPtr, constantPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_m_i_r_to_stake_credentials_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_m_i_r_to_stake_credentials_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_m_i_r_to_stake_credentials_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_m_i_r_to_stake_credentials_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_m_i_r_to_stake_credentials_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_m_i_r_to_stake_credentials_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_m_i_r_to_stake_credentials_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_m_i_r_to_stake_credentials_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsInsert:(nonnull NSString *)selfPtr withCred:(nonnull NSString *)credPtr withDelta:(nonnull NSString *)deltaPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr cred = [[params objectAtIndex:1]  rPtr];
        RPtr delta = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_m_i_r_to_stake_credentials_insert(self, cred, delta, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, credPtr, deltaPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsGet:(nonnull NSString *)selfPtr withCred:(nonnull NSString *)credPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr cred = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_m_i_r_to_stake_credentials_get(self, cred, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, credPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mIRToStakeCredentialsKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_m_i_r_to_stake_credentials_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_malformedAddressOriginalBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_malformed_address_original_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_malformedAddressToAddress:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_malformed_address_to_address(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_malformedAddressFromAddress:(nonnull NSString *)addrPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addrPtr, CharPtr* error) {
        RPtr result;
        RPtr addr = [addrPtr  rPtr];
        return csl_bridge_malformed_address_from_address(addr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addrPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_metadataListToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_metadata_list_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataListFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_metadata_list_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataListToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_metadata_list_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataListFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_metadata_list_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataListNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_metadata_list_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataListLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_metadata_list_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataListGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_metadata_list_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataListAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_metadata_list_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_metadataMapToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_metadata_map_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_metadata_map_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_metadata_map_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_metadata_map_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_metadata_map_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_metadata_map_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_metadata_map_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapInsertStr:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyVal withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr key = [[params objectAtIndex:1]  charPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_metadata_map_insert_str(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyVal, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapInsertI32:(nonnull NSString *)selfPtr withKey:(nonnull NSNumber *)keyVal withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t key = [[params objectAtIndex:1]  longLongValue];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_metadata_map_insert_i32(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyVal, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_metadata_map_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapGetStr:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr key = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_metadata_map_get_str(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapGetI32:(nonnull NSString *)selfPtr withKey:(nonnull NSNumber *)keyVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t key = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_metadata_map_get_i32(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapHas:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_metadata_map_has(self, key, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_metadataMapKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_metadata_map_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_mintToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_mint_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_mint_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_mint_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_mint_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintNewFromEntry:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr key = [[params objectAtIndex:0]  rPtr];
        RPtr value = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_mint_new_from_entry(key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_mint_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_mint_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintAsPositiveMultiasset:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_as_positive_multiasset(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintAsNegativeMultiasset:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_as_negative_multiasset(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_mintAssetsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_mint_assets_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintAssetsNewFromEntry:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr key = [[params objectAtIndex:0]  rPtr];
        RPtr value = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_mint_assets_new_from_entry(key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintAssetsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_assets_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintAssetsInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_mint_assets_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintAssetsGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_mint_assets_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintAssetsKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_assets_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_mintBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_mint_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderAddAsset:(nonnull NSString *)selfPtr withMint:(nonnull NSString *)mintPtr withAssetName:(nonnull NSString *)assetNamePtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr mint = [[params objectAtIndex:1]  rPtr];
        RPtr assetName = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_mint_builder_add_asset(self, mint, assetName, amount, error);
        return nil;
    }] exec:@[selfPtr, mintPtr, assetNamePtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderSetAsset:(nonnull NSString *)selfPtr withMint:(nonnull NSString *)mintPtr withAssetName:(nonnull NSString *)assetNamePtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr mint = [[params objectAtIndex:1]  rPtr];
        RPtr assetName = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_mint_builder_set_asset(self, mint, assetName, amount, error);
        return nil;
    }] exec:@[selfPtr, mintPtr, assetNamePtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderGetNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_builder_get_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderGetPlutusWitnesses:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_builder_get_plutus_witnesses(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderGetRefInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_builder_get_ref_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderGetRedeemers:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_builder_get_redeemers(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderHasPlutusScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_builder_has_plutus_scripts(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintBuilderHasNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mint_builder_has_native_scripts(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_mintWitnessNewNativeScript:(nonnull NSString *)nativeScriptPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* nativeScriptPtr, CharPtr* error) {
        RPtr result;
        RPtr nativeScript = [nativeScriptPtr  rPtr];
        return csl_bridge_mint_witness_new_native_script(nativeScript, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nativeScriptPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintWitnessNewPlutusScript:(nonnull NSString *)plutusScriptPtr withRedeemer:(nonnull NSString *)redeemerPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr plutusScript = [[params objectAtIndex:0]  rPtr];
        RPtr redeemer = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_mint_witness_new_plutus_script(plutusScript, redeemer, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[plutusScriptPtr, redeemerPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_mintsAssetsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mints_assets_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintsAssetsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_mints_assets_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintsAssetsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_mints_assets_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintsAssetsAdd:(nonnull NSString *)selfPtr withMintAssets:(nonnull NSString *)mintAssetsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr mintAssets = [[params objectAtIndex:1]  rPtr];
        csl_bridge_mints_assets_add(self, mintAssets, error);
        return nil;
    }] exec:@[selfPtr, mintAssetsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintsAssetsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_mints_assets_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_mintsAssetsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_mints_assets_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_reward_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_move_instantaneous_reward_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_reward_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_move_instantaneous_reward_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_reward_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_move_instantaneous_reward_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardNewToOtherPot:(nonnull NSNumber *)potVal withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int32_t pot = [[params objectAtIndex:0]  integerValue];
        RPtr amount = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_move_instantaneous_reward_new_to_other_pot(pot, amount, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[potVal, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardNewToStakeCreds:(nonnull NSNumber *)potVal withAmounts:(nonnull NSString *)amountsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int32_t pot = [[params objectAtIndex:0]  integerValue];
        RPtr amounts = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_move_instantaneous_reward_new_to_stake_creds(pot, amounts, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[potVal, amountsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardPot:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_reward_pot(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_reward_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardAsToOtherPot:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_reward_as_to_other_pot(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardAsToStakeCreds:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_reward_as_to_stake_creds(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_rewards_cert_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_move_instantaneous_rewards_cert_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_rewards_cert_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_move_instantaneous_rewards_cert_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_rewards_cert_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_move_instantaneous_rewards_cert_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertMoveInstantaneousReward:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_move_instantaneous_rewards_cert_move_instantaneous_reward(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_moveInstantaneousRewardsCertNew:(nonnull NSString *)moveInstantaneousRewardPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* moveInstantaneousRewardPtr, CharPtr* error) {
        RPtr result;
        RPtr moveInstantaneousReward = [moveInstantaneousRewardPtr  rPtr];
        return csl_bridge_move_instantaneous_rewards_cert_new(moveInstantaneousReward, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:moveInstantaneousRewardPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_multiAssetToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_asset_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_multi_asset_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_asset_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_multi_asset_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_asset_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_multi_asset_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_multi_asset_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_asset_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetInsert:(nonnull NSString *)selfPtr withPolicyId:(nonnull NSString *)policyIdPtr withAssets:(nonnull NSString *)assetsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyId = [[params objectAtIndex:1]  rPtr];
        RPtr assets = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_multi_asset_insert(self, policyId, assets, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, policyIdPtr, assetsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetGet:(nonnull NSString *)selfPtr withPolicyId:(nonnull NSString *)policyIdPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyId = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_multi_asset_get(self, policyId, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, policyIdPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetSetAsset:(nonnull NSString *)selfPtr withPolicyId:(nonnull NSString *)policyIdPtr withAssetName:(nonnull NSString *)assetNamePtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyId = [[params objectAtIndex:1]  rPtr];
        RPtr assetName = [[params objectAtIndex:2]  rPtr];
        RPtr value = [[params objectAtIndex:3]  rPtr];
        return csl_bridge_multi_asset_set_asset(self, policyId, assetName, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, policyIdPtr, assetNamePtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetGetAsset:(nonnull NSString *)selfPtr withPolicyId:(nonnull NSString *)policyIdPtr withAssetName:(nonnull NSString *)assetNamePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyId = [[params objectAtIndex:1]  rPtr];
        RPtr assetName = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_multi_asset_get_asset(self, policyId, assetName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, policyIdPtr, assetNamePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_asset_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiAssetSub:(nonnull NSString *)selfPtr withRhsMa:(nonnull NSString *)rhsMaPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr rhsMa = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_multi_asset_sub(self, rhsMa, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, rhsMaPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_multiHostNameToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_host_name_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiHostNameFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_multi_host_name_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiHostNameToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_host_name_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiHostNameFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_multi_host_name_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiHostNameToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_host_name_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiHostNameFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_multi_host_name_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiHostNameDnsName:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_multi_host_name_dns_name(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_multiHostNameNew:(nonnull NSString *)dnsNamePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dnsNamePtr, CharPtr* error) {
        RPtr result;
        RPtr dnsName = [dnsNamePtr  rPtr];
        return csl_bridge_multi_host_name_new(dnsName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dnsNamePtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_nativeScriptToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_native_script_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_native_script_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_native_script_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptNewScriptPubkey:(nonnull NSString *)scriptPubkeyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* scriptPubkeyPtr, CharPtr* error) {
        RPtr result;
        RPtr scriptPubkey = [scriptPubkeyPtr  rPtr];
        return csl_bridge_native_script_new_script_pubkey(scriptPubkey, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:scriptPubkeyPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptNewScriptAll:(nonnull NSString *)scriptAllPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* scriptAllPtr, CharPtr* error) {
        RPtr result;
        RPtr scriptAll = [scriptAllPtr  rPtr];
        return csl_bridge_native_script_new_script_all(scriptAll, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:scriptAllPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptNewScriptAny:(nonnull NSString *)scriptAnyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* scriptAnyPtr, CharPtr* error) {
        RPtr result;
        RPtr scriptAny = [scriptAnyPtr  rPtr];
        return csl_bridge_native_script_new_script_any(scriptAny, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:scriptAnyPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptNewScriptNOfK:(nonnull NSString *)scriptNOfKPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* scriptNOfKPtr, CharPtr* error) {
        RPtr result;
        RPtr scriptNOfK = [scriptNOfKPtr  rPtr];
        return csl_bridge_native_script_new_script_n_of_k(scriptNOfK, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:scriptNOfKPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptNewTimelockStart:(nonnull NSString *)timelockStartPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* timelockStartPtr, CharPtr* error) {
        RPtr result;
        RPtr timelockStart = [timelockStartPtr  rPtr];
        return csl_bridge_native_script_new_timelock_start(timelockStart, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:timelockStartPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptNewTimelockExpiry:(nonnull NSString *)timelockExpiryPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* timelockExpiryPtr, CharPtr* error) {
        RPtr result;
        RPtr timelockExpiry = [timelockExpiryPtr  rPtr];
        return csl_bridge_native_script_new_timelock_expiry(timelockExpiry, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:timelockExpiryPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptAsScriptPubkey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_as_script_pubkey(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptAsScriptAll:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_as_script_all(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptAsScriptAny:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_as_script_any(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptAsScriptNOfK:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_as_script_n_of_k(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptAsTimelockStart:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_as_timelock_start(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptAsTimelockExpiry:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_as_timelock_expiry(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptGetRequiredSigners:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_get_required_signers(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_nativeScriptSourceNew:(nonnull NSString *)scriptPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* scriptPtr, CharPtr* error) {
        RPtr result;
        RPtr script = [scriptPtr  rPtr];
        return csl_bridge_native_script_source_new(script, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:scriptPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptSourceNewRefInput:(nonnull NSString *)scriptHashPtr withInput:(nonnull NSString *)inputPtr withScriptSize:(nonnull NSNumber *)scriptSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr scriptHash = [[params objectAtIndex:0]  rPtr];
        RPtr input = [[params objectAtIndex:1]  rPtr];
        int64_t scriptSize = [[params objectAtIndex:2]  longLongValue];
        return csl_bridge_native_script_source_new_ref_input(scriptHash, input, scriptSize, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[scriptHashPtr, inputPtr, scriptSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptSourceSetRequiredSigners:(nonnull NSString *)selfPtr withKeyHashes:(nonnull NSString *)keyHashesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr keyHashes = [[params objectAtIndex:1]  rPtr];
        csl_bridge_native_script_source_set_required_signers(self, keyHashes, error);
        return nil;
    }] exec:@[selfPtr, keyHashesPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptSourceGetRefScriptSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_script_source_get_ref_script_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_nativeScriptsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_native_scripts_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_scripts_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_native_scripts_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_native_scripts_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_scripts_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_native_scripts_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_scripts_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_native_scripts_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_native_scripts_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nativeScriptsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_native_scripts_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_networkIdToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_network_id_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_network_id_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_network_id_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_network_id_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_network_id_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_network_id_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdTestnet:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_network_id_testnet(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdMainnet:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_network_id_mainnet(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkIdKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_network_id_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_networkInfoNew:(nonnull NSNumber *)networkIdVal withProtocolMagic:(nonnull NSNumber *)protocolMagicVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t networkId = [[params objectAtIndex:0]  longLongValue];
        int64_t protocolMagic = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_network_info_new(networkId, protocolMagic, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[networkIdVal, protocolMagicVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkInfoNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_network_info_network_id(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkInfoProtocolMagic:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_network_info_protocol_magic(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkInfoTestnetPreview:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_network_info_testnet_preview(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkInfoTestnetPreprod:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_network_info_testnet_preprod(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_networkInfoMainnet:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_network_info_mainnet(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_new_constitution_action_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_new_constitution_action_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_new_constitution_action_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_new_constitution_action_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_new_constitution_action_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_new_constitution_action_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionGovActionId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_new_constitution_action_gov_action_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionConstitution:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_new_constitution_action_constitution(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionNew:(nonnull NSString *)constitutionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* constitutionPtr, CharPtr* error) {
        RPtr result;
        RPtr constitution = [constitutionPtr  rPtr];
        return csl_bridge_new_constitution_action_new(constitution, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:constitutionPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionNewWithActionId:(nonnull NSString *)govActionIdPtr withConstitution:(nonnull NSString *)constitutionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr govActionId = [[params objectAtIndex:0]  rPtr];
        RPtr constitution = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_new_constitution_action_new_with_action_id(govActionId, constitution, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[govActionIdPtr, constitutionPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_newConstitutionActionHasScriptHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_new_constitution_action_has_script_hash(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_no_confidence_action_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_no_confidence_action_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_no_confidence_action_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_no_confidence_action_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_no_confidence_action_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_no_confidence_action_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionGovActionId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_no_confidence_action_gov_action_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_no_confidence_action_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_noConfidenceActionNewWithActionId:(nonnull NSString *)govActionIdPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* govActionIdPtr, CharPtr* error) {
        RPtr result;
        RPtr govActionId = [govActionIdPtr  rPtr];
        return csl_bridge_no_confidence_action_new_with_action_id(govActionId, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:govActionIdPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_nonceToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_nonce_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_nonce_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_nonce_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_nonce_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_nonce_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_nonce_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceNewIdentity:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_nonce_new_identity(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceNewFromHash:(nonnull NSString *)hashVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hashVal, CharPtr* error) {
        RPtr result;
        NSData* dataHash = [NSData fromBase64:hashVal];
        return csl_bridge_nonce_new_from_hash((uint8_t*)dataHash.bytes, dataHash.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hashVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_nonceGetHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_nonce_get_hash(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_operationalCertToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_operational_cert_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_operational_cert_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_operational_cert_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_operational_cert_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_operational_cert_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_operational_cert_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertHotVkey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_operational_cert_hot_vkey(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertSequenceNumber:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_operational_cert_sequence_number(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertKesPeriod:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_operational_cert_kes_period(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertSigma:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_operational_cert_sigma(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_operationalCertNew:(nonnull NSString *)hotVkeyPtr withSequenceNumber:(nonnull NSNumber *)sequenceNumberVal withKesPeriod:(nonnull NSNumber *)kesPeriodVal withSigma:(nonnull NSString *)sigmaPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr hotVkey = [[params objectAtIndex:0]  rPtr];
        int64_t sequenceNumber = [[params objectAtIndex:1]  longLongValue];
        int64_t kesPeriod = [[params objectAtIndex:2]  longLongValue];
        RPtr sigma = [[params objectAtIndex:3]  rPtr];
        return csl_bridge_operational_cert_new(hotVkey, sequenceNumber, kesPeriod, sigma, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[hotVkeyPtr, sequenceNumberVal, kesPeriodVal, sigmaPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_outputDatumNewDataHash:(nonnull NSString *)dataHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dataHashPtr, CharPtr* error) {
        RPtr result;
        RPtr dataHash = [dataHashPtr  rPtr];
        return csl_bridge_output_datum_new_data_hash(dataHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dataHashPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_outputDatumNewData:(nonnull NSString *)dataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dataPtr, CharPtr* error) {
        RPtr result;
        RPtr data = [dataPtr  rPtr];
        return csl_bridge_output_datum_new_data(data, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dataPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_outputDatumDataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_output_datum_data_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_outputDatumData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_output_datum_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_parameter_change_action_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_parameter_change_action_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_parameter_change_action_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_parameter_change_action_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_parameter_change_action_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_parameter_change_action_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionGovActionId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_parameter_change_action_gov_action_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionProtocolParamUpdates:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_parameter_change_action_protocol_param_updates(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionPolicyHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_parameter_change_action_policy_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionNew:(nonnull NSString *)protocolParamUpdatesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* protocolParamUpdatesPtr, CharPtr* error) {
        RPtr result;
        RPtr protocolParamUpdates = [protocolParamUpdatesPtr  rPtr];
        return csl_bridge_parameter_change_action_new(protocolParamUpdates, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:protocolParamUpdatesPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionNewWithActionId:(nonnull NSString *)govActionIdPtr withProtocolParamUpdates:(nonnull NSString *)protocolParamUpdatesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr govActionId = [[params objectAtIndex:0]  rPtr];
        RPtr protocolParamUpdates = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_parameter_change_action_new_with_action_id(govActionId, protocolParamUpdates, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[govActionIdPtr, protocolParamUpdatesPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionNewWithPolicyHash:(nonnull NSString *)protocolParamUpdatesPtr withPolicyHash:(nonnull NSString *)policyHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr protocolParamUpdates = [[params objectAtIndex:0]  rPtr];
        RPtr policyHash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_parameter_change_action_new_with_policy_hash(protocolParamUpdates, policyHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[protocolParamUpdatesPtr, policyHashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_parameterChangeActionNewWithPolicyHashAndActionId:(nonnull NSString *)govActionIdPtr withProtocolParamUpdates:(nonnull NSString *)protocolParamUpdatesPtr withPolicyHash:(nonnull NSString *)policyHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr govActionId = [[params objectAtIndex:0]  rPtr];
        RPtr protocolParamUpdates = [[params objectAtIndex:1]  rPtr];
        RPtr policyHash = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_parameter_change_action_new_with_policy_hash_and_action_id(govActionId, protocolParamUpdates, policyHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[govActionIdPtr, protocolParamUpdatesPtr, policyHashPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusDataToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_data_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_plutus_data_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataNewConstrPlutusData:(nonnull NSString *)constrPlutusDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* constrPlutusDataPtr, CharPtr* error) {
        RPtr result;
        RPtr constrPlutusData = [constrPlutusDataPtr  rPtr];
        return csl_bridge_plutus_data_new_constr_plutus_data(constrPlutusData, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:constrPlutusDataPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataNewEmptyConstrPlutusData:(nonnull NSString *)alternativePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* alternativePtr, CharPtr* error) {
        RPtr result;
        RPtr alternative = [alternativePtr  rPtr];
        return csl_bridge_plutus_data_new_empty_constr_plutus_data(alternative, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:alternativePtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataNewSingleValueConstrPlutusData:(nonnull NSString *)alternativePtr withPlutusData:(nonnull NSString *)plutusDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr alternative = [[params objectAtIndex:0]  rPtr];
        RPtr plutusData = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_plutus_data_new_single_value_constr_plutus_data(alternative, plutusData, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[alternativePtr, plutusDataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataNewMap:(nonnull NSString *)mapPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* mapPtr, CharPtr* error) {
        RPtr result;
        RPtr map = [mapPtr  rPtr];
        return csl_bridge_plutus_data_new_map(map, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:mapPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataNewList:(nonnull NSString *)listPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* listPtr, CharPtr* error) {
        RPtr result;
        RPtr list = [listPtr  rPtr];
        return csl_bridge_plutus_data_new_list(list, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:listPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataNewInteger:(nonnull NSString *)integerPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* integerPtr, CharPtr* error) {
        RPtr result;
        RPtr integer = [integerPtr  rPtr];
        return csl_bridge_plutus_data_new_integer(integer, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:integerPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataNewBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_data_new_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataAsConstrPlutusData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_as_constr_plutus_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataAsMap:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_as_map(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataAsList:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_as_list(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataAsInteger:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_as_integer(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataAsBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_data_as_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataToJson:(nonnull NSString *)selfPtr withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int32_t schema = [[params objectAtIndex:1]  integerValue];
        return csl_bridge_plutus_data_to_json(self, schema, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataFromJson:(nonnull NSString *)jsonVal withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        CharPtr json = [[params objectAtIndex:0]  charPtr];
        int32_t schema = [[params objectAtIndex:1]  integerValue];
        return csl_bridge_plutus_data_from_json(json, schema, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[jsonVal, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusDataFromAddress:(nonnull NSString *)addressPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addressPtr, CharPtr* error) {
        RPtr result;
        RPtr address = [addressPtr  rPtr];
        return csl_bridge_plutus_data_from_address(address, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addressPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusListNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_plutus_list_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusListLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_list_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusListGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_plutus_list_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusListAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_plutus_list_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusListToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_list_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusListFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_list_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusListToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_list_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusListFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_plutus_list_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusMapToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_map_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_map_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_map_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_plutus_map_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_plutus_map_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_map_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValues:(nonnull NSString *)valuesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr values = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_plutus_map_insert(self, key, values, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuesPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_plutus_map_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_map_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusMapValuesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_plutus_map_values_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapValuesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_map_values_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapValuesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_plutus_map_values_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusMapValuesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_plutus_map_values_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusScriptToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_script_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_script_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_script_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_plutus_script_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptNew:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_script_new((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptNewV2:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_script_new_v2((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptNewV3:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_script_new_v3((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptNewWithVersion:(nonnull NSString *)bytesVal withLanguage:(nonnull NSString *)languagePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:[params objectAtIndex:0]];
        RPtr language = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_plutus_script_new_with_version((uint8_t*)dataBytes.bytes, dataBytes.length, language, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[bytesVal, languagePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_script_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptFromBytesV2:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_script_from_bytes_v2((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptFromBytesV3:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_script_from_bytes_v3((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptFromBytesWithVersion:(nonnull NSString *)bytesVal withLanguage:(nonnull NSString *)languagePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:[params objectAtIndex:0]];
        RPtr language = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_plutus_script_from_bytes_with_version((uint8_t*)dataBytes.bytes, dataBytes.length, language, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[bytesVal, languagePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptFromHexWithVersion:(nonnull NSString *)hexStrVal withLanguage:(nonnull NSString *)languagePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [[params objectAtIndex:0]  charPtr];
        RPtr language = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_plutus_script_from_hex_with_version(hexStr, language, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[hexStrVal, languagePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_script_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptLanguageVersion:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_script_language_version(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusScriptSourceNew:(nonnull NSString *)scriptPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* scriptPtr, CharPtr* error) {
        RPtr result;
        RPtr script = [scriptPtr  rPtr];
        return csl_bridge_plutus_script_source_new(script, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:scriptPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptSourceNewRefInput:(nonnull NSString *)scriptHashPtr withInput:(nonnull NSString *)inputPtr withLangVer:(nonnull NSString *)langVerPtr withScriptSize:(nonnull NSNumber *)scriptSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr scriptHash = [[params objectAtIndex:0]  rPtr];
        RPtr input = [[params objectAtIndex:1]  rPtr];
        RPtr langVer = [[params objectAtIndex:2]  rPtr];
        int64_t scriptSize = [[params objectAtIndex:3]  longLongValue];
        return csl_bridge_plutus_script_source_new_ref_input(scriptHash, input, langVer, scriptSize, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[scriptHashPtr, inputPtr, langVerPtr, scriptSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptSourceSetRequiredSigners:(nonnull NSString *)selfPtr withKeyHashes:(nonnull NSString *)keyHashesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr keyHashes = [[params objectAtIndex:1]  rPtr];
        csl_bridge_plutus_script_source_set_required_signers(self, keyHashes, error);
        return nil;
    }] exec:@[selfPtr, keyHashesPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptSourceGetRefScriptSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_script_source_get_ref_script_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusScriptsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_scripts_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_plutus_scripts_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_scripts_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_plutus_scripts_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_scripts_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_plutus_scripts_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_plutus_scripts_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_scripts_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_plutus_scripts_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusScriptsAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_plutus_scripts_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusWitnessNew:(nonnull NSString *)scriptPtr withDatum:(nonnull NSString *)datumPtr withRedeemer:(nonnull NSString *)redeemerPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr script = [[params objectAtIndex:0]  rPtr];
        RPtr datum = [[params objectAtIndex:1]  rPtr];
        RPtr redeemer = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_plutus_witness_new(script, datum, redeemer, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[scriptPtr, datumPtr, redeemerPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessNewWithRef:(nonnull NSString *)scriptPtr withDatum:(nonnull NSString *)datumPtr withRedeemer:(nonnull NSString *)redeemerPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr script = [[params objectAtIndex:0]  rPtr];
        RPtr datum = [[params objectAtIndex:1]  rPtr];
        RPtr redeemer = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_plutus_witness_new_with_ref(script, datum, redeemer, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[scriptPtr, datumPtr, redeemerPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessNewWithoutDatum:(nonnull NSString *)scriptPtr withRedeemer:(nonnull NSString *)redeemerPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr script = [[params objectAtIndex:0]  rPtr];
        RPtr redeemer = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_plutus_witness_new_without_datum(script, redeemer, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[scriptPtr, redeemerPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessNewWithRefWithoutDatum:(nonnull NSString *)scriptPtr withRedeemer:(nonnull NSString *)redeemerPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr script = [[params objectAtIndex:0]  rPtr];
        RPtr redeemer = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_plutus_witness_new_with_ref_without_datum(script, redeemer, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[scriptPtr, redeemerPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessScript:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_witness_script(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessDatum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_witness_datum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessRedeemer:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_witness_redeemer(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_plutusWitnessesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_plutus_witnesses_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_plutus_witnesses_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_plutus_witnesses_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_plutusWitnessesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_plutus_witnesses_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_pointerNew:(nonnull NSNumber *)slotVal withTxIndex:(nonnull NSNumber *)txIndexVal withCertIndex:(nonnull NSNumber *)certIndexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t slot = [[params objectAtIndex:0]  longLongValue];
        int64_t txIndex = [[params objectAtIndex:1]  longLongValue];
        int64_t certIndex = [[params objectAtIndex:2]  longLongValue];
        return csl_bridge_pointer_new(slot, txIndex, certIndex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[slotVal, txIndexVal, certIndexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerNewPointer:(nonnull NSString *)slotPtr withTxIndex:(nonnull NSString *)txIndexPtr withCertIndex:(nonnull NSString *)certIndexPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr slot = [[params objectAtIndex:0]  rPtr];
        RPtr txIndex = [[params objectAtIndex:1]  rPtr];
        RPtr certIndex = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_pointer_new_pointer(slot, txIndex, certIndex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[slotPtr, txIndexPtr, certIndexPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerSlot:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_slot(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerTxIndex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_tx_index(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerCertIndex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_cert_index(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerSlotBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_slot_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerTxIndexBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_tx_index_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerCertIndexBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_cert_index_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_pointerAddressNew:(nonnull NSNumber *)networkVal withPayment:(nonnull NSString *)paymentPtr withStake:(nonnull NSString *)stakePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t network = [[params objectAtIndex:0]  longLongValue];
        RPtr payment = [[params objectAtIndex:1]  rPtr];
        RPtr stake = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_pointer_address_new(network, payment, stake, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[networkVal, paymentPtr, stakePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerAddressPaymentCred:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_address_payment_cred(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerAddressStakePointer:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_address_stake_pointer(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerAddressToAddress:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_address_to_address(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerAddressFromAddress:(nonnull NSString *)addrPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addrPtr, CharPtr* error) {
        RPtr result;
        RPtr addr = [addrPtr  rPtr];
        return csl_bridge_pointer_address_from_address(addr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addrPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_pointerAddressNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pointer_address_network_id(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_poolMetadataToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_metadata_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_pool_metadata_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_metadata_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_pool_metadata_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_metadata_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_pool_metadata_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataUrl:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_metadata_url(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataPoolMetadataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_metadata_pool_metadata_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataNew:(nonnull NSString *)urlPtr withPoolMetadataHash:(nonnull NSString *)poolMetadataHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr url = [[params objectAtIndex:0]  rPtr];
        RPtr poolMetadataHash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_pool_metadata_new(url, poolMetadataHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[urlPtr, poolMetadataHashPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_poolMetadataHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_pool_metadata_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_metadata_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_pool_metadata_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_pool_metadata_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_metadata_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolMetadataHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_pool_metadata_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_poolParamsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_pool_params_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_pool_params_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_pool_params_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsOperator:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_operator(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsVrfKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_vrf_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsPledge:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_pledge(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsCost:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_cost(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsMargin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_margin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsRewardAccount:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_reward_account(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsPoolOwners:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_pool_owners(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsRelays:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_relays(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsPoolMetadata:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_params_pool_metadata(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsNew:(nonnull NSString *)operatorPtr withVrfKeyhash:(nonnull NSString *)vrfKeyhashPtr withPledge:(nonnull NSString *)pledgePtr withCost:(nonnull NSString *)costPtr withMargin:(nonnull NSString *)marginPtr withRewardAccount:(nonnull NSString *)rewardAccountPtr withPoolOwners:(nonnull NSString *)poolOwnersPtr withRelays:(nonnull NSString *)relaysPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr operator = [[params objectAtIndex:0]  rPtr];
        RPtr vrfKeyhash = [[params objectAtIndex:1]  rPtr];
        RPtr pledge = [[params objectAtIndex:2]  rPtr];
        RPtr cost = [[params objectAtIndex:3]  rPtr];
        RPtr margin = [[params objectAtIndex:4]  rPtr];
        RPtr rewardAccount = [[params objectAtIndex:5]  rPtr];
        RPtr poolOwners = [[params objectAtIndex:6]  rPtr];
        RPtr relays = [[params objectAtIndex:7]  rPtr];
        return csl_bridge_pool_params_new(operator, vrfKeyhash, pledge, cost, margin, rewardAccount, poolOwners, relays, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[operatorPtr, vrfKeyhashPtr, pledgePtr, costPtr, marginPtr, rewardAccountPtr, poolOwnersPtr, relaysPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolParamsNewWithPoolMetadata:(nonnull NSString *)operatorPtr withVrfKeyhash:(nonnull NSString *)vrfKeyhashPtr withPledge:(nonnull NSString *)pledgePtr withCost:(nonnull NSString *)costPtr withMargin:(nonnull NSString *)marginPtr withRewardAccount:(nonnull NSString *)rewardAccountPtr withPoolOwners:(nonnull NSString *)poolOwnersPtr withRelays:(nonnull NSString *)relaysPtr withPoolMetadata:(nonnull NSString *)poolMetadataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr operator = [[params objectAtIndex:0]  rPtr];
        RPtr vrfKeyhash = [[params objectAtIndex:1]  rPtr];
        RPtr pledge = [[params objectAtIndex:2]  rPtr];
        RPtr cost = [[params objectAtIndex:3]  rPtr];
        RPtr margin = [[params objectAtIndex:4]  rPtr];
        RPtr rewardAccount = [[params objectAtIndex:5]  rPtr];
        RPtr poolOwners = [[params objectAtIndex:6]  rPtr];
        RPtr relays = [[params objectAtIndex:7]  rPtr];
        RPtr poolMetadata = [[params objectAtIndex:8]  rPtr];
        return csl_bridge_pool_params_new_with_pool_metadata(operator, vrfKeyhash, pledge, cost, margin, rewardAccount, poolOwners, relays, poolMetadata, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[operatorPtr, vrfKeyhashPtr, pledgePtr, costPtr, marginPtr, rewardAccountPtr, poolOwnersPtr, relaysPtr, poolMetadataPtr] andResolve:resolve orReject:reject];
}



RCT_EXPORT_METHOD(csl_bridge_poolRegistrationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_registration_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRegistrationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_pool_registration_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRegistrationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_registration_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRegistrationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_pool_registration_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRegistrationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_registration_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRegistrationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_pool_registration_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRegistrationPoolParams:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_registration_pool_params(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRegistrationNew:(nonnull NSString *)poolParamsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* poolParamsPtr, CharPtr* error) {
        RPtr result;
        RPtr poolParams = [poolParamsPtr  rPtr];
        return csl_bridge_pool_registration_new(poolParams, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:poolParamsPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_poolRetirementToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_retirement_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_pool_retirement_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_retirement_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_pool_retirement_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_retirement_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_pool_retirement_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementPoolKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_retirement_pool_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementEpoch:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_retirement_epoch(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolRetirementNew:(nonnull NSString *)poolKeyhashPtr withEpoch:(nonnull NSNumber *)epochVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr poolKeyhash = [[params objectAtIndex:0]  rPtr];
        int64_t epoch = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_pool_retirement_new(poolKeyhash, epoch, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[poolKeyhashPtr, epochVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_pool_voting_thresholds_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_pool_voting_thresholds_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_pool_voting_thresholds_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsNew:(nonnull NSString *)motionNoConfidencePtr withCommitteeNormal:(nonnull NSString *)committeeNormalPtr withCommitteeNoConfidence:(nonnull NSString *)committeeNoConfidencePtr withHardForkInitiation:(nonnull NSString *)hardForkInitiationPtr withSecurityRelevantThreshold:(nonnull NSString *)securityRelevantThresholdPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr motionNoConfidence = [[params objectAtIndex:0]  rPtr];
        RPtr committeeNormal = [[params objectAtIndex:1]  rPtr];
        RPtr committeeNoConfidence = [[params objectAtIndex:2]  rPtr];
        RPtr hardForkInitiation = [[params objectAtIndex:3]  rPtr];
        RPtr securityRelevantThreshold = [[params objectAtIndex:4]  rPtr];
        return csl_bridge_pool_voting_thresholds_new(motionNoConfidence, committeeNormal, committeeNoConfidence, hardForkInitiation, securityRelevantThreshold, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[motionNoConfidencePtr, committeeNormalPtr, committeeNoConfidencePtr, hardForkInitiationPtr, securityRelevantThresholdPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsMotionNoConfidence:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_motion_no_confidence(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsCommitteeNormal:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_committee_normal(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsCommitteeNoConfidence:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_committee_no_confidence(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsHardForkInitiation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_hard_fork_initiation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_poolVotingThresholdsSecurityRelevantThreshold:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_pool_voting_thresholds_security_relevant_threshold(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_privateKeyToPublic:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_private_key_to_public(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyGenerateEd25519:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_private_key_generate_ed25519(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyGenerateEd25519extended:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_private_key_generate_ed25519extended(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyFromBech32:(nonnull NSString *)bech32StrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bech32StrVal, CharPtr* error) {
        RPtr result;
        CharPtr bech32Str = [bech32StrVal  charPtr];
        return csl_bridge_private_key_from_bech32(bech32Str, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bech32StrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyToBech32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_private_key_to_bech32(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyAsBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_private_key_as_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyFromExtendedBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_private_key_from_extended_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyFromNormalBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_private_key_from_normal_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeySign:(nonnull NSString *)selfPtr withMessage:(nonnull NSString *)messageVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        NSData* dataMessage = [NSData fromBase64:[params objectAtIndex:1]];
        return csl_bridge_private_key_sign(self, (uint8_t*)dataMessage.bytes, dataMessage.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, messageVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_private_key_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_privateKeyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_private_key_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_proposed_protocol_parameter_updates_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_proposed_protocol_parameter_updates_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_proposed_protocol_parameter_updates_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_proposed_protocol_parameter_updates_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_proposed_protocol_parameter_updates_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_proposed_protocol_parameter_updates_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_proposed_protocol_parameter_updates_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_proposed_protocol_parameter_updates_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_proposed_protocol_parameter_updates_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_proposed_protocol_parameter_updates_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_proposedProtocolParameterUpdatesKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_proposed_protocol_parameter_updates_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_protocol_param_update_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_protocol_param_update_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_protocol_param_update_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMinfeeA:(nonnull NSString *)selfPtr withMinfeeA:(nonnull NSString *)minfeeAPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr minfeeA = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_minfee_a(self, minfeeA, error);
        return nil;
    }] exec:@[selfPtr, minfeeAPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMinfeeA:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_minfee_a(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMinfeeB:(nonnull NSString *)selfPtr withMinfeeB:(nonnull NSString *)minfeeBPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr minfeeB = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_minfee_b(self, minfeeB, error);
        return nil;
    }] exec:@[selfPtr, minfeeBPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMinfeeB:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_minfee_b(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxBlockBodySize:(nonnull NSString *)selfPtr withMaxBlockBodySize:(nonnull NSNumber *)maxBlockBodySizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxBlockBodySize = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_max_block_body_size(self, maxBlockBodySize, error);
        return nil;
    }] exec:@[selfPtr, maxBlockBodySizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxBlockBodySize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_block_body_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxTxSize:(nonnull NSString *)selfPtr withMaxTxSize:(nonnull NSNumber *)maxTxSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxTxSize = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_max_tx_size(self, maxTxSize, error);
        return nil;
    }] exec:@[selfPtr, maxTxSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxTxSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_tx_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxBlockHeaderSize:(nonnull NSString *)selfPtr withMaxBlockHeaderSize:(nonnull NSNumber *)maxBlockHeaderSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxBlockHeaderSize = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_max_block_header_size(self, maxBlockHeaderSize, error);
        return nil;
    }] exec:@[selfPtr, maxBlockHeaderSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxBlockHeaderSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_block_header_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetKeyDeposit:(nonnull NSString *)selfPtr withKeyDeposit:(nonnull NSString *)keyDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr keyDeposit = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_key_deposit(self, keyDeposit, error);
        return nil;
    }] exec:@[selfPtr, keyDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateKeyDeposit:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_key_deposit(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetPoolDeposit:(nonnull NSString *)selfPtr withPoolDeposit:(nonnull NSString *)poolDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr poolDeposit = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_pool_deposit(self, poolDeposit, error);
        return nil;
    }] exec:@[selfPtr, poolDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdatePoolDeposit:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_pool_deposit(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxEpoch:(nonnull NSString *)selfPtr withMaxEpoch:(nonnull NSNumber *)maxEpochVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxEpoch = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_max_epoch(self, maxEpoch, error);
        return nil;
    }] exec:@[selfPtr, maxEpochVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxEpoch:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_epoch(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetNOpt:(nonnull NSString *)selfPtr withNOpt:(nonnull NSNumber *)nOptVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t nOpt = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_n_opt(self, nOpt, error);
        return nil;
    }] exec:@[selfPtr, nOptVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateNOpt:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_n_opt(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetPoolPledgeInfluence:(nonnull NSString *)selfPtr withPoolPledgeInfluence:(nonnull NSString *)poolPledgeInfluencePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr poolPledgeInfluence = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_pool_pledge_influence(self, poolPledgeInfluence, error);
        return nil;
    }] exec:@[selfPtr, poolPledgeInfluencePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdatePoolPledgeInfluence:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_pool_pledge_influence(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetExpansionRate:(nonnull NSString *)selfPtr withExpansionRate:(nonnull NSString *)expansionRatePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr expansionRate = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_expansion_rate(self, expansionRate, error);
        return nil;
    }] exec:@[selfPtr, expansionRatePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateExpansionRate:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_expansion_rate(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetTreasuryGrowthRate:(nonnull NSString *)selfPtr withTreasuryGrowthRate:(nonnull NSString *)treasuryGrowthRatePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr treasuryGrowthRate = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_treasury_growth_rate(self, treasuryGrowthRate, error);
        return nil;
    }] exec:@[selfPtr, treasuryGrowthRatePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateTreasuryGrowthRate:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_treasury_growth_rate(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateD:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_d(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateExtraEntropy:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_extra_entropy(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetProtocolVersion:(nonnull NSString *)selfPtr withProtocolVersion:(nonnull NSString *)protocolVersionPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr protocolVersion = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_protocol_version(self, protocolVersion, error);
        return nil;
    }] exec:@[selfPtr, protocolVersionPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateProtocolVersion:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_protocol_version(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMinPoolCost:(nonnull NSString *)selfPtr withMinPoolCost:(nonnull NSString *)minPoolCostPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr minPoolCost = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_min_pool_cost(self, minPoolCost, error);
        return nil;
    }] exec:@[selfPtr, minPoolCostPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMinPoolCost:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_min_pool_cost(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetAdaPerUtxoByte:(nonnull NSString *)selfPtr withAdaPerUtxoByte:(nonnull NSString *)adaPerUtxoBytePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr adaPerUtxoByte = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_ada_per_utxo_byte(self, adaPerUtxoByte, error);
        return nil;
    }] exec:@[selfPtr, adaPerUtxoBytePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateAdaPerUtxoByte:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_ada_per_utxo_byte(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetCostModels:(nonnull NSString *)selfPtr withCostModels:(nonnull NSString *)costModelsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr costModels = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_cost_models(self, costModels, error);
        return nil;
    }] exec:@[selfPtr, costModelsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateCostModels:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_cost_models(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetExecutionCosts:(nonnull NSString *)selfPtr withExecutionCosts:(nonnull NSString *)executionCostsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr executionCosts = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_execution_costs(self, executionCosts, error);
        return nil;
    }] exec:@[selfPtr, executionCostsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateExecutionCosts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_execution_costs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxTxExUnits:(nonnull NSString *)selfPtr withMaxTxExUnits:(nonnull NSString *)maxTxExUnitsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr maxTxExUnits = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_max_tx_ex_units(self, maxTxExUnits, error);
        return nil;
    }] exec:@[selfPtr, maxTxExUnitsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxTxExUnits:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_tx_ex_units(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxBlockExUnits:(nonnull NSString *)selfPtr withMaxBlockExUnits:(nonnull NSString *)maxBlockExUnitsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr maxBlockExUnits = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_max_block_ex_units(self, maxBlockExUnits, error);
        return nil;
    }] exec:@[selfPtr, maxBlockExUnitsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxBlockExUnits:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_block_ex_units(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxValueSize:(nonnull NSString *)selfPtr withMaxValueSize:(nonnull NSNumber *)maxValueSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxValueSize = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_max_value_size(self, maxValueSize, error);
        return nil;
    }] exec:@[selfPtr, maxValueSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxValueSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_value_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetCollateralPercentage:(nonnull NSString *)selfPtr withCollateralPercentage:(nonnull NSNumber *)collateralPercentageVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t collateralPercentage = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_collateral_percentage(self, collateralPercentage, error);
        return nil;
    }] exec:@[selfPtr, collateralPercentageVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateCollateralPercentage:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_collateral_percentage(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMaxCollateralInputs:(nonnull NSString *)selfPtr withMaxCollateralInputs:(nonnull NSNumber *)maxCollateralInputsVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxCollateralInputs = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_max_collateral_inputs(self, maxCollateralInputs, error);
        return nil;
    }] exec:@[selfPtr, maxCollateralInputsVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMaxCollateralInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_max_collateral_inputs(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetPoolVotingThresholds:(nonnull NSString *)selfPtr withPoolVotingThresholds:(nonnull NSString *)poolVotingThresholdsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr poolVotingThresholds = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_pool_voting_thresholds(self, poolVotingThresholds, error);
        return nil;
    }] exec:@[selfPtr, poolVotingThresholdsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdatePoolVotingThresholds:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_pool_voting_thresholds(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetDrepVotingThresholds:(nonnull NSString *)selfPtr withDrepVotingThresholds:(nonnull NSString *)drepVotingThresholdsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr drepVotingThresholds = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_drep_voting_thresholds(self, drepVotingThresholds, error);
        return nil;
    }] exec:@[selfPtr, drepVotingThresholdsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateDrepVotingThresholds:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_drep_voting_thresholds(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetMinCommitteeSize:(nonnull NSString *)selfPtr withMinCommitteeSize:(nonnull NSNumber *)minCommitteeSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t minCommitteeSize = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_min_committee_size(self, minCommitteeSize, error);
        return nil;
    }] exec:@[selfPtr, minCommitteeSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateMinCommitteeSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_min_committee_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetCommitteeTermLimit:(nonnull NSString *)selfPtr withCommitteeTermLimit:(nonnull NSNumber *)committeeTermLimitVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t committeeTermLimit = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_committee_term_limit(self, committeeTermLimit, error);
        return nil;
    }] exec:@[selfPtr, committeeTermLimitVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateCommitteeTermLimit:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_committee_term_limit(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetGovernanceActionValidityPeriod:(nonnull NSString *)selfPtr withGovernanceActionValidityPeriod:(nonnull NSNumber *)governanceActionValidityPeriodVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t governanceActionValidityPeriod = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_governance_action_validity_period(self, governanceActionValidityPeriod, error);
        return nil;
    }] exec:@[selfPtr, governanceActionValidityPeriodVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateGovernanceActionValidityPeriod:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_governance_action_validity_period(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetGovernanceActionDeposit:(nonnull NSString *)selfPtr withGovernanceActionDeposit:(nonnull NSString *)governanceActionDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr governanceActionDeposit = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_governance_action_deposit(self, governanceActionDeposit, error);
        return nil;
    }] exec:@[selfPtr, governanceActionDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateGovernanceActionDeposit:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_governance_action_deposit(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetDrepDeposit:(nonnull NSString *)selfPtr withDrepDeposit:(nonnull NSString *)drepDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr drepDeposit = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_drep_deposit(self, drepDeposit, error);
        return nil;
    }] exec:@[selfPtr, drepDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateDrepDeposit:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_drep_deposit(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetDrepInactivityPeriod:(nonnull NSString *)selfPtr withDrepInactivityPeriod:(nonnull NSNumber *)drepInactivityPeriodVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t drepInactivityPeriod = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_protocol_param_update_set_drep_inactivity_period(self, drepInactivityPeriod, error);
        return nil;
    }] exec:@[selfPtr, drepInactivityPeriodVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateDrepInactivityPeriod:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_drep_inactivity_period(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateSetRefScriptCoinsPerByte:(nonnull NSString *)selfPtr withRefScriptCoinsPerByte:(nonnull NSString *)refScriptCoinsPerBytePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr refScriptCoinsPerByte = [[params objectAtIndex:1]  rPtr];
        csl_bridge_protocol_param_update_set_ref_script_coins_per_byte(self, refScriptCoinsPerByte, error);
        return nil;
    }] exec:@[selfPtr, refScriptCoinsPerBytePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateRefScriptCoinsPerByte:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_param_update_ref_script_coins_per_byte(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolParamUpdateNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_protocol_param_update_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_protocolVersionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_version_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_protocol_version_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_version_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_protocol_version_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_version_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_protocol_version_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionMajor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_version_major(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionMinor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_protocol_version_minor(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_protocolVersionNew:(nonnull NSNumber *)majorVal withMinor:(nonnull NSNumber *)minorVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t major = [[params objectAtIndex:0]  longLongValue];
        int64_t minor = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_protocol_version_new(major, minor, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[majorVal, minorVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_publicKeyFromBech32:(nonnull NSString *)bech32StrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bech32StrVal, CharPtr* error) {
        RPtr result;
        CharPtr bech32Str = [bech32StrVal  charPtr];
        return csl_bridge_public_key_from_bech32(bech32Str, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bech32StrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeyToBech32:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_public_key_to_bech32(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeyAsBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_public_key_as_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_public_key_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeyVerify:(nonnull NSString *)selfPtr withData:(nonnull NSString *)dataVal withSignature:(nonnull NSString *)signaturePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        NSData* dataData = [NSData fromBase64:[params objectAtIndex:1]];
        RPtr signature = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_public_key_verify(self, (uint8_t*)dataData.bytes, dataData.length, signature, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, dataVal, signaturePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeyHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_public_key_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_public_key_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_public_key_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_publicKeysNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_public_keys_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeysSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_public_keys_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeysGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_public_keys_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_publicKeysAdd:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        csl_bridge_public_keys_add(self, key, error);
        return nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_redeemerToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_redeemer_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_redeemer_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_redeemer_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTag:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_tag(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerIndex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_index(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerExUnits:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_ex_units(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerNew:(nonnull NSString *)tagPtr withIndex:(nonnull NSString *)indexPtr withData:(nonnull NSString *)dataPtr withExUnits:(nonnull NSString *)exUnitsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr tag = [[params objectAtIndex:0]  rPtr];
        RPtr index = [[params objectAtIndex:1]  rPtr];
        RPtr data = [[params objectAtIndex:2]  rPtr];
        RPtr exUnits = [[params objectAtIndex:3]  rPtr];
        return csl_bridge_redeemer_new(tag, index, data, exUnits, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[tagPtr, indexPtr, dataPtr, exUnitsPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_redeemerTagToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_tag_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_redeemer_tag_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_tag_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_redeemer_tag_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_tag_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_redeemer_tag_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagNewSpend:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_redeemer_tag_new_spend(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagNewMint:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_redeemer_tag_new_mint(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagNewCert:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_redeemer_tag_new_cert(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagNewReward:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_redeemer_tag_new_reward(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagNewVote:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_redeemer_tag_new_vote(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagNewVotingProposal:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_redeemer_tag_new_voting_proposal(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemerTagKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemer_tag_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_redeemersToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemers_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_redeemers_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemers_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_redeemers_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemers_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_redeemers_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_redeemers_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemers_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_redeemers_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_redeemers_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersGetContainerType:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemers_get_container_type(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_redeemersTotalExUnits:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_redeemers_total_ex_units(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_relayToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relay_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_relay_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relay_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_relay_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relay_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_relay_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayNewSingleHostAddr:(nonnull NSString *)singleHostAddrPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* singleHostAddrPtr, CharPtr* error) {
        RPtr result;
        RPtr singleHostAddr = [singleHostAddrPtr  rPtr];
        return csl_bridge_relay_new_single_host_addr(singleHostAddr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:singleHostAddrPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayNewSingleHostName:(nonnull NSString *)singleHostNamePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* singleHostNamePtr, CharPtr* error) {
        RPtr result;
        RPtr singleHostName = [singleHostNamePtr  rPtr];
        return csl_bridge_relay_new_single_host_name(singleHostName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:singleHostNamePtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayNewMultiHostName:(nonnull NSString *)multiHostNamePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* multiHostNamePtr, CharPtr* error) {
        RPtr result;
        RPtr multiHostName = [multiHostNamePtr  rPtr];
        return csl_bridge_relay_new_multi_host_name(multiHostName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:multiHostNamePtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relay_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayAsSingleHostAddr:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relay_as_single_host_addr(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayAsSingleHostName:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relay_as_single_host_name(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relayAsMultiHostName:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relay_as_multi_host_name(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_relaysToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relays_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_relays_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relays_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_relays_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relays_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_relays_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_relays_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_relays_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_relays_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_relaysAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_relays_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_rewardAddressNew:(nonnull NSNumber *)networkVal withPayment:(nonnull NSString *)paymentPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t network = [[params objectAtIndex:0]  longLongValue];
        RPtr payment = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_reward_address_new(network, payment, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[networkVal, paymentPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressPaymentCred:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_reward_address_payment_cred(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressToAddress:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_reward_address_to_address(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressFromAddress:(nonnull NSString *)addrPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addrPtr, CharPtr* error) {
        RPtr result;
        RPtr addr = [addrPtr  rPtr];
        return csl_bridge_reward_address_from_address(addr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addrPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_reward_address_network_id(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_rewardAddressesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_reward_addresses_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_reward_addresses_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_reward_addresses_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_reward_addresses_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_reward_addresses_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_reward_addresses_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_reward_addresses_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_reward_addresses_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_reward_addresses_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_rewardAddressesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_reward_addresses_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptAllToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_all_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAllFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_all_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAllToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_all_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAllFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_script_all_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAllToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_all_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAllFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_script_all_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAllNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_all_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAllNew:(nonnull NSString *)nativeScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* nativeScriptsPtr, CharPtr* error) {
        RPtr result;
        RPtr nativeScripts = [nativeScriptsPtr  rPtr];
        return csl_bridge_script_all_new(nativeScripts, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nativeScriptsPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptAnyToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_any_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAnyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_any_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAnyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_any_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAnyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_script_any_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAnyToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_any_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAnyFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_script_any_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAnyNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_any_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptAnyNew:(nonnull NSString *)nativeScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* nativeScriptsPtr, CharPtr* error) {
        RPtr result;
        RPtr nativeScripts = [nativeScriptsPtr  rPtr];
        return csl_bridge_script_any_new(nativeScripts, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nativeScriptsPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptDataHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_data_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptDataHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_data_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptDataHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_script_data_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptDataHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_script_data_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptDataHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_data_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptDataHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_script_data_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_script_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_script_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_script_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptHashesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_hashes_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_hashes_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_hashes_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_script_hashes_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_hashes_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_script_hashes_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_script_hashes_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_hashes_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_script_hashes_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptHashesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_script_hashes_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptNOfKToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_n_of_k_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_n_of_k_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_n_of_k_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_script_n_of_k_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_n_of_k_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_script_n_of_k_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKN:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_n_of_k_n(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_n_of_k_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptNOfKNew:(nonnull NSNumber *)nVal withNativeScripts:(nonnull NSString *)nativeScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t n = [[params objectAtIndex:0]  longLongValue];
        RPtr nativeScripts = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_script_n_of_k_new(n, nativeScripts, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[nVal, nativeScriptsPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_pubkey_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_pubkey_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_pubkey_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_script_pubkey_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_pubkey_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_script_pubkey_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyAddrKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_pubkey_addr_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptPubkeyNew:(nonnull NSString *)addrKeyhashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* addrKeyhashPtr, CharPtr* error) {
        RPtr result;
        RPtr addrKeyhash = [addrKeyhashPtr  rPtr];
        return csl_bridge_script_pubkey_new(addrKeyhash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:addrKeyhashPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_scriptRefToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_script_ref_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_script_ref_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_script_ref_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefNewNativeScript:(nonnull NSString *)nativeScriptPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* nativeScriptPtr, CharPtr* error) {
        RPtr result;
        RPtr nativeScript = [nativeScriptPtr  rPtr];
        return csl_bridge_script_ref_new_native_script(nativeScript, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nativeScriptPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefNewPlutusScript:(nonnull NSString *)plutusScriptPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* plutusScriptPtr, CharPtr* error) {
        RPtr result;
        RPtr plutusScript = [plutusScriptPtr  rPtr];
        return csl_bridge_script_ref_new_plutus_script(plutusScript, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:plutusScriptPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefIsNativeScript:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_is_native_script(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefIsPlutusScript:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_is_plutus_script(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefNativeScript:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_native_script(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefPlutusScript:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_plutus_script(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_scriptRefToUnwrappedBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_script_ref_to_unwrapped_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_singleHostAddrToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_addr_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_single_host_addr_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_addr_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_single_host_addr_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_addr_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_single_host_addr_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrPort:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_addr_port(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrIpv4:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_addr_ipv4(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrIpv6:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_addr_ipv6(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_single_host_addr_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNewWithPort:(nonnull NSNumber *)portVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSNumber* portVal, CharPtr* error) {
        RPtr result;
        int64_t port = [portVal  longLongValue];
        return csl_bridge_single_host_addr_new_with_port(port, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:portVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNewWithIpv4:(nonnull NSString *)ipv4Ptr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* ipv4Ptr, CharPtr* error) {
        RPtr result;
        RPtr ipv4 = [ipv4Ptr  rPtr];
        return csl_bridge_single_host_addr_new_with_ipv4(ipv4, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:ipv4Ptr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNewWithPortIpv4:(nonnull NSNumber *)portVal withIpv4:(nonnull NSString *)ipv4Ptr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t port = [[params objectAtIndex:0]  longLongValue];
        RPtr ipv4 = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_single_host_addr_new_with_port_ipv4(port, ipv4, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[portVal, ipv4Ptr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNewWithIpv6:(nonnull NSString *)ipv6Ptr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* ipv6Ptr, CharPtr* error) {
        RPtr result;
        RPtr ipv6 = [ipv6Ptr  rPtr];
        return csl_bridge_single_host_addr_new_with_ipv6(ipv6, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:ipv6Ptr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNewWithPortIpv6:(nonnull NSNumber *)portVal withIpv6:(nonnull NSString *)ipv6Ptr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t port = [[params objectAtIndex:0]  longLongValue];
        RPtr ipv6 = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_single_host_addr_new_with_port_ipv6(port, ipv6, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[portVal, ipv6Ptr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNewWithIpv4Ipv6:(nonnull NSString *)ipv4Ptr withIpv6:(nonnull NSString *)ipv6Ptr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr ipv4 = [[params objectAtIndex:0]  rPtr];
        RPtr ipv6 = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_single_host_addr_new_with_ipv4_ipv6(ipv4, ipv6, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[ipv4Ptr, ipv6Ptr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostAddrNewWithPortIpv4Ipv6:(nonnull NSNumber *)portVal withIpv4:(nonnull NSString *)ipv4Ptr withIpv6:(nonnull NSString *)ipv6Ptr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t port = [[params objectAtIndex:0]  longLongValue];
        RPtr ipv4 = [[params objectAtIndex:1]  rPtr];
        RPtr ipv6 = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_single_host_addr_new_with_port_ipv4_ipv6(port, ipv4, ipv6, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[portVal, ipv4Ptr, ipv6Ptr] andResolve:resolve orReject:reject];
}



RCT_EXPORT_METHOD(csl_bridge_singleHostNameToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_name_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_single_host_name_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_name_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_single_host_name_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_name_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_single_host_name_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNamePort:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_name_port(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameDnsName:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_single_host_name_dns_name(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameNew:(nonnull NSString *)dnsNamePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* dnsNamePtr, CharPtr* error) {
        RPtr result;
        RPtr dnsName = [dnsNamePtr  rPtr];
        return csl_bridge_single_host_name_new(dnsName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:dnsNamePtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_singleHostNameNewWithPort:(nonnull NSNumber *)portVal withDnsName:(nonnull NSString *)dnsNamePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t port = [[params objectAtIndex:0]  longLongValue];
        RPtr dnsName = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_single_host_name_new_with_port(port, dnsName, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[portVal, dnsNamePtr] andResolve:resolve orReject:reject];
}



RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_and_vote_delegation_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_stake_and_vote_delegation_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_and_vote_delegation_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_stake_and_vote_delegation_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_and_vote_delegation_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_stake_and_vote_delegation_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_and_vote_delegation_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationPoolKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_and_vote_delegation_pool_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationDrep:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_and_vote_delegation_drep(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationNew:(nonnull NSString *)stakeCredentialPtr withPoolKeyhash:(nonnull NSString *)poolKeyhashPtr withDrep:(nonnull NSString *)drepPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr poolKeyhash = [[params objectAtIndex:1]  rPtr];
        RPtr drep = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_stake_and_vote_delegation_new(stakeCredential, poolKeyhash, drep, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, poolKeyhashPtr, drepPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeAndVoteDelegationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_and_vote_delegation_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_stakeDelegationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_delegation_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_stake_delegation_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_delegation_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_stake_delegation_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_delegation_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_stake_delegation_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_delegation_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationPoolKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_delegation_pool_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationNew:(nonnull NSString *)stakeCredentialPtr withPoolKeyhash:(nonnull NSString *)poolKeyhashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr poolKeyhash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_stake_delegation_new(stakeCredential, poolKeyhash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, poolKeyhashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDelegationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_delegation_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_deregistration_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_stake_deregistration_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_deregistration_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_stake_deregistration_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_deregistration_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_stake_deregistration_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_deregistration_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_deregistration_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationNew:(nonnull NSString *)stakeCredentialPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeCredentialPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [stakeCredentialPtr  rPtr];
        return csl_bridge_stake_deregistration_new(stakeCredential, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeCredentialPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationNewWithExplicitRefund:(nonnull NSString *)stakeCredentialPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_stake_deregistration_new_with_explicit_refund(stakeCredential, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeDeregistrationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_deregistration_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_stake_registration_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_stake_registration_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_stake_registration_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationNew:(nonnull NSString *)stakeCredentialPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* stakeCredentialPtr, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [stakeCredentialPtr  rPtr];
        return csl_bridge_stake_registration_new(stakeCredential, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:stakeCredentialPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationNewWithExplicitDeposit:(nonnull NSString *)stakeCredentialPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_stake_registration_new_with_explicit_deposit(stakeCredential, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_and_delegation_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_stake_registration_and_delegation_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_and_delegation_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_stake_registration_and_delegation_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_and_delegation_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_stake_registration_and_delegation_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_and_delegation_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationPoolKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_and_delegation_pool_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_and_delegation_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationNew:(nonnull NSString *)stakeCredentialPtr withPoolKeyhash:(nonnull NSString *)poolKeyhashPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr poolKeyhash = [[params objectAtIndex:1]  rPtr];
        RPtr coin = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_stake_registration_and_delegation_new(stakeCredential, poolKeyhash, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, poolKeyhashPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeRegistrationAndDelegationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_registration_and_delegation_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_stake_vote_registration_and_delegation_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_stake_vote_registration_and_delegation_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_stake_vote_registration_and_delegation_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationPoolKeyhash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_pool_keyhash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationDrep:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_drep(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationNew:(nonnull NSString *)stakeCredentialPtr withPoolKeyhash:(nonnull NSString *)poolKeyhashPtr withDrep:(nonnull NSString *)drepPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr poolKeyhash = [[params objectAtIndex:1]  rPtr];
        RPtr drep = [[params objectAtIndex:2]  rPtr];
        RPtr coin = [[params objectAtIndex:3]  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_new(stakeCredential, poolKeyhash, drep, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, poolKeyhashPtr, drepPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stakeVoteRegistrationAndDelegationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_stake_vote_registration_and_delegation_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_stringsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_strings_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stringsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_strings_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stringsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_strings_get(self, index, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_stringsAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr elem = [[params objectAtIndex:1]  charPtr];
        csl_bridge_strings_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_timelockExpiryToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_expiry_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpiryFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_timelock_expiry_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpiryToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_expiry_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpiryFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_timelock_expiry_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpiryToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_expiry_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpiryFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_timelock_expiry_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpirySlot:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_expiry_slot(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpirySlotBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_expiry_slot_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpiryNew:(nonnull NSNumber *)slotVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSNumber* slotVal, CharPtr* error) {
        RPtr result;
        int64_t slot = [slotVal  longLongValue];
        return csl_bridge_timelock_expiry_new(slot, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:slotVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockExpiryNewTimelockexpiry:(nonnull NSString *)slotPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* slotPtr, CharPtr* error) {
        RPtr result;
        RPtr slot = [slotPtr  rPtr];
        return csl_bridge_timelock_expiry_new_timelockexpiry(slot, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:slotPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_timelockStartToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_start_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_timelock_start_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_start_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_timelock_start_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_start_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_timelock_start_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartSlot:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_start_slot(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartSlotBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_timelock_start_slot_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartNew:(nonnull NSNumber *)slotVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSNumber* slotVal, CharPtr* error) {
        RPtr result;
        int64_t slot = [slotVal  longLongValue];
        return csl_bridge_timelock_start_new(slot, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:slotVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_timelockStartNewTimelockstart:(nonnull NSString *)slotPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* slotPtr, CharPtr* error) {
        RPtr result;
        RPtr slot = [slotPtr  rPtr];
        return csl_bridge_timelock_start_new_timelockstart(slot, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:slotPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBody:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSet:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionIsValid:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_is_valid(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionAuxiliaryData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_auxiliary_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionSetIsValid:(nonnull NSString *)selfPtr withValid:(nonnull NSNumber *)validVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        BOOL valid = [[params objectAtIndex:1]  boolValue];
        csl_bridge_transaction_set_is_valid(self, valid, error);
        return nil;
    }] exec:@[selfPtr, validVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionNew:(nonnull NSString *)bodyPtr withWitnessSet:(nonnull NSString *)witnessSetPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr body = [[params objectAtIndex:0]  rPtr];
        RPtr witnessSet = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_new(body, witnessSet, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[bodyPtr, witnessSetPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionNewWithAuxiliaryData:(nonnull NSString *)bodyPtr withWitnessSet:(nonnull NSString *)witnessSetPtr withAuxiliaryData:(nonnull NSString *)auxiliaryDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr body = [[params objectAtIndex:0]  rPtr];
        RPtr witnessSet = [[params objectAtIndex:1]  rPtr];
        RPtr auxiliaryData = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_transaction_new_with_auxiliary_data(body, witnessSet, auxiliaryData, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[bodyPtr, witnessSetPtr, auxiliaryDataPtr] andResolve:resolve orReject:reject];
}



RCT_EXPORT_METHOD(csl_bridge_transactionBatchLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_batch_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBatchGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_batch_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionBatchListLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_batch_list_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBatchListGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_batch_list_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionBodiesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_bodies_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_bodies_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_bodies_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_bodies_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_bodies_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_bodies_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_bodies_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_bodies_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_bodies_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodiesAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_bodies_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionBodyToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_body_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_body_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_body_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyOutputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_outputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyFee:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_fee(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyTtl:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_ttl(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyTtlBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_ttl_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetTtl:(nonnull NSString *)selfPtr withTtl:(nonnull NSString *)ttlPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr ttl = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_ttl(self, ttl, error);
        return nil;
    }] exec:@[selfPtr, ttlPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyRemoveTtl:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_body_remove_ttl(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetCerts:(nonnull NSString *)selfPtr withCerts:(nonnull NSString *)certsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr certs = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_certs(self, certs, error);
        return nil;
    }] exec:@[selfPtr, certsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyCerts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_certs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetWithdrawals:(nonnull NSString *)selfPtr withWithdrawals:(nonnull NSString *)withdrawalsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr withdrawals = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_withdrawals(self, withdrawals, error);
        return nil;
    }] exec:@[selfPtr, withdrawalsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyWithdrawals:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_withdrawals(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetUpdate:(nonnull NSString *)selfPtr withUpdate:(nonnull NSString *)updatePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr update = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_update(self, update, error);
        return nil;
    }] exec:@[selfPtr, updatePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyUpdate:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_update(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetAuxiliaryDataHash:(nonnull NSString *)selfPtr withAuxiliaryDataHash:(nonnull NSString *)auxiliaryDataHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr auxiliaryDataHash = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_auxiliary_data_hash(self, auxiliaryDataHash, error);
        return nil;
    }] exec:@[selfPtr, auxiliaryDataHashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyAuxiliaryDataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_auxiliary_data_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetValidityStartInterval:(nonnull NSString *)selfPtr withValidityStartInterval:(nonnull NSNumber *)validityStartIntervalVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t validityStartInterval = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_transaction_body_set_validity_start_interval(self, validityStartInterval, error);
        return nil;
    }] exec:@[selfPtr, validityStartIntervalVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetValidityStartIntervalBignum:(nonnull NSString *)selfPtr withValidityStartInterval:(nonnull NSString *)validityStartIntervalPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr validityStartInterval = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_validity_start_interval_bignum(self, validityStartInterval, error);
        return nil;
    }] exec:@[selfPtr, validityStartIntervalPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyValidityStartIntervalBignum:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_validity_start_interval_bignum(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyValidityStartInterval:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_validity_start_interval(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetMint:(nonnull NSString *)selfPtr withMint:(nonnull NSString *)mintPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr mint = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_mint(self, mint, error);
        return nil;
    }] exec:@[selfPtr, mintPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyMint:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_mint(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetReferenceInputs:(nonnull NSString *)selfPtr withReferenceInputs:(nonnull NSString *)referenceInputsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr referenceInputs = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_reference_inputs(self, referenceInputs, error);
        return nil;
    }] exec:@[selfPtr, referenceInputsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyReferenceInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_reference_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetScriptDataHash:(nonnull NSString *)selfPtr withScriptDataHash:(nonnull NSString *)scriptDataHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr scriptDataHash = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_script_data_hash(self, scriptDataHash, error);
        return nil;
    }] exec:@[selfPtr, scriptDataHashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyScriptDataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_script_data_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetCollateral:(nonnull NSString *)selfPtr withCollateral:(nonnull NSString *)collateralPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr collateral = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_collateral(self, collateral, error);
        return nil;
    }] exec:@[selfPtr, collateralPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyCollateral:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_collateral(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetRequiredSigners:(nonnull NSString *)selfPtr withRequiredSigners:(nonnull NSString *)requiredSignersPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr requiredSigners = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_required_signers(self, requiredSigners, error);
        return nil;
    }] exec:@[selfPtr, requiredSignersPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyRequiredSigners:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_required_signers(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetNetworkId:(nonnull NSString *)selfPtr withNetworkId:(nonnull NSString *)networkIdPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr networkId = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_network_id(self, networkId, error);
        return nil;
    }] exec:@[selfPtr, networkIdPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyNetworkId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_network_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetCollateralReturn:(nonnull NSString *)selfPtr withCollateralReturn:(nonnull NSString *)collateralReturnPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr collateralReturn = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_collateral_return(self, collateralReturn, error);
        return nil;
    }] exec:@[selfPtr, collateralReturnPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyCollateralReturn:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_collateral_return(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetTotalCollateral:(nonnull NSString *)selfPtr withTotalCollateral:(nonnull NSString *)totalCollateralPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr totalCollateral = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_total_collateral(self, totalCollateral, error);
        return nil;
    }] exec:@[selfPtr, totalCollateralPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyTotalCollateral:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_total_collateral(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetVotingProcedures:(nonnull NSString *)selfPtr withVotingProcedures:(nonnull NSString *)votingProceduresPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr votingProcedures = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_voting_procedures(self, votingProcedures, error);
        return nil;
    }] exec:@[selfPtr, votingProceduresPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyVotingProcedures:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_voting_procedures(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetVotingProposals:(nonnull NSString *)selfPtr withVotingProposals:(nonnull NSString *)votingProposalsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr votingProposals = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_voting_proposals(self, votingProposals, error);
        return nil;
    }] exec:@[selfPtr, votingProposalsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyVotingProposals:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_voting_proposals(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetDonation:(nonnull NSString *)selfPtr withDonation:(nonnull NSString *)donationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr donation = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_donation(self, donation, error);
        return nil;
    }] exec:@[selfPtr, donationPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyDonation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_donation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodySetCurrentTreasuryValue:(nonnull NSString *)selfPtr withCurrentTreasuryValue:(nonnull NSString *)currentTreasuryValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr currentTreasuryValue = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_body_set_current_treasury_value(self, currentTreasuryValue, error);
        return nil;
    }] exec:@[selfPtr, currentTreasuryValuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyCurrentTreasuryValue:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_body_current_treasury_value(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyNew:(nonnull NSString *)inputsPtr withOutputs:(nonnull NSString *)outputsPtr withFee:(nonnull NSString *)feePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr inputs = [[params objectAtIndex:0]  rPtr];
        RPtr outputs = [[params objectAtIndex:1]  rPtr];
        RPtr fee = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_transaction_body_new(inputs, outputs, fee, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[inputsPtr, outputsPtr, feePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBodyNewWithTtl:(nonnull NSString *)inputsPtr withOutputs:(nonnull NSString *)outputsPtr withFee:(nonnull NSString *)feePtr withTtl:(nonnull NSNumber *)ttlVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr inputs = [[params objectAtIndex:0]  rPtr];
        RPtr outputs = [[params objectAtIndex:1]  rPtr];
        RPtr fee = [[params objectAtIndex:2]  rPtr];
        int64_t ttl = [[params objectAtIndex:3]  longLongValue];
        return csl_bridge_transaction_body_new_with_ttl(inputs, outputs, fee, ttl, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[inputsPtr, outputsPtr, feePtr, ttlVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionBodyNewTxBody:(nonnull NSString *)inputsPtr withOutputs:(nonnull NSString *)outputsPtr withFee:(nonnull NSString *)feePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr inputs = [[params objectAtIndex:0]  rPtr];
        RPtr outputs = [[params objectAtIndex:1]  rPtr];
        RPtr fee = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_transaction_body_new_tx_body(inputs, outputs, fee, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[inputsPtr, outputsPtr, feePtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddInputsFrom:(nonnull NSString *)selfPtr withInputs:(nonnull NSString *)inputsPtr withStrategy:(nonnull NSNumber *)strategyVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr inputs = [[params objectAtIndex:1]  rPtr];
        int32_t strategy = [[params objectAtIndex:2]  integerValue];
        csl_bridge_transaction_builder_add_inputs_from(self, inputs, strategy, error);
        return nil;
    }] exec:@[selfPtr, inputsPtr, strategyVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetInputs:(nonnull NSString *)selfPtr withInputs:(nonnull NSString *)inputsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr inputs = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_inputs(self, inputs, error);
        return nil;
    }] exec:@[selfPtr, inputsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetCollateral:(nonnull NSString *)selfPtr withCollateral:(nonnull NSString *)collateralPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr collateral = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_collateral(self, collateral, error);
        return nil;
    }] exec:@[selfPtr, collateralPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetCollateralReturn:(nonnull NSString *)selfPtr withCollateralReturn:(nonnull NSString *)collateralReturnPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr collateralReturn = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_collateral_return(self, collateralReturn, error);
        return nil;
    }] exec:@[selfPtr, collateralReturnPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveCollateralReturn:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_collateral_return(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetCollateralReturnAndTotal:(nonnull NSString *)selfPtr withCollateralReturn:(nonnull NSString *)collateralReturnPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr collateralReturn = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_collateral_return_and_total(self, collateralReturn, error);
        return nil;
    }] exec:@[selfPtr, collateralReturnPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetTotalCollateral:(nonnull NSString *)selfPtr withTotalCollateral:(nonnull NSString *)totalCollateralPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr totalCollateral = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_total_collateral(self, totalCollateral, error);
        return nil;
    }] exec:@[selfPtr, totalCollateralPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveTotalCollateral:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_total_collateral(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetTotalCollateralAndReturn:(nonnull NSString *)selfPtr withTotalCollateral:(nonnull NSString *)totalCollateralPtr withReturnAddress:(nonnull NSString *)returnAddressPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr totalCollateral = [[params objectAtIndex:1]  rPtr];
        RPtr returnAddress = [[params objectAtIndex:2]  rPtr];
        csl_bridge_transaction_builder_set_total_collateral_and_return(self, totalCollateral, returnAddress, error);
        return nil;
    }] exec:@[selfPtr, totalCollateralPtr, returnAddressPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddReferenceInput:(nonnull NSString *)selfPtr withReferenceInput:(nonnull NSString *)referenceInputPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr referenceInput = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_add_reference_input(self, referenceInput, error);
        return nil;
    }] exec:@[selfPtr, referenceInputPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddScriptReferenceInput:(nonnull NSString *)selfPtr withReferenceInput:(nonnull NSString *)referenceInputPtr withScriptSize:(nonnull NSNumber *)scriptSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr referenceInput = [[params objectAtIndex:1]  rPtr];
        int64_t scriptSize = [[params objectAtIndex:2]  longLongValue];
        csl_bridge_transaction_builder_add_script_reference_input(self, referenceInput, scriptSize, error);
        return nil;
    }] exec:@[selfPtr, referenceInputPtr, scriptSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddKeyInput:(nonnull NSString *)selfPtr withHash:(nonnull NSString *)hashPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr hash = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_transaction_builder_add_key_input(self, hash, input, amount, error);
        return nil;
    }] exec:@[selfPtr, hashPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddNativeScriptInput:(nonnull NSString *)selfPtr withScript:(nonnull NSString *)scriptPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr script = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_transaction_builder_add_native_script_input(self, script, input, amount, error);
        return nil;
    }] exec:@[selfPtr, scriptPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddPlutusScriptInput:(nonnull NSString *)selfPtr withWitness:(nonnull NSString *)witnessPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr witness = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_transaction_builder_add_plutus_script_input(self, witness, input, amount, error);
        return nil;
    }] exec:@[selfPtr, witnessPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddBootstrapInput:(nonnull NSString *)selfPtr withHash:(nonnull NSString *)hashPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr hash = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_transaction_builder_add_bootstrap_input(self, hash, input, amount, error);
        return nil;
    }] exec:@[selfPtr, hashPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddRegularInput:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_transaction_builder_add_regular_input(self, address, input, amount, error);
        return nil;
    }] exec:@[selfPtr, addressPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddInputsFromAndChange:(nonnull NSString *)selfPtr withInputs:(nonnull NSString *)inputsPtr withStrategy:(nonnull NSNumber *)strategyVal withChangeConfig:(nonnull NSString *)changeConfigPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr inputs = [[params objectAtIndex:1]  rPtr];
        int32_t strategy = [[params objectAtIndex:2]  integerValue];
        RPtr changeConfig = [[params objectAtIndex:3]  rPtr];
        return csl_bridge_transaction_builder_add_inputs_from_and_change(self, inputs, strategy, changeConfig, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, inputsPtr, strategyVal, changeConfigPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddInputsFromAndChangeWithCollateralReturn:(nonnull NSString *)selfPtr withInputs:(nonnull NSString *)inputsPtr withStrategy:(nonnull NSNumber *)strategyVal withChangeConfig:(nonnull NSString *)changeConfigPtr withCollateralPercentage:(nonnull NSString *)collateralPercentagePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr inputs = [[params objectAtIndex:1]  rPtr];
        int32_t strategy = [[params objectAtIndex:2]  integerValue];
        RPtr changeConfig = [[params objectAtIndex:3]  rPtr];
        RPtr collateralPercentage = [[params objectAtIndex:4]  rPtr];
        csl_bridge_transaction_builder_add_inputs_from_and_change_with_collateral_return(self, inputs, strategy, changeConfig, collateralPercentage, error);
        return nil;
    }] exec:@[selfPtr, inputsPtr, strategyVal, changeConfigPtr, collateralPercentagePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetNativeInputScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_native_input_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetPlutusInputScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_plutus_input_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderFeeForInput:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        return csl_bridge_transaction_builder_fee_for_input(self, address, input, amount, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, addressPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddOutput:(nonnull NSString *)selfPtr withOutput:(nonnull NSString *)outputPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr output = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_add_output(self, output, error);
        return nil;
    }] exec:@[selfPtr, outputPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderFeeForOutput:(nonnull NSString *)selfPtr withOutput:(nonnull NSString *)outputPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr output = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_fee_for_output(self, output, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, outputPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetFee:(nonnull NSString *)selfPtr withFee:(nonnull NSString *)feePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr fee = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_fee(self, fee, error);
        return nil;
    }] exec:@[selfPtr, feePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetTtl:(nonnull NSString *)selfPtr withTtl:(nonnull NSNumber *)ttlVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t ttl = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_transaction_builder_set_ttl(self, ttl, error);
        return nil;
    }] exec:@[selfPtr, ttlVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetTtlBignum:(nonnull NSString *)selfPtr withTtl:(nonnull NSString *)ttlPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr ttl = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_ttl_bignum(self, ttl, error);
        return nil;
    }] exec:@[selfPtr, ttlPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveTtl:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_ttl(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetValidityStartInterval:(nonnull NSString *)selfPtr withValidityStartInterval:(nonnull NSNumber *)validityStartIntervalVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t validityStartInterval = [[params objectAtIndex:1]  longLongValue];
        csl_bridge_transaction_builder_set_validity_start_interval(self, validityStartInterval, error);
        return nil;
    }] exec:@[selfPtr, validityStartIntervalVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetValidityStartIntervalBignum:(nonnull NSString *)selfPtr withValidityStartInterval:(nonnull NSString *)validityStartIntervalPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr validityStartInterval = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_validity_start_interval_bignum(self, validityStartInterval, error);
        return nil;
    }] exec:@[selfPtr, validityStartIntervalPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveValidityStartInterval:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_validity_start_interval(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetCerts:(nonnull NSString *)selfPtr withCerts:(nonnull NSString *)certsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr certs = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_certs(self, certs, error);
        return nil;
    }] exec:@[selfPtr, certsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveCerts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_certs(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetCertsBuilder:(nonnull NSString *)selfPtr withCerts:(nonnull NSString *)certsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr certs = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_certs_builder(self, certs, error);
        return nil;
    }] exec:@[selfPtr, certsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetWithdrawals:(nonnull NSString *)selfPtr withWithdrawals:(nonnull NSString *)withdrawalsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr withdrawals = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_withdrawals(self, withdrawals, error);
        return nil;
    }] exec:@[selfPtr, withdrawalsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetWithdrawalsBuilder:(nonnull NSString *)selfPtr withWithdrawals:(nonnull NSString *)withdrawalsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr withdrawals = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_withdrawals_builder(self, withdrawals, error);
        return nil;
    }] exec:@[selfPtr, withdrawalsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetVotingBuilder:(nonnull NSString *)selfPtr withVotingBuilder:(nonnull NSString *)votingBuilderPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr votingBuilder = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_voting_builder(self, votingBuilder, error);
        return nil;
    }] exec:@[selfPtr, votingBuilderPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetVotingProposalBuilder:(nonnull NSString *)selfPtr withVotingProposalBuilder:(nonnull NSString *)votingProposalBuilderPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr votingProposalBuilder = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_voting_proposal_builder(self, votingProposalBuilder, error);
        return nil;
    }] exec:@[selfPtr, votingProposalBuilderPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveWithdrawals:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_withdrawals(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetAuxiliaryData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_auxiliary_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetAuxiliaryData:(nonnull NSString *)selfPtr withAuxiliaryData:(nonnull NSString *)auxiliaryDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr auxiliaryData = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_auxiliary_data(self, auxiliaryData, error);
        return nil;
    }] exec:@[selfPtr, auxiliaryDataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveAuxiliaryData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_auxiliary_data(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetMetadata:(nonnull NSString *)selfPtr withMetadata:(nonnull NSString *)metadataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr metadata = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_metadata(self, metadata, error);
        return nil;
    }] exec:@[selfPtr, metadataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddMetadatum:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withVal:(nonnull NSString *)valPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr val = [[params objectAtIndex:2]  rPtr];
        csl_bridge_transaction_builder_add_metadatum(self, key, val, error);
        return nil;
    }] exec:@[selfPtr, keyPtr, valPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddJsonMetadatum:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withVal:(nonnull NSString *)valVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        CharPtr val = [[params objectAtIndex:2]  charPtr];
        csl_bridge_transaction_builder_add_json_metadatum(self, key, val, error);
        return nil;
    }] exec:@[selfPtr, keyPtr, valVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddJsonMetadatumWithSchema:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withVal:(nonnull NSString *)valVal withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        CharPtr val = [[params objectAtIndex:2]  charPtr];
        int32_t schema = [[params objectAtIndex:3]  integerValue];
        csl_bridge_transaction_builder_add_json_metadatum_with_schema(self, key, val, schema, error);
        return nil;
    }] exec:@[selfPtr, keyPtr, valVal, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetMintBuilder:(nonnull NSString *)selfPtr withMintBuilder:(nonnull NSString *)mintBuilderPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr mintBuilder = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_mint_builder(self, mintBuilder, error);
        return nil;
    }] exec:@[selfPtr, mintBuilderPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveMintBuilder:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_mint_builder(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetMintBuilder:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_mint_builder(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetMint:(nonnull NSString *)selfPtr withMint:(nonnull NSString *)mintPtr withMintScripts:(nonnull NSString *)mintScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr mint = [[params objectAtIndex:1]  rPtr];
        RPtr mintScripts = [[params objectAtIndex:2]  rPtr];
        csl_bridge_transaction_builder_set_mint(self, mint, mintScripts, error);
        return nil;
    }] exec:@[selfPtr, mintPtr, mintScriptsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetMint:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_mint(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetMintScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_mint_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetMintAsset:(nonnull NSString *)selfPtr withPolicyScript:(nonnull NSString *)policyScriptPtr withMintAssets:(nonnull NSString *)mintAssetsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyScript = [[params objectAtIndex:1]  rPtr];
        RPtr mintAssets = [[params objectAtIndex:2]  rPtr];
        csl_bridge_transaction_builder_set_mint_asset(self, policyScript, mintAssets, error);
        return nil;
    }] exec:@[selfPtr, policyScriptPtr, mintAssetsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddMintAsset:(nonnull NSString *)selfPtr withPolicyScript:(nonnull NSString *)policyScriptPtr withAssetName:(nonnull NSString *)assetNamePtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyScript = [[params objectAtIndex:1]  rPtr];
        RPtr assetName = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_transaction_builder_add_mint_asset(self, policyScript, assetName, amount, error);
        return nil;
    }] exec:@[selfPtr, policyScriptPtr, assetNamePtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddMintAssetAndOutput:(nonnull NSString *)selfPtr withPolicyScript:(nonnull NSString *)policyScriptPtr withAssetName:(nonnull NSString *)assetNamePtr withAmount:(nonnull NSString *)amountPtr withOutputBuilder:(nonnull NSString *)outputBuilderPtr withOutputCoin:(nonnull NSString *)outputCoinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyScript = [[params objectAtIndex:1]  rPtr];
        RPtr assetName = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        RPtr outputBuilder = [[params objectAtIndex:4]  rPtr];
        RPtr outputCoin = [[params objectAtIndex:5]  rPtr];
        csl_bridge_transaction_builder_add_mint_asset_and_output(self, policyScript, assetName, amount, outputBuilder, outputCoin, error);
        return nil;
    }] exec:@[selfPtr, policyScriptPtr, assetNamePtr, amountPtr, outputBuilderPtr, outputCoinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddMintAssetAndOutputMinRequiredCoin:(nonnull NSString *)selfPtr withPolicyScript:(nonnull NSString *)policyScriptPtr withAssetName:(nonnull NSString *)assetNamePtr withAmount:(nonnull NSString *)amountPtr withOutputBuilder:(nonnull NSString *)outputBuilderPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr policyScript = [[params objectAtIndex:1]  rPtr];
        RPtr assetName = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        RPtr outputBuilder = [[params objectAtIndex:4]  rPtr];
        csl_bridge_transaction_builder_add_mint_asset_and_output_min_required_coin(self, policyScript, assetName, amount, outputBuilder, error);
        return nil;
    }] exec:@[selfPtr, policyScriptPtr, assetNamePtr, amountPtr, outputBuilderPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddExtraWitnessDatum:(nonnull NSString *)selfPtr withDatum:(nonnull NSString *)datumPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr datum = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_add_extra_witness_datum(self, datum, error);
        return nil;
    }] exec:@[selfPtr, datumPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetExtraWitnessDatums:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_extra_witness_datums(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetDonation:(nonnull NSString *)selfPtr withDonation:(nonnull NSString *)donationPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr donation = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_donation(self, donation, error);
        return nil;
    }] exec:@[selfPtr, donationPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetDonation:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_donation(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetCurrentTreasuryValue:(nonnull NSString *)selfPtr withCurrentTreasuryValue:(nonnull NSString *)currentTreasuryValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr currentTreasuryValue = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_current_treasury_value(self, currentTreasuryValue, error);
        return nil;
    }] exec:@[selfPtr, currentTreasuryValuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetCurrentTreasuryValue:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_current_treasury_value(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderNew:(nonnull NSString *)cfgPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* cfgPtr, CharPtr* error) {
        RPtr result;
        RPtr cfg = [cfgPtr  rPtr];
        return csl_bridge_transaction_builder_new(cfg, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:cfgPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetReferenceInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_reference_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetExplicitInput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_explicit_input(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetImplicitInput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_implicit_input(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetTotalInput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_total_input(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetTotalOutput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_total_output(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetExplicitOutput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_explicit_output(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetDeposit:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_deposit(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderGetFeeIfSet:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_get_fee_if_set(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddChangeIfNeeded:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_add_change_if_needed(self, address, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, addressPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddChangeIfNeededWithDatum:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withPlutusData:(nonnull NSString *)plutusDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr plutusData = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_transaction_builder_add_change_if_needed_with_datum(self, address, plutusData, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, addressPtr, plutusDataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderCalcScriptDataHash:(nonnull NSString *)selfPtr withCostModels:(nonnull NSString *)costModelsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr costModels = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_calc_script_data_hash(self, costModels, error);
        return nil;
    }] exec:@[selfPtr, costModelsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderSetScriptDataHash:(nonnull NSString *)selfPtr withHash:(nonnull NSString *)hashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr hash = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_set_script_data_hash(self, hash, error);
        return nil;
    }] exec:@[selfPtr, hashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderRemoveScriptDataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr self = [selfPtr  rPtr];
        csl_bridge_transaction_builder_remove_script_data_hash(self, error);
        return nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderAddRequiredSigner:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_builder_add_required_signer(self, key, error);
        return nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderFullSize:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_full_size(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderOutputSizes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_output_sizes(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderBuildTx:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_build_tx(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderBuildTxUnsafe:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_build_tx_unsafe(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderMinFee:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_min_fee(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}



RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_builder_config_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderFeeAlgo:(nonnull NSString *)selfPtr withFeeAlgo:(nonnull NSString *)feeAlgoPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr feeAlgo = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_config_builder_fee_algo(self, feeAlgo, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, feeAlgoPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderCoinsPerUtxoByte:(nonnull NSString *)selfPtr withCoinsPerUtxoByte:(nonnull NSString *)coinsPerUtxoBytePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr coinsPerUtxoByte = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_config_builder_coins_per_utxo_byte(self, coinsPerUtxoByte, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, coinsPerUtxoBytePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderExUnitPrices:(nonnull NSString *)selfPtr withExUnitPrices:(nonnull NSString *)exUnitPricesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr exUnitPrices = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_config_builder_ex_unit_prices(self, exUnitPrices, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, exUnitPricesPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderPoolDeposit:(nonnull NSString *)selfPtr withPoolDeposit:(nonnull NSString *)poolDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr poolDeposit = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_config_builder_pool_deposit(self, poolDeposit, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, poolDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderKeyDeposit:(nonnull NSString *)selfPtr withKeyDeposit:(nonnull NSString *)keyDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr keyDeposit = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_config_builder_key_deposit(self, keyDeposit, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderMaxValueSize:(nonnull NSString *)selfPtr withMaxValueSize:(nonnull NSNumber *)maxValueSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxValueSize = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_builder_config_builder_max_value_size(self, maxValueSize, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, maxValueSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderMaxTxSize:(nonnull NSString *)selfPtr withMaxTxSize:(nonnull NSNumber *)maxTxSizeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t maxTxSize = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_builder_config_builder_max_tx_size(self, maxTxSize, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, maxTxSizeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderRefScriptCoinsPerByte:(nonnull NSString *)selfPtr withRefScriptCoinsPerByte:(nonnull NSString *)refScriptCoinsPerBytePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr refScriptCoinsPerByte = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_builder_config_builder_ref_script_coins_per_byte(self, refScriptCoinsPerByte, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, refScriptCoinsPerBytePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderPreferPureChange:(nonnull NSString *)selfPtr withPreferPureChange:(nonnull NSNumber *)preferPureChangeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        BOOL preferPureChange = [[params objectAtIndex:1]  boolValue];
        return csl_bridge_transaction_builder_config_builder_prefer_pure_change(self, preferPureChange, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, preferPureChangeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderDeduplicateExplicitRefInputsWithRegularInputs:(nonnull NSString *)selfPtr withDeduplicateExplicitRefInputsWithRegularInputs:(nonnull NSNumber *)deduplicateExplicitRefInputsWithRegularInputsVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        BOOL deduplicateExplicitRefInputsWithRegularInputs = [[params objectAtIndex:1]  boolValue];
        return csl_bridge_transaction_builder_config_builder_deduplicate_explicit_ref_inputs_with_regular_inputs(self, deduplicateExplicitRefInputsWithRegularInputs, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, deduplicateExplicitRefInputsWithRegularInputsVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionBuilderConfigBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_builder_config_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_transaction_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_transaction_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_transaction_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionInputToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_input_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_input_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_input_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_input_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_input_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_input_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputTransactionId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_input_transaction_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputIndex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_input_index(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputNew:(nonnull NSString *)transactionIdPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr transactionId = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_input_new(transactionId, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[transactionIdPtr, indexVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionInputsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_inputs_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_inputs_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_inputs_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_inputs_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_inputs_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_inputs_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_inputs_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_inputs_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_inputs_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsAdd:(nonnull NSString *)selfPtr withInput:(nonnull NSString *)inputPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr input = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_inputs_add(self, input, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, inputPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionInputsToOption:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_inputs_to_option(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_metadatum_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_metadatum_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumNewMap:(nonnull NSString *)mapPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* mapPtr, CharPtr* error) {
        RPtr result;
        RPtr map = [mapPtr  rPtr];
        return csl_bridge_transaction_metadatum_new_map(map, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:mapPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumNewList:(nonnull NSString *)listPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* listPtr, CharPtr* error) {
        RPtr result;
        RPtr list = [listPtr  rPtr];
        return csl_bridge_transaction_metadatum_new_list(list, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:listPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumNewInt:(nonnull NSString *)intValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* intValuePtr, CharPtr* error) {
        RPtr result;
        RPtr intValue = [intValuePtr  rPtr];
        return csl_bridge_transaction_metadatum_new_int(intValue, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:intValuePtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumNewBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_metadatum_new_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumNewText:(nonnull NSString *)textVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* textVal, CharPtr* error) {
        RPtr result;
        CharPtr text = [textVal  charPtr];
        return csl_bridge_transaction_metadatum_new_text(text, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:textVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumAsMap:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_as_map(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumAsList:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_as_list(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumAsInt:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_as_int(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumAsBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_as_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumAsText:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_as_text(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_labels_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_metadatum_labels_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_labels_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_metadatum_labels_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_metadatum_labels_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_metadatum_labels_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_metadatum_labels_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionMetadatumLabelsAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_metadatum_labels_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionOutputToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_output_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_output_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_output_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputAddress:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_address(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputAmount:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_amount(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputDataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_data_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputPlutusData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_plutus_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputScriptRef:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_script_ref(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputSetScriptRef:(nonnull NSString *)selfPtr withScriptRef:(nonnull NSString *)scriptRefPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr scriptRef = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_output_set_script_ref(self, scriptRef, error);
        return nil;
    }] exec:@[selfPtr, scriptRefPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputSetPlutusData:(nonnull NSString *)selfPtr withData:(nonnull NSString *)dataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr data = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_output_set_plutus_data(self, data, error);
        return nil;
    }] exec:@[selfPtr, dataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputSetDataHash:(nonnull NSString *)selfPtr withDataHash:(nonnull NSString *)dataHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr dataHash = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_output_set_data_hash(self, dataHash, error);
        return nil;
    }] exec:@[selfPtr, dataHashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputHasPlutusData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_has_plutus_data(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputHasDataHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_has_data_hash(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputHasScriptRef:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_has_script_ref(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputNew:(nonnull NSString *)addressPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr address = [[params objectAtIndex:0]  rPtr];
        RPtr amount = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_output_new(address, amount, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[addressPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputSerializationFormat:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_serialization_format(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionOutputAmountBuilderWithValue:(nonnull NSString *)selfPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr amount = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_output_amount_builder_with_value(self, amount, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputAmountBuilderWithCoin:(nonnull NSString *)selfPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_output_amount_builder_with_coin(self, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputAmountBuilderWithCoinAndAsset:(nonnull NSString *)selfPtr withCoin:(nonnull NSString *)coinPtr withMultiasset:(nonnull NSString *)multiassetPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        RPtr multiasset = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_transaction_output_amount_builder_with_coin_and_asset(self, coin, multiasset, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, coinPtr, multiassetPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputAmountBuilderWithAssetAndMinRequiredCoinByUtxoCost:(nonnull NSString *)selfPtr withMultiasset:(nonnull NSString *)multiassetPtr withDataCost:(nonnull NSString *)dataCostPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr multiasset = [[params objectAtIndex:1]  rPtr];
        RPtr dataCost = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_transaction_output_amount_builder_with_asset_and_min_required_coin_by_utxo_cost(self, multiasset, dataCost, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, multiassetPtr, dataCostPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputAmountBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_amount_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionOutputBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_output_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputBuilderWithAddress:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_output_builder_with_address(self, address, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, addressPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputBuilderWithDataHash:(nonnull NSString *)selfPtr withDataHash:(nonnull NSString *)dataHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr dataHash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_output_builder_with_data_hash(self, dataHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, dataHashPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputBuilderWithPlutusData:(nonnull NSString *)selfPtr withData:(nonnull NSString *)dataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr data = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_output_builder_with_plutus_data(self, data, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, dataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputBuilderWithScriptRef:(nonnull NSString *)selfPtr withScriptRef:(nonnull NSString *)scriptRefPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr scriptRef = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_output_builder_with_script_ref(self, scriptRef, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, scriptRefPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputBuilderNext:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_output_builder_next(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionOutputsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_outputs_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_outputs_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_outputs_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_outputs_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_outputs_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_outputs_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_outputs_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_outputs_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_outputs_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionOutputsAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_outputs_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_unspent_output_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_unspent_output_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_unspent_output_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_unspent_output_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_unspent_output_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_unspent_output_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputNew:(nonnull NSString *)inputPtr withOutput:(nonnull NSString *)outputPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr input = [[params objectAtIndex:0]  rPtr];
        RPtr output = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_transaction_unspent_output_new(input, output, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[inputPtr, outputPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputInput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_unspent_output_input(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputOutput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_unspent_output_output(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_unspent_outputs_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_unspent_outputs_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_unspent_outputs_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_unspent_outputs_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_unspent_outputs_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionUnspentOutputsAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_unspent_outputs_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_witness_set_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_witness_set_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_witness_set_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetSetVkeys:(nonnull NSString *)selfPtr withVkeys:(nonnull NSString *)vkeysPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr vkeys = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_witness_set_set_vkeys(self, vkeys, error);
        return nil;
    }] exec:@[selfPtr, vkeysPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetVkeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_vkeys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetSetNativeScripts:(nonnull NSString *)selfPtr withNativeScripts:(nonnull NSString *)nativeScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr nativeScripts = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_witness_set_set_native_scripts(self, nativeScripts, error);
        return nil;
    }] exec:@[selfPtr, nativeScriptsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetSetBootstraps:(nonnull NSString *)selfPtr withBootstraps:(nonnull NSString *)bootstrapsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr bootstraps = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_witness_set_set_bootstraps(self, bootstraps, error);
        return nil;
    }] exec:@[selfPtr, bootstrapsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetBootstraps:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_bootstraps(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetSetPlutusScripts:(nonnull NSString *)selfPtr withPlutusScripts:(nonnull NSString *)plutusScriptsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr plutusScripts = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_witness_set_set_plutus_scripts(self, plutusScripts, error);
        return nil;
    }] exec:@[selfPtr, plutusScriptsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetPlutusScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_plutus_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetSetPlutusData:(nonnull NSString *)selfPtr withPlutusData:(nonnull NSString *)plutusDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr plutusData = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_witness_set_set_plutus_data(self, plutusData, error);
        return nil;
    }] exec:@[selfPtr, plutusDataPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetPlutusData:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_plutus_data(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetSetRedeemers:(nonnull NSString *)selfPtr withRedeemers:(nonnull NSString *)redeemersPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr redeemers = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_witness_set_set_redeemers(self, redeemers, error);
        return nil;
    }] exec:@[selfPtr, redeemersPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetRedeemers:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_set_redeemers(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_witness_set_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_sets_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_transaction_witness_sets_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_sets_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_transaction_witness_sets_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_sets_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_transaction_witness_sets_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_transaction_witness_sets_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_transaction_witness_sets_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_transaction_witness_sets_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_transactionWitnessSetsAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_transaction_witness_sets_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_treasury_withdrawals_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_treasury_withdrawals_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_treasury_withdrawals_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        csl_bridge_treasury_withdrawals_insert(self, key, value, error);
        return nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_action_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_treasury_withdrawals_action_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_action_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_treasury_withdrawals_action_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_action_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_treasury_withdrawals_action_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionWithdrawals:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_action_withdrawals(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionPolicyHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_treasury_withdrawals_action_policy_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionNew:(nonnull NSString *)withdrawalsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* withdrawalsPtr, CharPtr* error) {
        RPtr result;
        RPtr withdrawals = [withdrawalsPtr  rPtr];
        return csl_bridge_treasury_withdrawals_action_new(withdrawals, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:withdrawalsPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_treasuryWithdrawalsActionNewWithPolicyHash:(nonnull NSString *)withdrawalsPtr withPolicyHash:(nonnull NSString *)policyHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr withdrawals = [[params objectAtIndex:0]  rPtr];
        RPtr policyHash = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_treasury_withdrawals_action_new_with_policy_hash(withdrawals, policyHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[withdrawalsPtr, policyHashPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_txBuilderConstantsPlutusDefaultCostModels:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_tx_builder_constants_plutus_default_cost_models(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txBuilderConstantsPlutusAlonzoCostModels:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_tx_builder_constants_plutus_alonzo_cost_models(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txBuilderConstantsPlutusVasilCostModels:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_tx_builder_constants_plutus_vasil_cost_models(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txBuilderConstantsPlutusConwayCostModels:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_tx_builder_constants_plutus_conway_cost_models(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_tx_inputs_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderAddKeyInput:(nonnull NSString *)selfPtr withHash:(nonnull NSString *)hashPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr hash = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_tx_inputs_builder_add_key_input(self, hash, input, amount, error);
        return nil;
    }] exec:@[selfPtr, hashPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderAddNativeScriptInput:(nonnull NSString *)selfPtr withScript:(nonnull NSString *)scriptPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr script = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_tx_inputs_builder_add_native_script_input(self, script, input, amount, error);
        return nil;
    }] exec:@[selfPtr, scriptPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderAddPlutusScriptInput:(nonnull NSString *)selfPtr withWitness:(nonnull NSString *)witnessPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr witness = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_tx_inputs_builder_add_plutus_script_input(self, witness, input, amount, error);
        return nil;
    }] exec:@[selfPtr, witnessPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderAddBootstrapInput:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_tx_inputs_builder_add_bootstrap_input(self, address, input, amount, error);
        return nil;
    }] exec:@[selfPtr, addressPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderAddRegularInput:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withInput:(nonnull NSString *)inputPtr withAmount:(nonnull NSString *)amountPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr input = [[params objectAtIndex:2]  rPtr];
        RPtr amount = [[params objectAtIndex:3]  rPtr];
        csl_bridge_tx_inputs_builder_add_regular_input(self, address, input, amount, error);
        return nil;
    }] exec:@[selfPtr, addressPtr, inputPtr, amountPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderGetRefInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_tx_inputs_builder_get_ref_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderGetNativeInputScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_tx_inputs_builder_get_native_input_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderGetPlutusInputScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_tx_inputs_builder_get_plutus_input_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_tx_inputs_builder_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderAddRequiredSigner:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        csl_bridge_tx_inputs_builder_add_required_signer(self, key, error);
        return nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderAddRequiredSigners:(nonnull NSString *)selfPtr withKeys:(nonnull NSString *)keysPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr keys = [[params objectAtIndex:1]  rPtr];
        csl_bridge_tx_inputs_builder_add_required_signers(self, keys, error);
        return nil;
    }] exec:@[selfPtr, keysPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderTotalValue:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_tx_inputs_builder_total_value(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_tx_inputs_builder_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_txInputsBuilderInputsOption:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_tx_inputs_builder_inputs_option(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_uRLToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_u_r_l_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_uRLFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_u_r_l_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_uRLToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_u_r_l_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_uRLFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_u_r_l_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_uRLToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_u_r_l_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_uRLFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_u_r_l_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_uRLNew:(nonnull NSString *)urlVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* urlVal, CharPtr* error) {
        RPtr result;
        CharPtr url = [urlVal  charPtr];
        return csl_bridge_u_r_l_new(url, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:urlVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_uRLUrl:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_u_r_l_url(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_unitIntervalToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_unit_interval_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_unit_interval_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_unit_interval_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_unit_interval_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_unit_interval_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_unit_interval_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalNumerator:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_unit_interval_numerator(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalDenominator:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_unit_interval_denominator(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_unitIntervalNew:(nonnull NSString *)numeratorPtr withDenominator:(nonnull NSString *)denominatorPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr numerator = [[params objectAtIndex:0]  rPtr];
        RPtr denominator = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_unit_interval_new(numerator, denominator, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[numeratorPtr, denominatorPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_updateToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_update_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_update_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_update_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateProposedProtocolParameterUpdates:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_proposed_protocol_parameter_updates(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateEpoch:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_epoch(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateNew:(nonnull NSString *)proposedProtocolParameterUpdatesPtr withEpoch:(nonnull NSNumber *)epochVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr proposedProtocolParameterUpdates = [[params objectAtIndex:0]  rPtr];
        int64_t epoch = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_update_new(proposedProtocolParameterUpdates, epoch, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[proposedProtocolParameterUpdatesPtr, epochVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_committee_action_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_update_committee_action_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_committee_action_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_update_committee_action_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_committee_action_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_update_committee_action_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionGovActionId:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_committee_action_gov_action_id(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionCommittee:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_committee_action_committee(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionMembersToRemove:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_update_committee_action_members_to_remove(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionNew:(nonnull NSString *)committeePtr withMembersToRemove:(nonnull NSString *)membersToRemovePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr committee = [[params objectAtIndex:0]  rPtr];
        RPtr membersToRemove = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_update_committee_action_new(committee, membersToRemove, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[committeePtr, membersToRemovePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_updateCommitteeActionNewWithActionId:(nonnull NSString *)govActionIdPtr withCommittee:(nonnull NSString *)committeePtr withMembersToRemove:(nonnull NSString *)membersToRemovePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr govActionId = [[params objectAtIndex:0]  rPtr];
        RPtr committee = [[params objectAtIndex:1]  rPtr];
        RPtr membersToRemove = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_update_committee_action_new_with_action_id(govActionId, committee, membersToRemove, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[govActionIdPtr, committeePtr, membersToRemovePtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_vRFCertToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_cert_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_v_r_f_cert_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_cert_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_v_r_f_cert_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_cert_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_v_r_f_cert_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertOutput:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_cert_output(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertProof:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_cert_proof(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFCertNew:(nonnull NSString *)outputVal withProof:(nonnull NSString *)proofVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        NSData* dataOutput = [NSData fromBase64:[params objectAtIndex:0]];
        NSData* dataProof = [NSData fromBase64:[params objectAtIndex:1]];
        return csl_bridge_v_r_f_cert_new((uint8_t*)dataOutput.bytes, dataOutput.length, (uint8_t*)dataProof.bytes, dataProof.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[outputVal, proofVal] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_vRFKeyHashFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_v_r_f_key_hash_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFKeyHashToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_key_hash_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFKeyHashToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_v_r_f_key_hash_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFKeyHashFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_v_r_f_key_hash_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFKeyHashToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_key_hash_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFKeyHashFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_v_r_f_key_hash_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_vRFVKeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_v_r_f_v_key_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFVKeyToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_v_key_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFVKeyToBech32:(nonnull NSString *)selfPtr withPrefix:(nonnull NSString *)prefixVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        CharPtr prefix = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_v_r_f_v_key_to_bech32(self, prefix, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[selfPtr, prefixVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFVKeyFromBech32:(nonnull NSString *)bechStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bechStrVal, CharPtr* error) {
        RPtr result;
        CharPtr bechStr = [bechStrVal  charPtr];
        return csl_bridge_v_r_f_v_key_from_bech32(bechStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bechStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFVKeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_v_r_f_v_key_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vRFVKeyFromHex:(nonnull NSString *)hexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexVal, CharPtr* error) {
        RPtr result;
        CharPtr hex = [hexVal  charPtr];
        return csl_bridge_v_r_f_v_key_from_hex(hex, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexVal andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_valueToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_value_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_value_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_value_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_value_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_value_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_value_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueNew:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* coinPtr, CharPtr* error) {
        RPtr result;
        RPtr coin = [coinPtr  rPtr];
        return csl_bridge_value_new(coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:coinPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueNewFromAssets:(nonnull NSString *)multiassetPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* multiassetPtr, CharPtr* error) {
        RPtr result;
        RPtr multiasset = [multiassetPtr  rPtr];
        return csl_bridge_value_new_from_assets(multiasset, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:multiassetPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueNewWithAssets:(nonnull NSString *)coinPtr withMultiasset:(nonnull NSString *)multiassetPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr coin = [[params objectAtIndex:0]  rPtr];
        RPtr multiasset = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_value_new_with_assets(coin, multiasset, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[coinPtr, multiassetPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueZero:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_value_zero(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueIsZero:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_value_is_zero(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_value_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueSetCoin:(nonnull NSString *)selfPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr coin = [[params objectAtIndex:1]  rPtr];
        csl_bridge_value_set_coin(self, coin, error);
        return nil;
    }] exec:@[selfPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueMultiasset:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_value_multiasset(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueSetMultiasset:(nonnull NSString *)selfPtr withMultiasset:(nonnull NSString *)multiassetPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr multiasset = [[params objectAtIndex:1]  rPtr];
        csl_bridge_value_set_multiasset(self, multiasset, error);
        return nil;
    }] exec:@[selfPtr, multiassetPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueCheckedAdd:(nonnull NSString *)selfPtr withRhs:(nonnull NSString *)rhsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr rhs = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_value_checked_add(self, rhs, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, rhsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueCheckedSub:(nonnull NSString *)selfPtr withRhsValue:(nonnull NSString *)rhsValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr rhsValue = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_value_checked_sub(self, rhsValue, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, rhsValuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueClampedSub:(nonnull NSString *)selfPtr withRhsValue:(nonnull NSString *)rhsValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr rhsValue = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_value_clamped_sub(self, rhsValue, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, rhsValuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_valueCompare:(nonnull NSString *)selfPtr withRhsValue:(nonnull NSString *)rhsValuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        int64_t result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr rhsValue = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_value_compare(self, rhsValue, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:@[selfPtr, rhsValuePtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_versionedBlockToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_versioned_block_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_versioned_block_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_versioned_block_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_versioned_block_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_versioned_block_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_versioned_block_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockNew:(nonnull NSString *)blockPtr withEraCode:(nonnull NSNumber *)eraCodeVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr block = [[params objectAtIndex:0]  rPtr];
        int64_t eraCode = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_versioned_block_new(block, eraCode, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[blockPtr, eraCodeVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockBlock:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_versioned_block_block(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_versionedBlockEra:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_versioned_block_era(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_vkeyToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkey_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeyFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_vkey_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeyToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkey_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeyFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_vkey_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeyToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkey_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeyFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_vkey_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeyNew:(nonnull NSString *)pkPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* pkPtr, CharPtr* error) {
        RPtr result;
        RPtr pk = [pkPtr  rPtr];
        return csl_bridge_vkey_new(pk, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:pkPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeyPublicKey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkey_public_key(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_vkeysNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_vkeys_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeysLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeys_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeysGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_vkeys_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeysAdd:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        csl_bridge_vkeys_add(self, elem, error);
        return nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_vkeywitnessToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitness_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_vkeywitness_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitness_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_vkeywitness_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitness_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_vkeywitness_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessNew:(nonnull NSString *)vkeyPtr withSignature:(nonnull NSString *)signaturePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr vkey = [[params objectAtIndex:0]  rPtr];
        RPtr signature = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_vkeywitness_new(vkey, signature, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[vkeyPtr, signaturePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessVkey:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitness_vkey(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessSignature:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitness_signature(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitnesses_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_vkeywitnesses_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitnesses_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_vkeywitnesses_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitnesses_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_vkeywitnesses_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_vkeywitnesses_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vkeywitnesses_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_vkeywitnesses_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_vkeywitnessesAdd:(nonnull NSString *)selfPtr withWitness:(nonnull NSString *)witnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr witness = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_vkeywitnesses_add(self, witness, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, witnessPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_voteDelegationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_delegation_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_vote_delegation_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_delegation_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_vote_delegation_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_delegation_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_vote_delegation_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_delegation_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationDrep:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_delegation_drep(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationNew:(nonnull NSString *)stakeCredentialPtr withDrep:(nonnull NSString *)drepPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr drep = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_vote_delegation_new(stakeCredential, drep, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, drepPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteDelegationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_delegation_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_registration_and_delegation_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_vote_registration_and_delegation_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_registration_and_delegation_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_vote_registration_and_delegation_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_registration_and_delegation_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_vote_registration_and_delegation_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationStakeCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_registration_and_delegation_stake_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationDrep:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_registration_and_delegation_drep(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationCoin:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_registration_and_delegation_coin(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationNew:(nonnull NSString *)stakeCredentialPtr withDrep:(nonnull NSString *)drepPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr stakeCredential = [[params objectAtIndex:0]  rPtr];
        RPtr drep = [[params objectAtIndex:1]  rPtr];
        RPtr coin = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_vote_registration_and_delegation_new(stakeCredential, drep, coin, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[stakeCredentialPtr, drepPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voteRegistrationAndDelegationHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_vote_registration_and_delegation_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_voterToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_voter_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_voter_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_voter_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterNewConstitutionalCommitteeHotCredential:(nonnull NSString *)credPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* credPtr, CharPtr* error) {
        RPtr result;
        RPtr cred = [credPtr  rPtr];
        return csl_bridge_voter_new_constitutional_committee_hot_credential(cred, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:credPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterNewDrepCredential:(nonnull NSString *)credPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* credPtr, CharPtr* error) {
        RPtr result;
        RPtr cred = [credPtr  rPtr];
        return csl_bridge_voter_new_drep_credential(cred, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:credPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterNewStakePoolKeyHash:(nonnull NSString *)keyHashPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* keyHashPtr, CharPtr* error) {
        RPtr result;
        RPtr keyHash = [keyHashPtr  rPtr];
        return csl_bridge_voter_new_stake_pool_key_hash(keyHash, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:keyHashPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterToConstitutionalCommitteeHotCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_to_constitutional_committee_hot_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterToDrepCredential:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_to_drep_credential(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterToStakePoolKeyHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_to_stake_pool_key_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterHasScriptCredentials:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_has_script_credentials(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_voterToKeyHash:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voter_to_key_hash(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_votersToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voters_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votersFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_voters_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votersNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_voters_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votersAdd:(nonnull NSString *)selfPtr withVoter:(nonnull NSString *)voterPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr voter = [[params objectAtIndex:1]  rPtr];
        csl_bridge_voters_add(self, voter, error);
        return nil;
    }] exec:@[selfPtr, voterPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votersGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_voters_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votersLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voters_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_votingBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_voting_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderAdd:(nonnull NSString *)selfPtr withVoter:(nonnull NSString *)voterPtr withGovActionId:(nonnull NSString *)govActionIdPtr withVotingProcedure:(nonnull NSString *)votingProcedurePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr voter = [[params objectAtIndex:1]  rPtr];
        RPtr govActionId = [[params objectAtIndex:2]  rPtr];
        RPtr votingProcedure = [[params objectAtIndex:3]  rPtr];
        csl_bridge_voting_builder_add(self, voter, govActionId, votingProcedure, error);
        return nil;
    }] exec:@[selfPtr, voterPtr, govActionIdPtr, votingProcedurePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderAddWithPlutusWitness:(nonnull NSString *)selfPtr withVoter:(nonnull NSString *)voterPtr withGovActionId:(nonnull NSString *)govActionIdPtr withVotingProcedure:(nonnull NSString *)votingProcedurePtr withWitness:(nonnull NSString *)witnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr voter = [[params objectAtIndex:1]  rPtr];
        RPtr govActionId = [[params objectAtIndex:2]  rPtr];
        RPtr votingProcedure = [[params objectAtIndex:3]  rPtr];
        RPtr witness = [[params objectAtIndex:4]  rPtr];
        csl_bridge_voting_builder_add_with_plutus_witness(self, voter, govActionId, votingProcedure, witness, error);
        return nil;
    }] exec:@[selfPtr, voterPtr, govActionIdPtr, votingProcedurePtr, witnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderAddWithNativeScript:(nonnull NSString *)selfPtr withVoter:(nonnull NSString *)voterPtr withGovActionId:(nonnull NSString *)govActionIdPtr withVotingProcedure:(nonnull NSString *)votingProcedurePtr withNativeScriptSource:(nonnull NSString *)nativeScriptSourcePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr voter = [[params objectAtIndex:1]  rPtr];
        RPtr govActionId = [[params objectAtIndex:2]  rPtr];
        RPtr votingProcedure = [[params objectAtIndex:3]  rPtr];
        RPtr nativeScriptSource = [[params objectAtIndex:4]  rPtr];
        csl_bridge_voting_builder_add_with_native_script(self, voter, govActionId, votingProcedure, nativeScriptSource, error);
        return nil;
    }] exec:@[selfPtr, voterPtr, govActionIdPtr, votingProcedurePtr, nativeScriptSourcePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderGetPlutusWitnesses:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_builder_get_plutus_witnesses(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderGetRefInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_builder_get_ref_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderGetNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_builder_get_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderHasPlutusScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_builder_has_plutus_scripts(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_votingProcedureToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedure_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_voting_procedure_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedure_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_voting_procedure_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedure_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_voting_procedure_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureNew:(nonnull NSNumber *)voteVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSNumber* voteVal, CharPtr* error) {
        RPtr result;
        int32_t vote = [voteVal  integerValue];
        return csl_bridge_voting_procedure_new(vote, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:voteVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureNewWithAnchor:(nonnull NSNumber *)voteVal withAnchor:(nonnull NSString *)anchorPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int32_t vote = [[params objectAtIndex:0]  integerValue];
        RPtr anchor = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_voting_procedure_new_with_anchor(vote, anchor, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[voteVal, anchorPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureVoteKind:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int32_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedure_vote_kind(self, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProcedureAnchor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedure_anchor(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_votingProceduresToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedures_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_voting_procedures_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedures_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_voting_procedures_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedures_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_voting_procedures_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_voting_procedures_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresInsert:(nonnull NSString *)selfPtr withVoter:(nonnull NSString *)voterPtr withGovernanceActionId:(nonnull NSString *)governanceActionIdPtr withVotingProcedure:(nonnull NSString *)votingProcedurePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr voter = [[params objectAtIndex:1]  rPtr];
        RPtr governanceActionId = [[params objectAtIndex:2]  rPtr];
        RPtr votingProcedure = [[params objectAtIndex:3]  rPtr];
        csl_bridge_voting_procedures_insert(self, voter, governanceActionId, votingProcedure, error);
        return nil;
    }] exec:@[selfPtr, voterPtr, governanceActionIdPtr, votingProcedurePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresGet:(nonnull NSString *)selfPtr withVoter:(nonnull NSString *)voterPtr withGovernanceActionId:(nonnull NSString *)governanceActionIdPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr voter = [[params objectAtIndex:1]  rPtr];
        RPtr governanceActionId = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_voting_procedures_get(self, voter, governanceActionId, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, voterPtr, governanceActionIdPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresGetVoters:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_procedures_get_voters(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProceduresGetGovernanceActionIdsByVoter:(nonnull NSString *)selfPtr withVoter:(nonnull NSString *)voterPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr voter = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_voting_procedures_get_governance_action_ids_by_voter(self, voter, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, voterPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_votingProposalToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_voting_proposal_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_voting_proposal_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_voting_proposal_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalGovernanceAction:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_governance_action(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalAnchor:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_anchor(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalRewardAccount:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_reward_account(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalDeposit:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_deposit(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalNew:(nonnull NSString *)governanceActionPtr withAnchor:(nonnull NSString *)anchorPtr withRewardAccount:(nonnull NSString *)rewardAccountPtr withDeposit:(nonnull NSString *)depositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr governanceAction = [[params objectAtIndex:0]  rPtr];
        RPtr anchor = [[params objectAtIndex:1]  rPtr];
        RPtr rewardAccount = [[params objectAtIndex:2]  rPtr];
        RPtr deposit = [[params objectAtIndex:3]  rPtr];
        return csl_bridge_voting_proposal_new(governanceAction, anchor, rewardAccount, deposit, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[governanceActionPtr, anchorPtr, rewardAccountPtr, depositPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_votingProposalBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_voting_proposal_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalBuilderAdd:(nonnull NSString *)selfPtr withProposal:(nonnull NSString *)proposalPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr proposal = [[params objectAtIndex:1]  rPtr];
        csl_bridge_voting_proposal_builder_add(self, proposal, error);
        return nil;
    }] exec:@[selfPtr, proposalPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalBuilderAddWithPlutusWitness:(nonnull NSString *)selfPtr withProposal:(nonnull NSString *)proposalPtr withWitness:(nonnull NSString *)witnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr proposal = [[params objectAtIndex:1]  rPtr];
        RPtr witness = [[params objectAtIndex:2]  rPtr];
        csl_bridge_voting_proposal_builder_add_with_plutus_witness(self, proposal, witness, error);
        return nil;
    }] exec:@[selfPtr, proposalPtr, witnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalBuilderGetPlutusWitnesses:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_builder_get_plutus_witnesses(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalBuilderGetRefInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_builder_get_ref_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalBuilderHasPlutusScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_builder_has_plutus_scripts(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposal_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_votingProposalsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposals_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_voting_proposals_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposals_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_voting_proposals_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposals_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_voting_proposals_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_voting_proposals_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposals_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsGet:(nonnull NSString *)selfPtr withIndex:(nonnull NSNumber *)indexVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        int64_t index = [[params objectAtIndex:1]  longLongValue];
        return csl_bridge_voting_proposals_get(self, index, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, indexVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsAdd:(nonnull NSString *)selfPtr withProposal:(nonnull NSString *)proposalPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr proposal = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_voting_proposals_add(self, proposal, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, proposalPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsContains:(nonnull NSString *)selfPtr withElem:(nonnull NSString *)elemPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSArray* params, CharPtr* error) {
        BOOL result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr elem = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_voting_proposals_contains(self, elem, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:@[selfPtr, elemPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_votingProposalsToOption:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_voting_proposals_to_option(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_withdrawalsToBytes:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        DataPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_to_bytes(self, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsFromBytes:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_withdrawals_from_bytes((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsToHex:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_to_hex(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsFromHex:(nonnull NSString *)hexStrVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* hexStrVal, CharPtr* error) {
        RPtr result;
        CharPtr hexStr = [hexStrVal  charPtr];
        return csl_bridge_withdrawals_from_hex(hexStr, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:hexStrVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsToJson:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        CharPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_to_json(self, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsFromJson:(nonnull NSString *)jsonVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* jsonVal, CharPtr* error) {
        RPtr result;
        CharPtr json = [jsonVal  charPtr];
        return csl_bridge_withdrawals_from_json(json, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:jsonVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_withdrawals_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsLen:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        int64_t result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_len(self, &result, error)
            ? [NSNumber numberWithLongLong:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsInsert:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withValue:(nonnull NSString *)valuePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        RPtr value = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_withdrawals_insert(self, key, value, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr, valuePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsGet:(nonnull NSString *)selfPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr key = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_withdrawals_get(self, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[selfPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsKeys:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_keys(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderNew:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(id _void, CharPtr* error) {
        RPtr result;
        return csl_bridge_withdrawals_builder_new(&result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:nil andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderAdd:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withCoin:(nonnull NSString *)coinPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr coin = [[params objectAtIndex:2]  rPtr];
        csl_bridge_withdrawals_builder_add(self, address, coin, error);
        return nil;
    }] exec:@[selfPtr, addressPtr, coinPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderAddWithPlutusWitness:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withCoin:(nonnull NSString *)coinPtr withWitness:(nonnull NSString *)witnessPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr coin = [[params objectAtIndex:2]  rPtr];
        RPtr witness = [[params objectAtIndex:3]  rPtr];
        csl_bridge_withdrawals_builder_add_with_plutus_witness(self, address, coin, witness, error);
        return nil;
    }] exec:@[selfPtr, addressPtr, coinPtr, witnessPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderAddWithNativeScript:(nonnull NSString *)selfPtr withAddress:(nonnull NSString *)addressPtr withCoin:(nonnull NSString *)coinPtr withNativeScriptSource:(nonnull NSString *)nativeScriptSourcePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr self = [[params objectAtIndex:0]  rPtr];
        RPtr address = [[params objectAtIndex:1]  rPtr];
        RPtr coin = [[params objectAtIndex:2]  rPtr];
        RPtr nativeScriptSource = [[params objectAtIndex:3]  rPtr];
        csl_bridge_withdrawals_builder_add_with_native_script(self, address, coin, nativeScriptSource, error);
        return nil;
    }] exec:@[selfPtr, addressPtr, coinPtr, nativeScriptSourcePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderGetPlutusWitnesses:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_builder_get_plutus_witnesses(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderGetRefInputs:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_builder_get_ref_inputs(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderGetNativeScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_builder_get_native_scripts(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderGetTotalWithdrawals:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_builder_get_total_withdrawals(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderHasPlutusScripts:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* selfPtr, CharPtr* error) {
        BOOL result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_builder_has_plutus_scripts(self, &result, error)
            ? [NSNumber numberWithBool:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_withdrawalsBuilderBuild:(nonnull NSString *)selfPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* selfPtr, CharPtr* error) {
        RPtr result;
        RPtr self = [selfPtr  rPtr];
        return csl_bridge_withdrawals_builder_build(self, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:selfPtr andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_calculateExUnitsCeilCost:(nonnull NSString *)exUnitsPtr withExUnitPrices:(nonnull NSString *)exUnitPricesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr exUnits = [[params objectAtIndex:0]  rPtr];
        RPtr exUnitPrices = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_calculate_ex_units_ceil_cost(exUnits, exUnitPrices, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[exUnitsPtr, exUnitPricesPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_createSendAll:(nonnull NSString *)addressPtr withUtxos:(nonnull NSString *)utxosPtr withConfig:(nonnull NSString *)configPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr address = [[params objectAtIndex:0]  rPtr];
        RPtr utxos = [[params objectAtIndex:1]  rPtr];
        RPtr config = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_create_send_all(address, utxos, config, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[addressPtr, utxosPtr, configPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_decodeArbitraryBytesFromMetadatum:(nonnull NSString *)metadataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* metadataPtr, CharPtr* error) {
        DataPtr result;
        RPtr metadata = [metadataPtr  rPtr];
        return csl_bridge_decode_arbitrary_bytes_from_metadatum(metadata, &result, error)
            ? [[NSData fromDataPtr:&result] base64]
            : nil;
    }] exec:metadataPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_decodeMetadatumToJsonStr:(nonnull NSString *)metadatumPtr withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr metadatum = [[params objectAtIndex:0]  rPtr];
        int32_t schema = [[params objectAtIndex:1]  integerValue];
        return csl_bridge_decode_metadatum_to_json_str(metadatum, schema, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[metadatumPtr, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_decodePlutusDatumToJsonStr:(nonnull NSString *)datumPtr withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        RPtr datum = [[params objectAtIndex:0]  rPtr];
        int32_t schema = [[params objectAtIndex:1]  integerValue];
        return csl_bridge_decode_plutus_datum_to_json_str(datum, schema, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[datumPtr, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_decryptWithPassword:(nonnull NSString *)passwordVal withData:(nonnull NSString *)dataVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        CharPtr password = [[params objectAtIndex:0]  charPtr];
        CharPtr data = [[params objectAtIndex:1]  charPtr];
        return csl_bridge_decrypt_with_password(password, data, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[passwordVal, dataVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_encodeArbitraryBytesAsMetadatum:(nonnull NSString *)bytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* bytesVal, CharPtr* error) {
        RPtr result;
        NSData* dataBytes = [NSData fromBase64:bytesVal];
        return csl_bridge_encode_arbitrary_bytes_as_metadatum((uint8_t*)dataBytes.bytes, dataBytes.length, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:bytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_encodeJsonStrToMetadatum:(nonnull NSString *)jsonVal withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        CharPtr json = [[params objectAtIndex:0]  charPtr];
        int32_t schema = [[params objectAtIndex:1]  integerValue];
        return csl_bridge_encode_json_str_to_metadatum(json, schema, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[jsonVal, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_encodeJsonStrToNativeScript:(nonnull NSString *)jsonVal withSelfXpub:(nonnull NSString *)selfXpubVal withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        CharPtr json = [[params objectAtIndex:0]  charPtr];
        CharPtr selfXpub = [[params objectAtIndex:1]  charPtr];
        int32_t schema = [[params objectAtIndex:2]  integerValue];
        return csl_bridge_encode_json_str_to_native_script(json, selfXpub, schema, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[jsonVal, selfXpubVal, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_encodeJsonStrToPlutusDatum:(nonnull NSString *)jsonVal withSchema:(nonnull NSNumber *)schemaVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        CharPtr json = [[params objectAtIndex:0]  charPtr];
        int32_t schema = [[params objectAtIndex:1]  integerValue];
        return csl_bridge_encode_json_str_to_plutus_datum(json, schema, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[jsonVal, schemaVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_encryptWithPassword:(nonnull NSString *)passwordVal withSalt:(nonnull NSString *)saltVal withNonce:(nonnull NSString *)nonceVal withData:(nonnull NSString *)dataVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        CharPtr result;
        CharPtr password = [[params objectAtIndex:0]  charPtr];
        CharPtr salt = [[params objectAtIndex:1]  charPtr];
        CharPtr nonce = [[params objectAtIndex:2]  charPtr];
        CharPtr data = [[params objectAtIndex:3]  charPtr];
        return csl_bridge_encrypt_with_password(password, salt, nonce, data, &result, error)
            ? [NSString stringFromCharPtr:&result]
            : nil;
    }] exec:@[passwordVal, saltVal, nonceVal, dataVal] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_getDeposit:(nonnull NSString *)txbodyPtr withPoolDeposit:(nonnull NSString *)poolDepositPtr withKeyDeposit:(nonnull NSString *)keyDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr txbody = [[params objectAtIndex:0]  rPtr];
        RPtr poolDeposit = [[params objectAtIndex:1]  rPtr];
        RPtr keyDeposit = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_get_deposit(txbody, poolDeposit, keyDeposit, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[txbodyPtr, poolDepositPtr, keyDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_getImplicitInput:(nonnull NSString *)txbodyPtr withPoolDeposit:(nonnull NSString *)poolDepositPtr withKeyDeposit:(nonnull NSString *)keyDepositPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr txbody = [[params objectAtIndex:0]  rPtr];
        RPtr poolDeposit = [[params objectAtIndex:1]  rPtr];
        RPtr keyDeposit = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_get_implicit_input(txbody, poolDeposit, keyDeposit, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[txbodyPtr, poolDepositPtr, keyDepositPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hasTransactionSetTag:(nonnull NSString *)txBytesVal withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSNumber*(NSString* txBytesVal, CharPtr* error) {
        int32_t result;
        NSData* dataTxBytes = [NSData fromBase64:txBytesVal];
        return csl_bridge_has_transaction_set_tag((uint8_t*)dataTxBytes.bytes, dataTxBytes.length, &result, error)
            ? [NSNumber numberWithLong:result]
            : nil;
    }] exec:txBytesVal andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hashAuxiliaryData:(nonnull NSString *)auxiliaryDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* auxiliaryDataPtr, CharPtr* error) {
        RPtr result;
        RPtr auxiliaryData = [auxiliaryDataPtr  rPtr];
        return csl_bridge_hash_auxiliary_data(auxiliaryData, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:auxiliaryDataPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hashPlutusData:(nonnull NSString *)plutusDataPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSString* plutusDataPtr, CharPtr* error) {
        RPtr result;
        RPtr plutusData = [plutusDataPtr  rPtr];
        return csl_bridge_hash_plutus_data(plutusData, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:plutusDataPtr andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hashScriptData:(nonnull NSString *)redeemersPtr withCostModels:(nonnull NSString *)costModelsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr redeemers = [[params objectAtIndex:0]  rPtr];
        RPtr costModels = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_hash_script_data(redeemers, costModels, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[redeemersPtr, costModelsPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_hashScriptDataWithDatums:(nonnull NSString *)redeemersPtr withCostModels:(nonnull NSString *)costModelsPtr withDatums:(nonnull NSString *)datumsPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr redeemers = [[params objectAtIndex:0]  rPtr];
        RPtr costModels = [[params objectAtIndex:1]  rPtr];
        RPtr datums = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_hash_script_data_with_datums(redeemers, costModels, datums, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[redeemersPtr, costModelsPtr, datumsPtr] andResolve:resolve orReject:reject];
}


RCT_EXPORT_METHOD(csl_bridge_makeDaedalusBootstrapWitness:(nonnull NSString *)txBodyHashPtr withAddr:(nonnull NSString *)addrPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr txBodyHash = [[params objectAtIndex:0]  rPtr];
        RPtr addr = [[params objectAtIndex:1]  rPtr];
        RPtr key = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_make_daedalus_bootstrap_witness(txBodyHash, addr, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[txBodyHashPtr, addrPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_makeIcarusBootstrapWitness:(nonnull NSString *)txBodyHashPtr withAddr:(nonnull NSString *)addrPtr withKey:(nonnull NSString *)keyPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr txBodyHash = [[params objectAtIndex:0]  rPtr];
        RPtr addr = [[params objectAtIndex:1]  rPtr];
        RPtr key = [[params objectAtIndex:2]  rPtr];
        return csl_bridge_make_icarus_bootstrap_witness(txBodyHash, addr, key, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[txBodyHashPtr, addrPtr, keyPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_makeVkeyWitness:(nonnull NSString *)txBodyHashPtr withSk:(nonnull NSString *)skPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr txBodyHash = [[params objectAtIndex:0]  rPtr];
        RPtr sk = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_make_vkey_witness(txBodyHash, sk, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[txBodyHashPtr, skPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_minAdaForOutput:(nonnull NSString *)outputPtr withDataCost:(nonnull NSString *)dataCostPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr output = [[params objectAtIndex:0]  rPtr];
        RPtr dataCost = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_min_ada_for_output(output, dataCost, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[outputPtr, dataCostPtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_minFee:(nonnull NSString *)txPtr withLinearFee:(nonnull NSString *)linearFeePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr tx = [[params objectAtIndex:0]  rPtr];
        RPtr linearFee = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_min_fee(tx, linearFee, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[txPtr, linearFeePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_minRefScriptFee:(nonnull NSNumber *)totalRefScriptsSizeVal withRefScriptCoinsPerByte:(nonnull NSString *)refScriptCoinsPerBytePtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        int64_t totalRefScriptsSize = [[params objectAtIndex:0]  longLongValue];
        RPtr refScriptCoinsPerByte = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_min_ref_script_fee(totalRefScriptsSize, refScriptCoinsPerByte, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[totalRefScriptsSizeVal, refScriptCoinsPerBytePtr] andResolve:resolve orReject:reject];
}

RCT_EXPORT_METHOD(csl_bridge_minScriptFee:(nonnull NSString *)txPtr withExUnitPrices:(nonnull NSString *)exUnitPricesPtr withResolve:(RCTPromiseResolveBlock)resolve andReject:(RCTPromiseRejectBlock)reject)
{
    [[CSLCSafeOperation new:^NSString*(NSArray* params, CharPtr* error) {
        RPtr result;
        RPtr tx = [[params objectAtIndex:0]  rPtr];
        RPtr exUnitPrices = [[params objectAtIndex:1]  rPtr];
        return csl_bridge_min_script_fee(tx, exUnitPrices, &result, error)
            ? [NSString stringFromPtr:result]
            : nil;
    }] exec:@[txPtr, exUnitPricesPtr] andResolve:resolve orReject:reject];
}

@end
