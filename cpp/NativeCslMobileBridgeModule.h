#pragma once

#if __has_include(<React-Codegen/RNCslMobileBridgeSpecJSI.h>) // CocoaPod headers on Apple
#include <React-Codegen/RNCslMobileBridgeSpecJSI.h>
#elif __has_include("RNCslMobileBridgeSpecJSI.h") // CMake headers on Android
#include "RNCslMobileBridgeSpecJSI.h"
#endif

#include <memory>
#include <string>

namespace facebook::react {
    
    class NativeCslMobileBridgeModule : public NativeCslMobileBridgeCxxSpec<NativeCslMobileBridgeModule> {
    public:
        NativeCslMobileBridgeModule(std::shared_ptr <CallInvoker> jsInvoker);
        void ptr_free_jsi(jsi::Runtime &rt, std::string ptr);
        void init_jsi(jsi::Runtime &rt);
        std::string calculate_ex_units_ceil_cost_jsi(jsi::Runtime &rt, std::string ex_units, std::string ex_unit_prices);
        std::string create_send_all_jsi(jsi::Runtime &rt, std::string address, std::string utxos, std::string config);
        std::string decode_arbitrary_bytes_from_metadatum_jsi(jsi::Runtime &rt, std::string metadata);
        std::string decode_metadatum_to_json_str_jsi(jsi::Runtime &rt, std::string metadatum, double schema);
        std::string decode_plutus_datum_to_json_str_jsi(jsi::Runtime &rt, std::string datum, double schema);
        std::string decrypt_with_password_jsi(jsi::Runtime &rt, std::string password, std::string data);
        std::string encode_arbitrary_bytes_as_metadatum_jsi(jsi::Runtime &rt, std::string bytes);
        std::string encode_json_str_to_metadatum_jsi(jsi::Runtime &rt, std::string json, double schema);
        std::string encode_json_str_to_native_script_jsi(jsi::Runtime &rt, std::string json, std::string self_xpub, double schema);
        std::string encode_json_str_to_plutus_datum_jsi(jsi::Runtime &rt, std::string json, double schema);
        std::string encrypt_with_password_jsi(jsi::Runtime &rt, std::string password, std::string salt, std::string nonce, std::string data);
        std::string get_deposit_jsi(jsi::Runtime &rt, std::string txbody, std::string pool_deposit, std::string key_deposit);
        std::string get_implicit_input_jsi(jsi::Runtime &rt, std::string txbody, std::string pool_deposit, std::string key_deposit);
        std::string hash_auxiliary_data_jsi(jsi::Runtime &rt, std::string auxiliary_data);
        std::string hash_plutus_data_jsi(jsi::Runtime &rt, std::string plutus_data);
        std::string hash_script_data_jsi(jsi::Runtime &rt, std::string redeemers, std::string cost_models);
        std::string hash_script_data_with_datums_jsi(jsi::Runtime &rt, std::string redeemers, std::string cost_models, std::string datums);

        std::string hash_transaction_jsi(jsi::Runtime &rt, std::string tx_body);
        std::string make_daedalus_bootstrap_witness_jsi(jsi::Runtime &rt, std::string tx_body_hash, std::string addr, std::string key);
        std::string make_icarus_bootstrap_witness_jsi(jsi::Runtime &rt, std::string tx_body_hash, std::string addr, std::string key);
        std::string make_vkey_witness_jsi(jsi::Runtime &rt, std::string tx_body_hash, std::string sk);
        std::string min_ada_for_output_jsi(jsi::Runtime &rt, std::string output, std::string data_cost);
        std::string min_ada_required_jsi(jsi::Runtime &rt, std::string assets, bool has_data_hash, std::string coins_per_utxo_word);
        std::string min_fee_jsi(jsi::Runtime &rt, std::string tx, std::string linear_fee);
        std::string min_script_fee_jsi(jsi::Runtime &rt, std::string tx, std::string ex_unit_prices);
        std::string address_from_bytes_jsi(jsi::Runtime &rt, std::string data);
        std::string address_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string address_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string address_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string address_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string address_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string address_to_bech32_jsi(jsi::Runtime &rt, std::string self);
        std::string address_to_bech32_with_prefix_jsi(jsi::Runtime &rt, std::string self, std::string prefix);

        std::string address_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        double address_network_id_jsi(jsi::Runtime &rt, std::string self);

        std::string anchor_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string anchor_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string anchor_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string anchor_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string anchor_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string anchor_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string anchor_url_jsi(jsi::Runtime &rt, std::string self);
        std::string anchor_anchor_data_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string anchor_new_jsi(jsi::Runtime &rt, std::string anchor_url, std::string anchor_data_hash);

        std::string anchor_data_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string anchor_data_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string anchor_data_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string anchor_data_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string anchor_data_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string anchor_data_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string asset_name_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string asset_name_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string asset_name_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string asset_name_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string asset_name_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string asset_name_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string asset_name_new_jsi(jsi::Runtime &rt, std::string name);
        std::string asset_name_name_jsi(jsi::Runtime &rt, std::string self);

        std::string asset_names_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string asset_names_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string asset_names_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string asset_names_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string asset_names_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string asset_names_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string asset_names_new_jsi(jsi::Runtime &rt);
        double asset_names_len_jsi(jsi::Runtime &rt, std::string self);
        std::string asset_names_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void asset_names_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string assets_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string assets_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string assets_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string assets_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string assets_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string assets_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string assets_new_jsi(jsi::Runtime &rt);
        double assets_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> assets_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> assets_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string assets_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string auxiliary_data_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string auxiliary_data_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string auxiliary_data_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string auxiliary_data_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string auxiliary_data_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string auxiliary_data_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string auxiliary_data_new_jsi(jsi::Runtime &rt);
        std::optional<std::string> auxiliary_data_metadata_jsi(jsi::Runtime &rt, std::string self);
        void auxiliary_data_set_metadata_jsi(jsi::Runtime &rt, std::string self, std::string metadata);
        std::optional<std::string> auxiliary_data_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        void auxiliary_data_set_native_scripts_jsi(jsi::Runtime &rt, std::string self, std::string native_scripts);
        std::optional<std::string> auxiliary_data_plutus_scripts_jsi(jsi::Runtime &rt, std::string self);
        void auxiliary_data_set_plutus_scripts_jsi(jsi::Runtime &rt, std::string self, std::string plutus_scripts);
        bool auxiliary_data_prefer_alonzo_format_jsi(jsi::Runtime &rt, std::string self);
        void auxiliary_data_set_prefer_alonzo_format_jsi(jsi::Runtime &rt, std::string self, bool prefer);

        std::string auxiliary_data_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string auxiliary_data_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string auxiliary_data_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string auxiliary_data_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string auxiliary_data_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string auxiliary_data_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string auxiliary_data_set_new_jsi(jsi::Runtime &rt);
        double auxiliary_data_set_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> auxiliary_data_set_insert_jsi(jsi::Runtime &rt, std::string self, double tx_index, std::string data);
        std::optional<std::string> auxiliary_data_set_get_jsi(jsi::Runtime &rt, std::string self, double tx_index);
        std::string auxiliary_data_set_indices_jsi(jsi::Runtime &rt, std::string self);

        std::string base_address_new_jsi(jsi::Runtime &rt, double network, std::string payment, std::string stake);
        std::string base_address_payment_cred_jsi(jsi::Runtime &rt, std::string self);
        std::string base_address_stake_cred_jsi(jsi::Runtime &rt, std::string self);
        std::string base_address_to_address_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> base_address_from_address_jsi(jsi::Runtime &rt, std::string addr);

        std::string big_int_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string big_int_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string big_int_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string big_int_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string big_int_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string big_int_from_json_jsi(jsi::Runtime &rt, std::string json);
        bool big_int_is_zero_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> big_int_as_u64_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> big_int_as_int_jsi(jsi::Runtime &rt, std::string self);
        std::string big_int_from_str_jsi(jsi::Runtime &rt, std::string text);
        std::string big_int_to_str_jsi(jsi::Runtime &rt, std::string self);
        std::string big_int_add_jsi(jsi::Runtime &rt, std::string self, std::string other);
        std::string big_int_mul_jsi(jsi::Runtime &rt, std::string self, std::string other);
        std::string big_int_one_jsi(jsi::Runtime &rt);
        std::string big_int_increment_jsi(jsi::Runtime &rt, std::string self);
        std::string big_int_div_ceil_jsi(jsi::Runtime &rt, std::string self, std::string other);

        std::string big_num_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string big_num_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string big_num_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string big_num_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string big_num_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string big_num_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string big_num_from_str_jsi(jsi::Runtime &rt, std::string string);
        std::string big_num_to_str_jsi(jsi::Runtime &rt, std::string self);
        std::string big_num_zero_jsi(jsi::Runtime &rt);
        std::string big_num_one_jsi(jsi::Runtime &rt);
        bool big_num_is_zero_jsi(jsi::Runtime &rt, std::string self);
        std::string big_num_div_floor_jsi(jsi::Runtime &rt, std::string self, std::string other);
        std::string big_num_checked_mul_jsi(jsi::Runtime &rt, std::string self, std::string other);
        std::string big_num_checked_add_jsi(jsi::Runtime &rt, std::string self, std::string other);
        std::string big_num_checked_sub_jsi(jsi::Runtime &rt, std::string self, std::string other);
        std::string big_num_clamped_sub_jsi(jsi::Runtime &rt, std::string self, std::string other);
        double big_num_compare_jsi(jsi::Runtime &rt, std::string self, std::string rhs_value);
        bool big_num_less_than_jsi(jsi::Runtime &rt, std::string self, std::string rhs_value);
        std::string big_num_max_value_jsi(jsi::Runtime &rt);
        std::string big_num_max_jsi(jsi::Runtime &rt, std::string a, std::string b);

        std::string bip32_private_key_derive_jsi(jsi::Runtime &rt, std::string self, double index);
        std::string bip32_private_key_from_128_xprv_jsi(jsi::Runtime &rt, std::string bytes);
        std::string bip32_private_key_to_128_xprv_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_private_key_generate_ed25519_bip32_jsi(jsi::Runtime &rt);
        std::string bip32_private_key_to_raw_key_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_private_key_to_public_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_private_key_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string bip32_private_key_as_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_private_key_from_bech32_jsi(jsi::Runtime &rt, std::string bech32_str);
        std::string bip32_private_key_to_bech32_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_private_key_from_bip39_entropy_jsi(jsi::Runtime &rt, std::string entropy, std::string password);
        std::string bip32_private_key_chaincode_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_private_key_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_private_key_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);

        std::string bip32_public_key_derive_jsi(jsi::Runtime &rt, std::string self, double index);
        std::string bip32_public_key_to_raw_key_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_public_key_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string bip32_public_key_as_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_public_key_from_bech32_jsi(jsi::Runtime &rt, std::string bech32_str);
        std::string bip32_public_key_to_bech32_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_public_key_chaincode_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_public_key_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string bip32_public_key_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);

        std::string block_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string block_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string block_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string block_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string block_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string block_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string block_header_jsi(jsi::Runtime &rt, std::string self);
        std::string block_transaction_bodies_jsi(jsi::Runtime &rt, std::string self);
        std::string block_transaction_witness_sets_jsi(jsi::Runtime &rt, std::string self);
        std::string block_auxiliary_data_set_jsi(jsi::Runtime &rt, std::string self);
        std::string block_invalid_transactions_jsi(jsi::Runtime &rt, std::string self);
        std::string block_new_jsi(jsi::Runtime &rt, std::string header, std::string transaction_bodies, std::string transaction_witness_sets, std::string auxiliary_data_set, std::string invalid_transactions);

        std::string block_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string block_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string block_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string block_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string block_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string block_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string bootstrap_witness_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witness_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string bootstrap_witness_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witness_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string bootstrap_witness_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witness_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string bootstrap_witness_vkey_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witness_signature_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witness_chain_code_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witness_attributes_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witness_new_jsi(jsi::Runtime &rt, std::string vkey, std::string signature, std::string chain_code, std::string attributes);

        std::string bootstrap_witnesses_new_jsi(jsi::Runtime &rt);
        double bootstrap_witnesses_len_jsi(jsi::Runtime &rt, std::string self);
        std::string bootstrap_witnesses_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void bootstrap_witnesses_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string byron_address_to_base58_jsi(jsi::Runtime &rt, std::string self);
        std::string byron_address_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string byron_address_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        double byron_address_byron_protocol_magic_jsi(jsi::Runtime &rt, std::string self);
        std::string byron_address_attributes_jsi(jsi::Runtime &rt, std::string self);
        double byron_address_network_id_jsi(jsi::Runtime &rt, std::string self);
        std::string byron_address_from_base58_jsi(jsi::Runtime &rt, std::string s);
        std::string byron_address_icarus_from_key_jsi(jsi::Runtime &rt, std::string key, double protocol_magic);
        bool byron_address_is_valid_jsi(jsi::Runtime &rt, std::string s);
        std::string byron_address_to_address_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> byron_address_from_address_jsi(jsi::Runtime &rt, std::string addr);

        std::string certificate_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string certificate_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string certificate_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string certificate_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string certificate_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string certificate_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string certificate_new_stake_registration_jsi(jsi::Runtime &rt, std::string stake_registration);
        std::string certificate_new_stake_deregistration_jsi(jsi::Runtime &rt, std::string stake_deregistration);
        std::string certificate_new_stake_delegation_jsi(jsi::Runtime &rt, std::string stake_delegation);
        std::string certificate_new_pool_registration_jsi(jsi::Runtime &rt, std::string pool_registration);
        std::string certificate_new_pool_retirement_jsi(jsi::Runtime &rt, std::string pool_retirement);
        std::string certificate_new_genesis_key_delegation_jsi(jsi::Runtime &rt, std::string genesis_key_delegation);
        std::string certificate_new_move_instantaneous_rewards_cert_jsi(jsi::Runtime &rt, std::string move_instantaneous_rewards_cert);
        std::string certificate_new_committee_hot_auth_jsi(jsi::Runtime &rt, std::string committee_hot_auth);
        std::string certificate_new_committee_cold_resign_jsi(jsi::Runtime &rt, std::string committee_cold_resign);
        std::string certificate_new_drep_deregistration_jsi(jsi::Runtime &rt, std::string drep_deregistration);
        std::string certificate_new_drep_registration_jsi(jsi::Runtime &rt, std::string drep_registration);
        std::string certificate_new_drep_update_jsi(jsi::Runtime &rt, std::string drep_update);
        std::string certificate_new_stake_and_vote_delegation_jsi(jsi::Runtime &rt, std::string stake_and_vote_delegation);
        std::string certificate_new_stake_registration_and_delegation_jsi(jsi::Runtime &rt, std::string stake_registration_and_delegation);
        std::string certificate_new_stake_vote_registration_and_delegation_jsi(jsi::Runtime &rt, std::string stake_vote_registration_and_delegation);
        std::string certificate_new_vote_delegation_jsi(jsi::Runtime &rt, std::string vote_delegation);
        std::string certificate_new_vote_registration_and_delegation_jsi(jsi::Runtime &rt, std::string vote_registration_and_delegation);
        double certificate_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_stake_registration_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_stake_deregistration_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_stake_delegation_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_pool_registration_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_pool_retirement_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_genesis_key_delegation_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_move_instantaneous_rewards_cert_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_committee_hot_auth_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_committee_cold_resign_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_drep_deregistration_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_drep_registration_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_drep_update_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_stake_and_vote_delegation_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_stake_registration_and_delegation_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_stake_vote_registration_and_delegation_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_vote_delegation_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> certificate_as_vote_registration_and_delegation_jsi(jsi::Runtime &rt, std::string self);
        bool certificate_has_required_script_witness_jsi(jsi::Runtime &rt, std::string self);

        std::string certificates_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string certificates_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string certificates_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string certificates_new_jsi(jsi::Runtime &rt);
        double certificates_len_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void certificates_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string certificates_builder_new_jsi(jsi::Runtime &rt);
        void certificates_builder_add_jsi(jsi::Runtime &rt, std::string self, std::string cert);
        void certificates_builder_add_with_plutus_witness_jsi(jsi::Runtime &rt, std::string self, std::string cert, std::string witness);
        void certificates_builder_add_with_native_script_jsi(jsi::Runtime &rt, std::string self, std::string cert, std::string native_script_source);
        std::string certificates_builder_get_plutus_witnesses_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_builder_get_ref_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_builder_get_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_builder_get_certificates_refund_jsi(jsi::Runtime &rt, std::string self, std::string pool_deposit, std::string key_deposit);
        std::string certificates_builder_get_certificates_deposit_jsi(jsi::Runtime &rt, std::string self, std::string pool_deposit, std::string key_deposit);
        bool certificates_builder_has_plutus_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string certificates_builder_build_jsi(jsi::Runtime &rt, std::string self);

        std::string committee_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string committee_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string committee_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string committee_new_jsi(jsi::Runtime &rt, std::string quorum_threshold);
        std::string committee_members_keys_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_quorum_threshold_jsi(jsi::Runtime &rt, std::string self);
        void committee_add_member_jsi(jsi::Runtime &rt, std::string self, std::string committee_cold_credential, double epoch);
        std::optional<double> committee_get_member_epoch_jsi(jsi::Runtime &rt, std::string self, std::string committee_cold_credential);

        std::string committee_cold_resign_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_cold_resign_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string committee_cold_resign_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_cold_resign_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string committee_cold_resign_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_cold_resign_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string committee_cold_resign_committee_cold_key_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> committee_cold_resign_anchor_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_cold_resign_new_jsi(jsi::Runtime &rt, std::string committee_cold_key);
        std::string committee_cold_resign_new_with_anchor_jsi(jsi::Runtime &rt, std::string committee_cold_key, std::string anchor);
        bool committee_cold_resign_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string committee_hot_auth_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_hot_auth_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string committee_hot_auth_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_hot_auth_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string committee_hot_auth_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_hot_auth_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string committee_hot_auth_committee_cold_key_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_hot_auth_committee_hot_key_jsi(jsi::Runtime &rt, std::string self);
        std::string committee_hot_auth_new_jsi(jsi::Runtime &rt, std::string committee_cold_key, std::string committee_hot_key);
        bool committee_hot_auth_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string constitution_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string constitution_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string constitution_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string constitution_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string constitution_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string constitution_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string constitution_anchor_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> constitution_script_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string constitution_new_jsi(jsi::Runtime &rt, std::string anchor);
        std::string constitution_new_with_script_hash_jsi(jsi::Runtime &rt, std::string anchor, std::string script_hash);

        std::string constr_plutus_data_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string constr_plutus_data_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string constr_plutus_data_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string constr_plutus_data_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string constr_plutus_data_alternative_jsi(jsi::Runtime &rt, std::string self);
        std::string constr_plutus_data_data_jsi(jsi::Runtime &rt, std::string self);
        std::string constr_plutus_data_new_jsi(jsi::Runtime &rt, std::string alternative, std::string data);

        std::string cost_model_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string cost_model_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string cost_model_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string cost_model_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string cost_model_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string cost_model_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string cost_model_new_jsi(jsi::Runtime &rt);
        std::string cost_model_set_jsi(jsi::Runtime &rt, std::string self, double operation, std::string cost);
        std::string cost_model_get_jsi(jsi::Runtime &rt, std::string self, double operation);
        double cost_model_len_jsi(jsi::Runtime &rt, std::string self);

        std::string costmdls_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string costmdls_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string costmdls_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string costmdls_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string costmdls_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string costmdls_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string costmdls_new_jsi(jsi::Runtime &rt);
        double costmdls_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> costmdls_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> costmdls_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string costmdls_keys_jsi(jsi::Runtime &rt, std::string self);
        std::string costmdls_retain_language_versions_jsi(jsi::Runtime &rt, std::string self, std::string languages);

        std::string credential_from_keyhash_jsi(jsi::Runtime &rt, std::string hash);
        std::string credential_from_scripthash_jsi(jsi::Runtime &rt, std::string hash);
        std::optional<std::string> credential_to_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> credential_to_scripthash_jsi(jsi::Runtime &rt, std::string self);
        double credential_kind_jsi(jsi::Runtime &rt, std::string self);
        bool credential_has_script_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string credential_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string credential_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string credential_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string credential_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string credential_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string credential_from_json_jsi(jsi::Runtime &rt, std::string json);

        std::string credentials_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string credentials_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string credentials_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string credentials_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string credentials_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string credentials_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string credentials_new_jsi(jsi::Runtime &rt);
        double credentials_len_jsi(jsi::Runtime &rt, std::string self);
        std::string credentials_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void credentials_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string d_n_s_record_aor_a_a_a_a_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string d_n_s_record_aor_a_a_a_a_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string d_n_s_record_aor_a_a_a_a_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string d_n_s_record_aor_a_a_a_a_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string d_n_s_record_aor_a_a_a_a_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string d_n_s_record_aor_a_a_a_a_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string d_n_s_record_aor_a_a_a_a_new_jsi(jsi::Runtime &rt, std::string dns_name);
        std::string d_n_s_record_aor_a_a_a_a_record_jsi(jsi::Runtime &rt, std::string self);

        std::string d_n_s_record_s_r_v_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string d_n_s_record_s_r_v_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string d_n_s_record_s_r_v_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string d_n_s_record_s_r_v_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string d_n_s_record_s_r_v_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string d_n_s_record_s_r_v_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string d_n_s_record_s_r_v_new_jsi(jsi::Runtime &rt, std::string dns_name);
        std::string d_n_s_record_s_r_v_record_jsi(jsi::Runtime &rt, std::string self);

        std::string d_rep_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string d_rep_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string d_rep_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string d_rep_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string d_rep_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string d_rep_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string d_rep_new_key_hash_jsi(jsi::Runtime &rt, std::string key_hash);
        std::string d_rep_new_script_hash_jsi(jsi::Runtime &rt, std::string script_hash);
        std::string d_rep_new_always_abstain_jsi(jsi::Runtime &rt);
        std::string d_rep_new_always_no_confidence_jsi(jsi::Runtime &rt);
        double d_rep_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> d_rep_to_key_hash_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> d_rep_to_script_hash_jsi(jsi::Runtime &rt, std::string self);

        std::string data_cost_new_coins_per_word_jsi(jsi::Runtime &rt, std::string coins_per_word);
        std::string data_cost_new_coins_per_byte_jsi(jsi::Runtime &rt, std::string coins_per_byte);
        std::string data_cost_coins_per_byte_jsi(jsi::Runtime &rt, std::string self);

        std::string data_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string data_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string data_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string data_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string data_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string data_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string datum_source_new_jsi(jsi::Runtime &rt, std::string datum);
        std::string datum_source_new_ref_input_jsi(jsi::Runtime &rt, std::string input);

        std::string drep_deregistration_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_deregistration_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string drep_deregistration_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_deregistration_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string drep_deregistration_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_deregistration_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string drep_deregistration_voting_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_deregistration_coin_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_deregistration_new_jsi(jsi::Runtime &rt, std::string voting_credential, std::string coin);
        bool drep_deregistration_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string drep_registration_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_registration_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string drep_registration_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_registration_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string drep_registration_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_registration_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string drep_registration_voting_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_registration_coin_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> drep_registration_anchor_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_registration_new_jsi(jsi::Runtime &rt, std::string voting_credential, std::string coin);
        std::string drep_registration_new_with_anchor_jsi(jsi::Runtime &rt, std::string voting_credential, std::string coin, std::string anchor);

        std::string drep_update_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_update_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string drep_update_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_update_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string drep_update_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_update_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string drep_update_voting_credential_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> drep_update_anchor_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_update_new_jsi(jsi::Runtime &rt, std::string voting_credential);
        std::string drep_update_new_with_anchor_jsi(jsi::Runtime &rt, std::string voting_credential, std::string anchor);
        bool drep_update_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string drep_voting_thresholds_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string drep_voting_thresholds_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string drep_voting_thresholds_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string drep_voting_thresholds_new_jsi(jsi::Runtime &rt, std::string motion_no_confidence, std::string committee_normal, std::string committee_no_confidence, std::string update_constitution, std::string hard_fork_initiation, std::string pp_network_group, std::string pp_economic_group, std::string pp_technical_group, std::string pp_governance_group, std::string treasury_withdrawal);
        std::string drep_voting_thresholds_new_default_jsi(jsi::Runtime &rt);
        void drep_voting_thresholds_set_motion_no_confidence_jsi(jsi::Runtime &rt, std::string self, std::string motion_no_confidence);
        void drep_voting_thresholds_set_committee_normal_jsi(jsi::Runtime &rt, std::string self, std::string committee_normal);
        void drep_voting_thresholds_set_committee_no_confidence_jsi(jsi::Runtime &rt, std::string self, std::string committee_no_confidence);
        void drep_voting_thresholds_set_update_constitution_jsi(jsi::Runtime &rt, std::string self, std::string update_constitution);
        void drep_voting_thresholds_set_hard_fork_initiation_jsi(jsi::Runtime &rt, std::string self, std::string hard_fork_initiation);
        void drep_voting_thresholds_set_pp_network_group_jsi(jsi::Runtime &rt, std::string self, std::string pp_network_group);
        void drep_voting_thresholds_set_pp_economic_group_jsi(jsi::Runtime &rt, std::string self, std::string pp_economic_group);
        void drep_voting_thresholds_set_pp_technical_group_jsi(jsi::Runtime &rt, std::string self, std::string pp_technical_group);
        void drep_voting_thresholds_set_pp_governance_group_jsi(jsi::Runtime &rt, std::string self, std::string pp_governance_group);
        void drep_voting_thresholds_set_treasury_withdrawal_jsi(jsi::Runtime &rt, std::string self, std::string treasury_withdrawal);
        std::string drep_voting_thresholds_motion_no_confidence_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_committee_normal_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_committee_no_confidence_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_update_constitution_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_hard_fork_initiation_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_pp_network_group_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_pp_economic_group_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_pp_technical_group_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_pp_governance_group_jsi(jsi::Runtime &rt, std::string self);
        std::string drep_voting_thresholds_treasury_withdrawal_jsi(jsi::Runtime &rt, std::string self);

        std::string ed25519_key_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string ed25519_key_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_key_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string ed25519_key_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string ed25519_key_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_key_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string ed25519_key_hashes_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_key_hashes_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string ed25519_key_hashes_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_key_hashes_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string ed25519_key_hashes_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_key_hashes_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string ed25519_key_hashes_new_jsi(jsi::Runtime &rt);
        double ed25519_key_hashes_len_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_key_hashes_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void ed25519_key_hashes_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);
        std::optional<std::string> ed25519_key_hashes_to_option_jsi(jsi::Runtime &rt, std::string self);

        std::string ed25519_signature_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_signature_to_bech32_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_signature_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string ed25519_signature_from_bech32_jsi(jsi::Runtime &rt, std::string bech32_str);
        std::string ed25519_signature_from_hex_jsi(jsi::Runtime &rt, std::string input);
        std::string ed25519_signature_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);

        std::string enterprise_address_new_jsi(jsi::Runtime &rt, double network, std::string payment);
        std::string enterprise_address_payment_cred_jsi(jsi::Runtime &rt, std::string self);
        std::string enterprise_address_to_address_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> enterprise_address_from_address_jsi(jsi::Runtime &rt, std::string addr);

        std::string ex_unit_prices_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_unit_prices_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string ex_unit_prices_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_unit_prices_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string ex_unit_prices_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_unit_prices_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string ex_unit_prices_mem_price_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_unit_prices_step_price_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_unit_prices_new_jsi(jsi::Runtime &rt, std::string mem_price, std::string step_price);

        std::string ex_units_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_units_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string ex_units_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_units_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string ex_units_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_units_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string ex_units_mem_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_units_steps_jsi(jsi::Runtime &rt, std::string self);
        std::string ex_units_new_jsi(jsi::Runtime &rt, std::string mem, std::string steps);

        std::string fixed_transaction_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string fixed_transaction_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string fixed_transaction_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string fixed_transaction_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string fixed_transaction_new_jsi(jsi::Runtime &rt, std::string raw_body, std::string raw_witness_set, bool is_valid);
        std::string fixed_transaction_new_with_auxiliary_jsi(jsi::Runtime &rt, std::string raw_body, std::string raw_witness_set, std::string raw_auxiliary_data, bool is_valid);
        std::string fixed_transaction_body_jsi(jsi::Runtime &rt, std::string self);
        std::string fixed_transaction_raw_body_jsi(jsi::Runtime &rt, std::string self);
        void fixed_transaction_set_body_jsi(jsi::Runtime &rt, std::string self, std::string raw_body);
        void fixed_transaction_set_witness_set_jsi(jsi::Runtime &rt, std::string self, std::string raw_witness_set);
        std::string fixed_transaction_witness_set_jsi(jsi::Runtime &rt, std::string self);
        std::string fixed_transaction_raw_witness_set_jsi(jsi::Runtime &rt, std::string self);
        void fixed_transaction_set_is_valid_jsi(jsi::Runtime &rt, std::string self, bool valid);
        bool fixed_transaction_is_valid_jsi(jsi::Runtime &rt, std::string self);
        void fixed_transaction_set_auxiliary_data_jsi(jsi::Runtime &rt, std::string self, std::string raw_auxiliary_data);
        std::optional<std::string> fixed_transaction_auxiliary_data_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> fixed_transaction_raw_auxiliary_data_jsi(jsi::Runtime &rt, std::string self);

        std::string general_transaction_metadata_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string general_transaction_metadata_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string general_transaction_metadata_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string general_transaction_metadata_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string general_transaction_metadata_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string general_transaction_metadata_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string general_transaction_metadata_new_jsi(jsi::Runtime &rt);
        double general_transaction_metadata_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> general_transaction_metadata_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> general_transaction_metadata_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string general_transaction_metadata_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string genesis_delegate_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string genesis_delegate_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_delegate_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string genesis_delegate_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string genesis_delegate_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_delegate_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string genesis_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string genesis_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string genesis_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string genesis_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string genesis_hashes_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_hashes_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string genesis_hashes_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_hashes_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string genesis_hashes_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_hashes_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string genesis_hashes_new_jsi(jsi::Runtime &rt);
        double genesis_hashes_len_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_hashes_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void genesis_hashes_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string genesis_key_delegation_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_key_delegation_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string genesis_key_delegation_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_key_delegation_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string genesis_key_delegation_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_key_delegation_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string genesis_key_delegation_genesishash_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_key_delegation_genesis_delegate_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_key_delegation_vrf_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::string genesis_key_delegation_new_jsi(jsi::Runtime &rt, std::string genesishash, std::string genesis_delegate_hash, std::string vrf_keyhash);

        std::string governance_action_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string governance_action_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string governance_action_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string governance_action_new_parameter_change_action_jsi(jsi::Runtime &rt, std::string parameter_change_action);
        std::string governance_action_new_hard_fork_initiation_action_jsi(jsi::Runtime &rt, std::string hard_fork_initiation_action);
        std::string governance_action_new_treasury_withdrawals_action_jsi(jsi::Runtime &rt, std::string treasury_withdrawals_action);
        std::string governance_action_new_no_confidence_action_jsi(jsi::Runtime &rt, std::string no_confidence_action);
        std::string governance_action_new_new_committee_action_jsi(jsi::Runtime &rt, std::string new_committee_action);
        std::string governance_action_new_new_constitution_action_jsi(jsi::Runtime &rt, std::string new_constitution_action);
        std::string governance_action_new_info_action_jsi(jsi::Runtime &rt, std::string info_action);
        double governance_action_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> governance_action_as_parameter_change_action_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> governance_action_as_hard_fork_initiation_action_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> governance_action_as_treasury_withdrawals_action_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> governance_action_as_no_confidence_action_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> governance_action_as_new_committee_action_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> governance_action_as_new_constitution_action_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> governance_action_as_info_action_jsi(jsi::Runtime &rt, std::string self);

        std::string governance_action_id_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_id_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string governance_action_id_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_id_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string governance_action_id_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_id_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string governance_action_id_transaction_id_jsi(jsi::Runtime &rt, std::string self);
        double governance_action_id_index_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_id_new_jsi(jsi::Runtime &rt, std::string transaction_id, double index);

        std::string governance_action_ids_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string governance_action_ids_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string governance_action_ids_new_jsi(jsi::Runtime &rt);
        void governance_action_ids_add_jsi(jsi::Runtime &rt, std::string self, std::string governance_action_id);
        std::optional<std::string> governance_action_ids_get_jsi(jsi::Runtime &rt, std::string self, double index);
        double governance_action_ids_len_jsi(jsi::Runtime &rt, std::string self);

        std::string hard_fork_initiation_action_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string hard_fork_initiation_action_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string hard_fork_initiation_action_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string hard_fork_initiation_action_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string hard_fork_initiation_action_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string hard_fork_initiation_action_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::optional<std::string> hard_fork_initiation_action_gov_action_id_jsi(jsi::Runtime &rt, std::string self);
        std::string hard_fork_initiation_action_protocol_version_jsi(jsi::Runtime &rt, std::string self);
        std::string hard_fork_initiation_action_new_jsi(jsi::Runtime &rt, std::string protocol_version);
        std::string hard_fork_initiation_action_new_with_action_id_jsi(jsi::Runtime &rt, std::string gov_action_id, std::string protocol_version);

        std::string header_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string header_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string header_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string header_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string header_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string header_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string header_header_body_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_signature_jsi(jsi::Runtime &rt, std::string self);
        std::string header_new_jsi(jsi::Runtime &rt, std::string header_body, std::string body_signature);

        std::string header_body_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string header_body_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string header_body_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_from_json_jsi(jsi::Runtime &rt, std::string json);
        double header_body_block_number_jsi(jsi::Runtime &rt, std::string self);
        double header_body_slot_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_slot_bignum_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> header_body_prev_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_issuer_vkey_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_vrf_vkey_jsi(jsi::Runtime &rt, std::string self);
        bool header_body_has_nonce_and_leader_vrf_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> header_body_nonce_vrf_or_nothing_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> header_body_leader_vrf_or_nothing_jsi(jsi::Runtime &rt, std::string self);
        bool header_body_has_vrf_result_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> header_body_vrf_result_or_nothing_jsi(jsi::Runtime &rt, std::string self);
        double header_body_block_body_size_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_block_body_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_operational_cert_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_protocol_version_jsi(jsi::Runtime &rt, std::string self);
        std::string header_body_new_jsi(jsi::Runtime &rt, double block_number, double slot, std::string issuer_vkey, std::string vrf_vkey, std::string vrf_result, double block_body_size, std::string block_body_hash, std::string operational_cert, std::string protocol_version);
        std::string header_body_new_with_prev_hash_jsi(jsi::Runtime &rt, double block_number, double slot, std::string prev_hash, std::string issuer_vkey, std::string vrf_vkey, std::string vrf_result, double block_body_size, std::string block_body_hash, std::string operational_cert, std::string protocol_version);

        std::string header_body_new_headerbody_jsi(jsi::Runtime &rt, double block_number, std::string slot, std::string issuer_vkey, std::string vrf_vkey, std::string vrf_result, double block_body_size, std::string block_body_hash, std::string operational_cert, std::string protocol_version);
        std::string header_body_new_headerbody_with_prev_hash_jsi(jsi::Runtime &rt, double block_number, std::string slot, std::string prev_hash, std::string issuer_vkey, std::string vrf_vkey, std::string vrf_result, double block_body_size, std::string block_body_hash, std::string operational_cert, std::string protocol_version);


        std::string info_action_new_jsi(jsi::Runtime &rt);

        std::string input_with_script_witness_new_with_native_script_witness_jsi(jsi::Runtime &rt, std::string input, std::string witness);
        std::string input_with_script_witness_new_with_plutus_witness_jsi(jsi::Runtime &rt, std::string input, std::string witness);
        std::string input_with_script_witness_input_jsi(jsi::Runtime &rt, std::string self);

        std::string inputs_with_script_witness_new_jsi(jsi::Runtime &rt);
        void inputs_with_script_witness_add_jsi(jsi::Runtime &rt, std::string self, std::string input);
        std::string inputs_with_script_witness_get_jsi(jsi::Runtime &rt, std::string self, double index);
        double inputs_with_script_witness_len_jsi(jsi::Runtime &rt, std::string self);

        std::string int_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string int_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string int_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string int_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string int_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string int_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string int_new_jsi(jsi::Runtime &rt, std::string x);
        std::string int_new_negative_jsi(jsi::Runtime &rt, std::string x);
        std::string int_new_i32_jsi(jsi::Runtime &rt, double x);
        bool int_is_positive_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> int_as_positive_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> int_as_negative_jsi(jsi::Runtime &rt, std::string self);
        std::optional<double> int_as_i32_jsi(jsi::Runtime &rt, std::string self);
        std::optional<double> int_as_i32_or_nothing_jsi(jsi::Runtime &rt, std::string self);
        double int_as_i32_or_fail_jsi(jsi::Runtime &rt, std::string self);
        std::string int_to_str_jsi(jsi::Runtime &rt, std::string self);
        std::string int_from_str_jsi(jsi::Runtime &rt, std::string string);

        std::string ipv4_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string ipv4_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string ipv4_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string ipv4_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string ipv4_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string ipv4_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string ipv4_new_jsi(jsi::Runtime &rt, std::string data);
        std::string ipv4_ip_jsi(jsi::Runtime &rt, std::string self);

        std::string ipv6_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string ipv6_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string ipv6_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string ipv6_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string ipv6_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string ipv6_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string ipv6_new_jsi(jsi::Runtime &rt, std::string data);
        std::string ipv6_ip_jsi(jsi::Runtime &rt, std::string self);

        std::string k_e_s_signature_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string k_e_s_signature_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);

        std::string k_e_s_v_key_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string k_e_s_v_key_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string k_e_s_v_key_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string k_e_s_v_key_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string k_e_s_v_key_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string k_e_s_v_key_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string language_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string language_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string language_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string language_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string language_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string language_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string language_new_plutus_v1_jsi(jsi::Runtime &rt);
        std::string language_new_plutus_v2_jsi(jsi::Runtime &rt);
        std::string language_new_plutus_v3_jsi(jsi::Runtime &rt);
        double language_kind_jsi(jsi::Runtime &rt, std::string self);

        std::string languages_new_jsi(jsi::Runtime &rt);
        double languages_len_jsi(jsi::Runtime &rt, std::string self);
        std::string languages_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void languages_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);
        std::string languages_list_jsi(jsi::Runtime &rt);

        std::string legacy_daedalus_private_key_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string legacy_daedalus_private_key_as_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string legacy_daedalus_private_key_chaincode_jsi(jsi::Runtime &rt, std::string self);

        std::string linear_fee_constant_jsi(jsi::Runtime &rt, std::string self);
        std::string linear_fee_coefficient_jsi(jsi::Runtime &rt, std::string self);
        std::string linear_fee_new_jsi(jsi::Runtime &rt, std::string coefficient, std::string constant);

        std::string m_i_r_to_stake_credentials_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string m_i_r_to_stake_credentials_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string m_i_r_to_stake_credentials_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string m_i_r_to_stake_credentials_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string m_i_r_to_stake_credentials_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string m_i_r_to_stake_credentials_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string m_i_r_to_stake_credentials_new_jsi(jsi::Runtime &rt);
        double m_i_r_to_stake_credentials_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> m_i_r_to_stake_credentials_insert_jsi(jsi::Runtime &rt, std::string self, std::string cred, std::string delta);
        std::optional<std::string> m_i_r_to_stake_credentials_get_jsi(jsi::Runtime &rt, std::string self, std::string cred);
        std::string m_i_r_to_stake_credentials_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string metadata_list_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string metadata_list_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string metadata_list_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string metadata_list_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string metadata_list_new_jsi(jsi::Runtime &rt);
        double metadata_list_len_jsi(jsi::Runtime &rt, std::string self);
        std::string metadata_list_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void metadata_list_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string metadata_map_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string metadata_map_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string metadata_map_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string metadata_map_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string metadata_map_new_jsi(jsi::Runtime &rt);
        double metadata_map_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> metadata_map_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> metadata_map_insert_str_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> metadata_map_insert_i32_jsi(jsi::Runtime &rt, std::string self, double key, std::string value);
        std::string metadata_map_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string metadata_map_get_str_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string metadata_map_get_i32_jsi(jsi::Runtime &rt, std::string self, double key);
        bool metadata_map_has_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string metadata_map_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string mint_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string mint_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string mint_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string mint_new_jsi(jsi::Runtime &rt);
        std::string mint_new_from_entry_jsi(jsi::Runtime &rt, std::string key, std::string value);
        double mint_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> mint_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> mint_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::optional<std::string> mint_get_all_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string mint_keys_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_as_positive_multiasset_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_as_negative_multiasset_jsi(jsi::Runtime &rt, std::string self);

        std::string mint_assets_new_jsi(jsi::Runtime &rt);
        std::string mint_assets_new_from_entry_jsi(jsi::Runtime &rt, std::string key, std::string value);
        double mint_assets_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> mint_assets_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> mint_assets_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string mint_assets_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string mint_builder_new_jsi(jsi::Runtime &rt);
        void mint_builder_add_asset_jsi(jsi::Runtime &rt, std::string self, std::string mint, std::string asset_name, std::string amount);
        void mint_builder_set_asset_jsi(jsi::Runtime &rt, std::string self, std::string mint, std::string asset_name, std::string amount);
        std::string mint_builder_build_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_builder_get_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_builder_get_plutus_witnesses_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_builder_get_ref_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::string mint_builder_get_redeeemers_jsi(jsi::Runtime &rt, std::string self);
        bool mint_builder_has_plutus_scripts_jsi(jsi::Runtime &rt, std::string self);
        bool mint_builder_has_native_scripts_jsi(jsi::Runtime &rt, std::string self);

        std::string mint_witness_new_native_script_jsi(jsi::Runtime &rt, std::string native_script);
        std::string mint_witness_new_plutus_script_jsi(jsi::Runtime &rt, std::string plutus_script, std::string redeemer);


        std::string move_instantaneous_reward_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string move_instantaneous_reward_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string move_instantaneous_reward_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string move_instantaneous_reward_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string move_instantaneous_reward_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string move_instantaneous_reward_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string move_instantaneous_reward_new_to_other_pot_jsi(jsi::Runtime &rt, double pot, std::string amount);
        std::string move_instantaneous_reward_new_to_stake_creds_jsi(jsi::Runtime &rt, double pot, std::string amounts);
        double move_instantaneous_reward_pot_jsi(jsi::Runtime &rt, std::string self);
        double move_instantaneous_reward_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> move_instantaneous_reward_as_to_other_pot_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> move_instantaneous_reward_as_to_stake_creds_jsi(jsi::Runtime &rt, std::string self);

        std::string move_instantaneous_rewards_cert_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string move_instantaneous_rewards_cert_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string move_instantaneous_rewards_cert_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string move_instantaneous_rewards_cert_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string move_instantaneous_rewards_cert_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string move_instantaneous_rewards_cert_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string move_instantaneous_rewards_cert_move_instantaneous_reward_jsi(jsi::Runtime &rt, std::string self);
        std::string move_instantaneous_rewards_cert_new_jsi(jsi::Runtime &rt, std::string move_instantaneous_reward);

        std::string multi_asset_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_asset_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string multi_asset_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_asset_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string multi_asset_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_asset_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string multi_asset_new_jsi(jsi::Runtime &rt);
        double multi_asset_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> multi_asset_insert_jsi(jsi::Runtime &rt, std::string self, std::string policy_id, std::string assets);
        std::optional<std::string> multi_asset_get_jsi(jsi::Runtime &rt, std::string self, std::string policy_id);
        std::optional<std::string> multi_asset_set_asset_jsi(jsi::Runtime &rt, std::string self, std::string policy_id, std::string asset_name, std::string value);
        std::string multi_asset_get_asset_jsi(jsi::Runtime &rt, std::string self, std::string policy_id, std::string asset_name);
        std::string multi_asset_keys_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_asset_sub_jsi(jsi::Runtime &rt, std::string self, std::string rhs_ma);

        std::string multi_host_name_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_host_name_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string multi_host_name_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_host_name_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string multi_host_name_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_host_name_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string multi_host_name_dns_name_jsi(jsi::Runtime &rt, std::string self);
        std::string multi_host_name_new_jsi(jsi::Runtime &rt, std::string dns_name);

        std::string native_script_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string native_script_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string native_script_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string native_script_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string native_script_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string native_script_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string native_script_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string native_script_new_script_pubkey_jsi(jsi::Runtime &rt, std::string script_pubkey);
        std::string native_script_new_script_all_jsi(jsi::Runtime &rt, std::string script_all);
        std::string native_script_new_script_any_jsi(jsi::Runtime &rt, std::string script_any);
        std::string native_script_new_script_n_of_k_jsi(jsi::Runtime &rt, std::string script_n_of_k);
        std::string native_script_new_timelock_start_jsi(jsi::Runtime &rt, std::string timelock_start);
        std::string native_script_new_timelock_expiry_jsi(jsi::Runtime &rt, std::string timelock_expiry);
        double native_script_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> native_script_as_script_pubkey_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> native_script_as_script_all_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> native_script_as_script_any_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> native_script_as_script_n_of_k_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> native_script_as_timelock_start_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> native_script_as_timelock_expiry_jsi(jsi::Runtime &rt, std::string self);
        std::string native_script_get_required_signers_jsi(jsi::Runtime &rt, std::string self);

        std::string native_script_source_new_jsi(jsi::Runtime &rt, std::string script);
        std::string native_script_source_new_ref_input_jsi(jsi::Runtime &rt, std::string script_hash, std::string input, std::string required_signers);

        std::string native_scripts_new_jsi(jsi::Runtime &rt);
        double native_scripts_len_jsi(jsi::Runtime &rt, std::string self);
        std::string native_scripts_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void native_scripts_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string network_id_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string network_id_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string network_id_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string network_id_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string network_id_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string network_id_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string network_id_testnet_jsi(jsi::Runtime &rt);
        std::string network_id_mainnet_jsi(jsi::Runtime &rt);
        double network_id_kind_jsi(jsi::Runtime &rt, std::string self);

        std::string network_info_new_jsi(jsi::Runtime &rt, double network_id, double protocol_magic);
        double network_info_network_id_jsi(jsi::Runtime &rt, std::string self);
        double network_info_protocol_magic_jsi(jsi::Runtime &rt, std::string self);
        std::string network_info_testnet_preview_jsi(jsi::Runtime &rt);
        std::string network_info_testnet_preprod_jsi(jsi::Runtime &rt);
        std::string network_info_testnet_jsi(jsi::Runtime &rt);
        std::string network_info_mainnet_jsi(jsi::Runtime &rt);

        std::string new_constitution_action_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string new_constitution_action_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string new_constitution_action_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string new_constitution_action_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string new_constitution_action_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string new_constitution_action_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::optional<std::string> new_constitution_action_gov_action_id_jsi(jsi::Runtime &rt, std::string self);
        std::string new_constitution_action_constitution_jsi(jsi::Runtime &rt, std::string self);
        std::string new_constitution_action_new_jsi(jsi::Runtime &rt, std::string constitution);
        std::string new_constitution_action_new_with_action_id_jsi(jsi::Runtime &rt, std::string gov_action_id, std::string constitution);

        std::string no_confidence_action_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string no_confidence_action_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string no_confidence_action_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string no_confidence_action_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string no_confidence_action_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string no_confidence_action_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::optional<std::string> no_confidence_action_gov_action_id_jsi(jsi::Runtime &rt, std::string self);
        std::string no_confidence_action_new_jsi(jsi::Runtime &rt);
        std::string no_confidence_action_new_with_action_id_jsi(jsi::Runtime &rt, std::string gov_action_id);

        std::string nonce_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string nonce_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string nonce_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string nonce_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string nonce_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string nonce_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string nonce_new_identity_jsi(jsi::Runtime &rt);
        std::string nonce_new_from_hash_jsi(jsi::Runtime &rt, std::string hash);
        std::optional<std::string> nonce_get_hash_jsi(jsi::Runtime &rt, std::string self);

        std::string operational_cert_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string operational_cert_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string operational_cert_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string operational_cert_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string operational_cert_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string operational_cert_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string operational_cert_hot_vkey_jsi(jsi::Runtime &rt, std::string self);
        double operational_cert_sequence_number_jsi(jsi::Runtime &rt, std::string self);
        double operational_cert_kes_period_jsi(jsi::Runtime &rt, std::string self);
        std::string operational_cert_sigma_jsi(jsi::Runtime &rt, std::string self);
        std::string operational_cert_new_jsi(jsi::Runtime &rt, std::string hot_vkey, double sequence_number, double kes_period, std::string sigma);

        std::string output_datum_new_data_hash_jsi(jsi::Runtime &rt, std::string data_hash);
        std::string output_datum_new_data_jsi(jsi::Runtime &rt, std::string data);
        std::optional<std::string> output_datum_data_hash_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> output_datum_data_jsi(jsi::Runtime &rt, std::string self);

        std::string parameter_change_action_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string parameter_change_action_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string parameter_change_action_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string parameter_change_action_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string parameter_change_action_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string parameter_change_action_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::optional<std::string> parameter_change_action_gov_action_id_jsi(jsi::Runtime &rt, std::string self);
        std::string parameter_change_action_protocol_param_updates_jsi(jsi::Runtime &rt, std::string self);
        std::string parameter_change_action_new_jsi(jsi::Runtime &rt, std::string protocol_param_updates);
        std::string parameter_change_action_new_with_action_id_jsi(jsi::Runtime &rt, std::string gov_action_id, std::string protocol_param_updates);

        std::string plutus_data_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_data_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_data_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_data_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string plutus_data_new_constr_plutus_data_jsi(jsi::Runtime &rt, std::string constr_plutus_data);
        std::string plutus_data_new_empty_constr_plutus_data_jsi(jsi::Runtime &rt, std::string alternative);
        std::string plutus_data_new_single_value_constr_plutus_data_jsi(jsi::Runtime &rt, std::string alternative, std::string plutus_data);
        std::string plutus_data_new_map_jsi(jsi::Runtime &rt, std::string map);
        std::string plutus_data_new_list_jsi(jsi::Runtime &rt, std::string list);
        std::string plutus_data_new_integer_jsi(jsi::Runtime &rt, std::string integer);
        std::string plutus_data_new_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        double plutus_data_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> plutus_data_as_constr_plutus_data_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> plutus_data_as_map_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> plutus_data_as_list_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> plutus_data_as_integer_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> plutus_data_as_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_data_to_json_jsi(jsi::Runtime &rt, std::string self, double schema);
        std::string plutus_data_from_json_jsi(jsi::Runtime &rt, std::string json, double schema);
        std::string plutus_data_from_address_jsi(jsi::Runtime &rt, std::string address);

        std::string plutus_list_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_list_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_list_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_list_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string plutus_list_new_jsi(jsi::Runtime &rt);
        double plutus_list_len_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_list_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void plutus_list_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string plutus_map_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_map_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_map_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_map_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string plutus_map_new_jsi(jsi::Runtime &rt);
        double plutus_map_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> plutus_map_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> plutus_map_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string plutus_map_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string plutus_script_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_script_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_script_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_script_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string plutus_script_new_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_script_new_v2_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_script_new_v3_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_script_new_with_version_jsi(jsi::Runtime &rt, std::string bytes, std::string language);
        std::string plutus_script_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_script_from_bytes_v2_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_script_from_bytes_v3_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_script_from_bytes_with_version_jsi(jsi::Runtime &rt, std::string bytes, std::string language);
        std::string plutus_script_from_hex_with_version_jsi(jsi::Runtime &rt, std::string hex_str, std::string language);
        std::string plutus_script_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_script_language_version_jsi(jsi::Runtime &rt, std::string self);

        std::string plutus_script_source_new_jsi(jsi::Runtime &rt, std::string script);
        std::string plutus_script_source_new_ref_input_jsi(jsi::Runtime &rt, std::string script_hash, std::string input);
        std::string plutus_script_source_new_ref_input_with_lang_ver_jsi(jsi::Runtime &rt, std::string script_hash, std::string input, std::string lang_ver);

        std::string plutus_scripts_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_scripts_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string plutus_scripts_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_scripts_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string plutus_scripts_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_scripts_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string plutus_scripts_new_jsi(jsi::Runtime &rt);
        double plutus_scripts_len_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_scripts_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void plutus_scripts_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string plutus_witness_new_jsi(jsi::Runtime &rt, std::string script, std::string datum, std::string redeemer);
        std::string plutus_witness_new_with_ref_jsi(jsi::Runtime &rt, std::string script, std::string datum, std::string redeemer);
        std::string plutus_witness_new_without_datum_jsi(jsi::Runtime &rt, std::string script, std::string redeemer);
        std::string plutus_witness_new_with_ref_without_datum_jsi(jsi::Runtime &rt, std::string script, std::string redeemer);
        std::optional<std::string> plutus_witness_script_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> plutus_witness_datum_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_witness_redeemer_jsi(jsi::Runtime &rt, std::string self);

        std::string plutus_witnesses_new_jsi(jsi::Runtime &rt);
        double plutus_witnesses_len_jsi(jsi::Runtime &rt, std::string self);
        std::string plutus_witnesses_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void plutus_witnesses_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string pointer_new_jsi(jsi::Runtime &rt, double slot, double tx_index, double cert_index);
        std::string pointer_new_pointer_jsi(jsi::Runtime &rt, std::string slot, std::string tx_index, std::string cert_index);
        double pointer_slot_jsi(jsi::Runtime &rt, std::string self);
        double pointer_tx_index_jsi(jsi::Runtime &rt, std::string self);
        double pointer_cert_index_jsi(jsi::Runtime &rt, std::string self);
        std::string pointer_slot_bignum_jsi(jsi::Runtime &rt, std::string self);
        std::string pointer_tx_index_bignum_jsi(jsi::Runtime &rt, std::string self);
        std::string pointer_cert_index_bignum_jsi(jsi::Runtime &rt, std::string self);

        std::string pointer_address_new_jsi(jsi::Runtime &rt, double network, std::string payment, std::string stake);
        std::string pointer_address_payment_cred_jsi(jsi::Runtime &rt, std::string self);
        std::string pointer_address_stake_pointer_jsi(jsi::Runtime &rt, std::string self);
        std::string pointer_address_to_address_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> pointer_address_from_address_jsi(jsi::Runtime &rt, std::string addr);

        std::string pool_metadata_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_metadata_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string pool_metadata_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_metadata_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string pool_metadata_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_metadata_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string pool_metadata_url_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_metadata_pool_metadata_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_metadata_new_jsi(jsi::Runtime &rt, std::string url, std::string pool_metadata_hash);

        std::string pool_metadata_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string pool_metadata_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_metadata_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string pool_metadata_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string pool_metadata_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_metadata_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string pool_params_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string pool_params_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string pool_params_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string pool_params_operator_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_vrf_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_pledge_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_cost_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_margin_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_reward_account_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_pool_owners_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_relays_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> pool_params_pool_metadata_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_params_new_jsi(jsi::Runtime &rt, std::string operator_arg, std::string vrf_keyhash, std::string pledge, std::string cost, std::string margin, std::string reward_account, std::string pool_owners, std::string relays);
        std::string pool_params_new_with_pool_metadata_jsi(jsi::Runtime &rt, std::string operator_arg, std::string vrf_keyhash, std::string pledge, std::string cost, std::string margin, std::string reward_account, std::string pool_owners, std::string relays, std::string pool_metadata);


        std::string pool_registration_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_registration_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string pool_registration_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_registration_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string pool_registration_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_registration_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string pool_registration_pool_params_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_registration_new_jsi(jsi::Runtime &rt, std::string pool_params);

        std::string pool_retirement_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_retirement_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string pool_retirement_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_retirement_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string pool_retirement_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_retirement_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string pool_retirement_pool_keyhash_jsi(jsi::Runtime &rt, std::string self);
        double pool_retirement_epoch_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_retirement_new_jsi(jsi::Runtime &rt, std::string pool_keyhash, double epoch);

        std::string pool_voting_thresholds_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_voting_thresholds_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string pool_voting_thresholds_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_voting_thresholds_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string pool_voting_thresholds_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_voting_thresholds_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string pool_voting_thresholds_new_jsi(jsi::Runtime &rt, std::string motion_no_confidence, std::string committee_normal, std::string committee_no_confidence, std::string hard_fork_initiation);
        std::string pool_voting_thresholds_motion_no_confidence_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_voting_thresholds_committee_normal_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_voting_thresholds_committee_no_confidence_jsi(jsi::Runtime &rt, std::string self);
        std::string pool_voting_thresholds_hard_fork_initiation_jsi(jsi::Runtime &rt, std::string self);

        std::string private_key_to_public_jsi(jsi::Runtime &rt, std::string self);
        std::string private_key_generate_ed25519_jsi(jsi::Runtime &rt);
        std::string private_key_generate_ed25519extended_jsi(jsi::Runtime &rt);
        std::string private_key_from_bech32_jsi(jsi::Runtime &rt, std::string bech32_str);
        std::string private_key_to_bech32_jsi(jsi::Runtime &rt, std::string self);
        std::string private_key_as_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string private_key_from_extended_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string private_key_from_normal_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string private_key_sign_jsi(jsi::Runtime &rt, std::string self, std::string message);
        std::string private_key_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string private_key_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);

        std::string proposed_protocol_parameter_updates_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string proposed_protocol_parameter_updates_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string proposed_protocol_parameter_updates_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string proposed_protocol_parameter_updates_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string proposed_protocol_parameter_updates_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string proposed_protocol_parameter_updates_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string proposed_protocol_parameter_updates_new_jsi(jsi::Runtime &rt);
        double proposed_protocol_parameter_updates_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> proposed_protocol_parameter_updates_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> proposed_protocol_parameter_updates_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string proposed_protocol_parameter_updates_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string protocol_param_update_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_param_update_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string protocol_param_update_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_param_update_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string protocol_param_update_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_param_update_from_json_jsi(jsi::Runtime &rt, std::string json);
        void protocol_param_update_set_minfee_a_jsi(jsi::Runtime &rt, std::string self, std::string minfee_a);
        std::optional<std::string> protocol_param_update_minfee_a_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_minfee_b_jsi(jsi::Runtime &rt, std::string self, std::string minfee_b);
        std::optional<std::string> protocol_param_update_minfee_b_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_block_body_size_jsi(jsi::Runtime &rt, std::string self, double max_block_body_size);
        std::optional<double> protocol_param_update_max_block_body_size_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_tx_size_jsi(jsi::Runtime &rt, std::string self, double max_tx_size);
        std::optional<double> protocol_param_update_max_tx_size_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_block_header_size_jsi(jsi::Runtime &rt, std::string self, double max_block_header_size);
        std::optional<double> protocol_param_update_max_block_header_size_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_key_deposit_jsi(jsi::Runtime &rt, std::string self, std::string key_deposit);
        std::optional<std::string> protocol_param_update_key_deposit_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_pool_deposit_jsi(jsi::Runtime &rt, std::string self, std::string pool_deposit);
        std::optional<std::string> protocol_param_update_pool_deposit_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_epoch_jsi(jsi::Runtime &rt, std::string self, double max_epoch);
        std::optional<double> protocol_param_update_max_epoch_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_n_opt_jsi(jsi::Runtime &rt, std::string self, double n_opt);
        std::optional<double> protocol_param_update_n_opt_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_pool_pledge_influence_jsi(jsi::Runtime &rt, std::string self, std::string pool_pledge_influence);
        std::optional<std::string> protocol_param_update_pool_pledge_influence_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_expansion_rate_jsi(jsi::Runtime &rt, std::string self, std::string expansion_rate);
        std::optional<std::string> protocol_param_update_expansion_rate_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_treasury_growth_rate_jsi(jsi::Runtime &rt, std::string self, std::string treasury_growth_rate);
        std::optional<std::string> protocol_param_update_treasury_growth_rate_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> protocol_param_update_d_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> protocol_param_update_extra_entropy_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_protocol_version_jsi(jsi::Runtime &rt, std::string self, std::string protocol_version);
        std::optional<std::string> protocol_param_update_protocol_version_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_min_pool_cost_jsi(jsi::Runtime &rt, std::string self, std::string min_pool_cost);
        std::optional<std::string> protocol_param_update_min_pool_cost_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_ada_per_utxo_byte_jsi(jsi::Runtime &rt, std::string self, std::string ada_per_utxo_byte);
        std::optional<std::string> protocol_param_update_ada_per_utxo_byte_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_cost_models_jsi(jsi::Runtime &rt, std::string self, std::string cost_models);
        std::optional<std::string> protocol_param_update_cost_models_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_execution_costs_jsi(jsi::Runtime &rt, std::string self, std::string execution_costs);
        std::optional<std::string> protocol_param_update_execution_costs_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_tx_ex_units_jsi(jsi::Runtime &rt, std::string self, std::string max_tx_ex_units);
        std::optional<std::string> protocol_param_update_max_tx_ex_units_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_block_ex_units_jsi(jsi::Runtime &rt, std::string self, std::string max_block_ex_units);
        std::optional<std::string> protocol_param_update_max_block_ex_units_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_value_size_jsi(jsi::Runtime &rt, std::string self, double max_value_size);
        std::optional<double> protocol_param_update_max_value_size_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_collateral_percentage_jsi(jsi::Runtime &rt, std::string self, double collateral_percentage);
        std::optional<double> protocol_param_update_collateral_percentage_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_max_collateral_inputs_jsi(jsi::Runtime &rt, std::string self, double max_collateral_inputs);
        std::optional<double> protocol_param_update_max_collateral_inputs_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_pool_voting_thresholds_jsi(jsi::Runtime &rt, std::string self, std::string pool_voting_thresholds);
        std::optional<std::string> protocol_param_update_pool_voting_thresholds_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_drep_voting_thresholds_jsi(jsi::Runtime &rt, std::string self, std::string drep_voting_thresholds);
        std::optional<std::string> protocol_param_update_drep_voting_thresholds_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_min_committee_size_jsi(jsi::Runtime &rt, std::string self, double min_committee_size);
        std::optional<double> protocol_param_update_min_committee_size_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_committee_term_limit_jsi(jsi::Runtime &rt, std::string self, double committee_term_limit);
        std::optional<double> protocol_param_update_committee_term_limit_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_governance_action_validity_period_jsi(jsi::Runtime &rt, std::string self, double governance_action_validity_period);
        std::optional<double> protocol_param_update_governance_action_validity_period_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_governance_action_deposit_jsi(jsi::Runtime &rt, std::string self, std::string governance_action_deposit);
        std::optional<std::string> protocol_param_update_governance_action_deposit_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_drep_deposit_jsi(jsi::Runtime &rt, std::string self, std::string drep_deposit);
        std::optional<std::string> protocol_param_update_drep_deposit_jsi(jsi::Runtime &rt, std::string self);
        void protocol_param_update_set_drep_inactivity_period_jsi(jsi::Runtime &rt, std::string self, double drep_inactivity_period);
        std::optional<double> protocol_param_update_drep_inactivity_period_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_param_update_new_jsi(jsi::Runtime &rt);

        std::string protocol_version_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_version_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string protocol_version_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_version_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string protocol_version_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_version_from_json_jsi(jsi::Runtime &rt, std::string json);
        double protocol_version_major_jsi(jsi::Runtime &rt, std::string self);
        double protocol_version_minor_jsi(jsi::Runtime &rt, std::string self);
        std::string protocol_version_new_jsi(jsi::Runtime &rt, double major, double minor);

        std::string public_key_from_bech32_jsi(jsi::Runtime &rt, std::string bech32_str);
        std::string public_key_to_bech32_jsi(jsi::Runtime &rt, std::string self);
        std::string public_key_as_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string public_key_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        bool public_key_verify_jsi(jsi::Runtime &rt, std::string self, std::string data, std::string signature);
        std::string public_key_hash_jsi(jsi::Runtime &rt, std::string self);
        std::string public_key_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string public_key_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);

        std::string public_keys_new_jsi(jsi::Runtime &rt);
        double public_keys_size_jsi(jsi::Runtime &rt, std::string self);
        std::string public_keys_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void public_keys_add_jsi(jsi::Runtime &rt, std::string self, std::string key);

        std::string redeemer_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string redeemer_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string redeemer_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string redeemer_tag_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_index_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_data_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_ex_units_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_new_jsi(jsi::Runtime &rt, std::string tag, std::string index, std::string data, std::string ex_units);

        std::string redeemer_tag_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_tag_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string redeemer_tag_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_tag_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string redeemer_tag_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemer_tag_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string redeemer_tag_new_spend_jsi(jsi::Runtime &rt);
        std::string redeemer_tag_new_mint_jsi(jsi::Runtime &rt);
        std::string redeemer_tag_new_cert_jsi(jsi::Runtime &rt);
        std::string redeemer_tag_new_reward_jsi(jsi::Runtime &rt);
        std::string redeemer_tag_new_vote_jsi(jsi::Runtime &rt);
        std::string redeemer_tag_new_voting_proposal_jsi(jsi::Runtime &rt);
        double redeemer_tag_kind_jsi(jsi::Runtime &rt, std::string self);

        std::string redeemers_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemers_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string redeemers_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemers_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string redeemers_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemers_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string redeemers_new_jsi(jsi::Runtime &rt);
        double redeemers_len_jsi(jsi::Runtime &rt, std::string self);
        std::string redeemers_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void redeemers_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);
        std::string redeemers_total_ex_units_jsi(jsi::Runtime &rt, std::string self);

        std::string relay_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string relay_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string relay_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string relay_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string relay_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string relay_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string relay_new_single_host_addr_jsi(jsi::Runtime &rt, std::string single_host_addr);
        std::string relay_new_single_host_name_jsi(jsi::Runtime &rt, std::string single_host_name);
        std::string relay_new_multi_host_name_jsi(jsi::Runtime &rt, std::string multi_host_name);
        double relay_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> relay_as_single_host_addr_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> relay_as_single_host_name_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> relay_as_multi_host_name_jsi(jsi::Runtime &rt, std::string self);

        std::string relays_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string relays_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string relays_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string relays_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string relays_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string relays_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string relays_new_jsi(jsi::Runtime &rt);
        double relays_len_jsi(jsi::Runtime &rt, std::string self);
        std::string relays_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void relays_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string reward_address_new_jsi(jsi::Runtime &rt, double network, std::string payment);
        std::string reward_address_payment_cred_jsi(jsi::Runtime &rt, std::string self);
        std::string reward_address_to_address_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> reward_address_from_address_jsi(jsi::Runtime &rt, std::string addr);

        std::string reward_addresses_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string reward_addresses_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string reward_addresses_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string reward_addresses_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string reward_addresses_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string reward_addresses_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string reward_addresses_new_jsi(jsi::Runtime &rt);
        double reward_addresses_len_jsi(jsi::Runtime &rt, std::string self);
        std::string reward_addresses_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void reward_addresses_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string script_all_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_all_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_all_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_all_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string script_all_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string script_all_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string script_all_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string script_all_new_jsi(jsi::Runtime &rt, std::string native_scripts);

        std::string script_any_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_any_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_any_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_any_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string script_any_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string script_any_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string script_any_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string script_any_new_jsi(jsi::Runtime &rt, std::string native_scripts);

        std::string script_data_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_data_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_data_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string script_data_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string script_data_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_data_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string script_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string script_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string script_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string script_hashes_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_hashes_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_hashes_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_hashes_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string script_hashes_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string script_hashes_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string script_hashes_new_jsi(jsi::Runtime &rt);
        double script_hashes_len_jsi(jsi::Runtime &rt, std::string self);
        std::string script_hashes_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void script_hashes_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string script_n_of_k_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_n_of_k_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_n_of_k_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_n_of_k_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string script_n_of_k_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string script_n_of_k_from_json_jsi(jsi::Runtime &rt, std::string json);
        double script_n_of_k_n_jsi(jsi::Runtime &rt, std::string self);
        std::string script_n_of_k_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string script_n_of_k_new_jsi(jsi::Runtime &rt, double n, std::string native_scripts);

        std::string script_pubkey_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_pubkey_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_pubkey_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_pubkey_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string script_pubkey_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string script_pubkey_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string script_pubkey_addr_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::string script_pubkey_new_jsi(jsi::Runtime &rt, std::string addr_keyhash);

        std::string script_ref_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string script_ref_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string script_ref_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string script_ref_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string script_ref_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string script_ref_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string script_ref_new_native_script_jsi(jsi::Runtime &rt, std::string native_script);
        std::string script_ref_new_plutus_script_jsi(jsi::Runtime &rt, std::string plutus_script);
        bool script_ref_is_native_script_jsi(jsi::Runtime &rt, std::string self);
        bool script_ref_is_plutus_script_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> script_ref_native_script_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> script_ref_plutus_script_jsi(jsi::Runtime &rt, std::string self);

        std::string single_host_addr_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_addr_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string single_host_addr_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_addr_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string single_host_addr_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_addr_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::optional<double> single_host_addr_port_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> single_host_addr_ipv4_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> single_host_addr_ipv6_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_addr_new_jsi(jsi::Runtime &rt);
        std::string single_host_addr_new_with_port_jsi(jsi::Runtime &rt, double port);
        std::string single_host_addr_new_with_ipv4_jsi(jsi::Runtime &rt, std::string ipv4);
        std::string single_host_addr_new_with_port_ipv4_jsi(jsi::Runtime &rt, double port, std::string ipv4);
        std::string single_host_addr_new_with_ipv6_jsi(jsi::Runtime &rt, std::string ipv6);
        std::string single_host_addr_new_with_port_ipv6_jsi(jsi::Runtime &rt, double port, std::string ipv6);
        std::string single_host_addr_new_with_ipv4_ipv6_jsi(jsi::Runtime &rt, std::string ipv4, std::string ipv6);
        std::string single_host_addr_new_with_port_ipv4_ipv6_jsi(jsi::Runtime &rt, double port, std::string ipv4, std::string ipv6);


        std::string single_host_name_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_name_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string single_host_name_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_name_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string single_host_name_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_name_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::optional<double> single_host_name_port_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_name_dns_name_jsi(jsi::Runtime &rt, std::string self);
        std::string single_host_name_new_jsi(jsi::Runtime &rt, std::string dns_name);
        std::string single_host_name_new_with_port_jsi(jsi::Runtime &rt, double port, std::string dns_name);


        std::string stake_and_vote_delegation_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_and_vote_delegation_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string stake_and_vote_delegation_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_and_vote_delegation_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string stake_and_vote_delegation_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_and_vote_delegation_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string stake_and_vote_delegation_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_and_vote_delegation_pool_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_and_vote_delegation_drep_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_and_vote_delegation_new_jsi(jsi::Runtime &rt, std::string stake_credential, std::string pool_keyhash, std::string drep);
        bool stake_and_vote_delegation_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string stake_delegation_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_delegation_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string stake_delegation_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_delegation_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string stake_delegation_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_delegation_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string stake_delegation_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_delegation_pool_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_delegation_new_jsi(jsi::Runtime &rt, std::string stake_credential, std::string pool_keyhash);
        bool stake_delegation_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string stake_deregistration_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_deregistration_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string stake_deregistration_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_deregistration_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string stake_deregistration_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_deregistration_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string stake_deregistration_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> stake_deregistration_coin_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_deregistration_new_jsi(jsi::Runtime &rt, std::string stake_credential);
        std::string stake_deregistration_new_with_coin_jsi(jsi::Runtime &rt, std::string stake_credential, std::string coin);
        bool stake_deregistration_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string stake_registration_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string stake_registration_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string stake_registration_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string stake_registration_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> stake_registration_coin_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_new_jsi(jsi::Runtime &rt, std::string stake_credential);
        std::string stake_registration_new_with_coin_jsi(jsi::Runtime &rt, std::string stake_credential, std::string coin);
        bool stake_registration_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string stake_registration_and_delegation_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_and_delegation_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string stake_registration_and_delegation_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_and_delegation_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string stake_registration_and_delegation_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_and_delegation_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string stake_registration_and_delegation_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_and_delegation_pool_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_and_delegation_coin_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_registration_and_delegation_new_jsi(jsi::Runtime &rt, std::string stake_credential, std::string pool_keyhash, std::string coin);
        bool stake_registration_and_delegation_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string stake_vote_registration_and_delegation_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_vote_registration_and_delegation_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string stake_vote_registration_and_delegation_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_vote_registration_and_delegation_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string stake_vote_registration_and_delegation_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_vote_registration_and_delegation_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string stake_vote_registration_and_delegation_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_vote_registration_and_delegation_pool_keyhash_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_vote_registration_and_delegation_drep_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_vote_registration_and_delegation_coin_jsi(jsi::Runtime &rt, std::string self);
        std::string stake_vote_registration_and_delegation_new_jsi(jsi::Runtime &rt, std::string stake_credential, std::string pool_keyhash, std::string drep, std::string coin);
        bool stake_vote_registration_and_delegation_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string strings_new_jsi(jsi::Runtime &rt);
        double strings_len_jsi(jsi::Runtime &rt, std::string self);
        std::string strings_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void strings_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string timelock_expiry_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_expiry_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string timelock_expiry_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_expiry_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string timelock_expiry_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_expiry_from_json_jsi(jsi::Runtime &rt, std::string json);
        double timelock_expiry_slot_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_expiry_slot_bignum_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_expiry_new_jsi(jsi::Runtime &rt, double slot);
        std::string timelock_expiry_new_timelockexpiry_jsi(jsi::Runtime &rt, std::string slot);

        std::string timelock_start_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_start_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string timelock_start_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_start_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string timelock_start_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_start_from_json_jsi(jsi::Runtime &rt, std::string json);
        double timelock_start_slot_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_start_slot_bignum_jsi(jsi::Runtime &rt, std::string self);
        std::string timelock_start_new_jsi(jsi::Runtime &rt, double slot);
        std::string timelock_start_new_timelockstart_jsi(jsi::Runtime &rt, std::string slot);

        std::string transaction_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_body_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_set_jsi(jsi::Runtime &rt, std::string self);
        bool transaction_is_valid_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_auxiliary_data_jsi(jsi::Runtime &rt, std::string self);
        void transaction_set_is_valid_jsi(jsi::Runtime &rt, std::string self, bool valid);
        std::string transaction_new_jsi(jsi::Runtime &rt, std::string body, std::string witness_set);
        std::string transaction_new_with_auxiliary_data_jsi(jsi::Runtime &rt, std::string body, std::string witness_set, std::string auxiliary_data);


        double transaction_batch_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_batch_get_jsi(jsi::Runtime &rt, std::string self, double index);

        double transaction_batch_list_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_batch_list_get_jsi(jsi::Runtime &rt, std::string self, double index);

        std::string transaction_bodies_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_bodies_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_bodies_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_bodies_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_bodies_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_bodies_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_bodies_new_jsi(jsi::Runtime &rt);
        double transaction_bodies_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_bodies_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void transaction_bodies_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string transaction_body_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_body_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_body_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_body_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_body_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_body_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_body_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_body_outputs_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_body_fee_jsi(jsi::Runtime &rt, std::string self);
        std::optional<double> transaction_body_ttl_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_body_ttl_bignum_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_ttl_jsi(jsi::Runtime &rt, std::string self, std::string ttl);
        void transaction_body_remove_ttl_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_certs_jsi(jsi::Runtime &rt, std::string self, std::string certs);
        std::optional<std::string> transaction_body_certs_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_withdrawals_jsi(jsi::Runtime &rt, std::string self, std::string withdrawals);
        std::optional<std::string> transaction_body_withdrawals_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_update_jsi(jsi::Runtime &rt, std::string self, std::string update);
        std::optional<std::string> transaction_body_update_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_auxiliary_data_hash_jsi(jsi::Runtime &rt, std::string self, std::string auxiliary_data_hash);
        std::optional<std::string> transaction_body_auxiliary_data_hash_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_validity_start_interval_jsi(jsi::Runtime &rt, std::string self, double validity_start_interval);
        void transaction_body_set_validity_start_interval_bignum_jsi(jsi::Runtime &rt, std::string self, std::string validity_start_interval);
        std::optional<std::string> transaction_body_validity_start_interval_bignum_jsi(jsi::Runtime &rt, std::string self);
        std::optional<double> transaction_body_validity_start_interval_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_mint_jsi(jsi::Runtime &rt, std::string self, std::string mint);
        std::optional<std::string> transaction_body_mint_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_body_multiassets_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_reference_inputs_jsi(jsi::Runtime &rt, std::string self, std::string reference_inputs);
        std::optional<std::string> transaction_body_reference_inputs_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_script_data_hash_jsi(jsi::Runtime &rt, std::string self, std::string script_data_hash);
        std::optional<std::string> transaction_body_script_data_hash_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_collateral_jsi(jsi::Runtime &rt, std::string self, std::string collateral);
        std::optional<std::string> transaction_body_collateral_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_required_signers_jsi(jsi::Runtime &rt, std::string self, std::string required_signers);
        std::optional<std::string> transaction_body_required_signers_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_network_id_jsi(jsi::Runtime &rt, std::string self, std::string network_id);
        std::optional<std::string> transaction_body_network_id_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_collateral_return_jsi(jsi::Runtime &rt, std::string self, std::string collateral_return);
        std::optional<std::string> transaction_body_collateral_return_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_total_collateral_jsi(jsi::Runtime &rt, std::string self, std::string total_collateral);
        std::optional<std::string> transaction_body_total_collateral_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_voting_procedures_jsi(jsi::Runtime &rt, std::string self, std::string voting_procedures);
        std::optional<std::string> transaction_body_voting_procedures_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_voting_proposals_jsi(jsi::Runtime &rt, std::string self, std::string voting_proposals);
        std::optional<std::string> transaction_body_voting_proposals_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_donation_jsi(jsi::Runtime &rt, std::string self, std::string donation);
        std::optional<std::string> transaction_body_donation_jsi(jsi::Runtime &rt, std::string self);
        void transaction_body_set_current_treasury_value_jsi(jsi::Runtime &rt, std::string self, std::string current_treasury_value);
        std::optional<std::string> transaction_body_current_treasury_value_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_body_new_jsi(jsi::Runtime &rt, std::string inputs, std::string outputs, std::string fee);
        std::string transaction_body_new_with_ttl_jsi(jsi::Runtime &rt, std::string inputs, std::string outputs, std::string fee, double ttl);

        std::string transaction_body_new_tx_body_jsi(jsi::Runtime &rt, std::string inputs, std::string outputs, std::string fee);

        void transaction_builder_add_inputs_from_jsi(jsi::Runtime &rt, std::string self, std::string inputs, double strategy);
        void transaction_builder_set_inputs_jsi(jsi::Runtime &rt, std::string self, std::string inputs);
        void transaction_builder_set_collateral_jsi(jsi::Runtime &rt, std::string self, std::string collateral);
        void transaction_builder_set_collateral_return_jsi(jsi::Runtime &rt, std::string self, std::string collateral_return);
        void transaction_builder_set_collateral_return_and_total_jsi(jsi::Runtime &rt, std::string self, std::string collateral_return);
        void transaction_builder_set_total_collateral_jsi(jsi::Runtime &rt, std::string self, std::string total_collateral);
        void transaction_builder_set_total_collateral_and_return_jsi(jsi::Runtime &rt, std::string self, std::string total_collateral, std::string return_address);
        void transaction_builder_add_reference_input_jsi(jsi::Runtime &rt, std::string self, std::string reference_input);
        void transaction_builder_add_key_input_jsi(jsi::Runtime &rt, std::string self, std::string hash, std::string input, std::string amount);
        void transaction_builder_add_script_input_jsi(jsi::Runtime &rt, std::string self, std::string hash, std::string input, std::string amount);
        void transaction_builder_add_native_script_input_jsi(jsi::Runtime &rt, std::string self, std::string script, std::string input, std::string amount);
        void transaction_builder_add_plutus_script_input_jsi(jsi::Runtime &rt, std::string self, std::string witness, std::string input, std::string amount);
        void transaction_builder_add_bootstrap_input_jsi(jsi::Runtime &rt, std::string self, std::string hash, std::string input, std::string amount);
        void transaction_builder_add_input_jsi(jsi::Runtime &rt, std::string self, std::string address, std::string input, std::string amount);
        double transaction_builder_count_missing_input_scripts_jsi(jsi::Runtime &rt, std::string self);
        double transaction_builder_add_required_native_input_scripts_jsi(jsi::Runtime &rt, std::string self, std::string scripts);
        double transaction_builder_add_required_plutus_input_scripts_jsi(jsi::Runtime &rt, std::string self, std::string scripts);
        std::optional<std::string> transaction_builder_get_native_input_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_builder_get_plutus_input_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_fee_for_input_jsi(jsi::Runtime &rt, std::string self, std::string address, std::string input, std::string amount);
        void transaction_builder_add_output_jsi(jsi::Runtime &rt, std::string self, std::string output);
        std::string transaction_builder_fee_for_output_jsi(jsi::Runtime &rt, std::string self, std::string output);
        void transaction_builder_set_fee_jsi(jsi::Runtime &rt, std::string self, std::string fee);
        void transaction_builder_set_ttl_jsi(jsi::Runtime &rt, std::string self, double ttl);
        void transaction_builder_set_ttl_bignum_jsi(jsi::Runtime &rt, std::string self, std::string ttl);
        void transaction_builder_set_validity_start_interval_jsi(jsi::Runtime &rt, std::string self, double validity_start_interval);
        void transaction_builder_set_validity_start_interval_bignum_jsi(jsi::Runtime &rt, std::string self, std::string validity_start_interval);
        void transaction_builder_set_certs_jsi(jsi::Runtime &rt, std::string self, std::string certs);
        void transaction_builder_set_certs_builder_jsi(jsi::Runtime &rt, std::string self, std::string certs);
        void transaction_builder_set_withdrawals_jsi(jsi::Runtime &rt, std::string self, std::string withdrawals);
        void transaction_builder_set_withdrawals_builder_jsi(jsi::Runtime &rt, std::string self, std::string withdrawals);
        void transaction_builder_set_voting_builder_jsi(jsi::Runtime &rt, std::string self, std::string voting_builder);
        void transaction_builder_set_voting_proposal_builder_jsi(jsi::Runtime &rt, std::string self, std::string voting_proposal_builder);
        std::optional<std::string> transaction_builder_get_auxiliary_data_jsi(jsi::Runtime &rt, std::string self);
        void transaction_builder_set_auxiliary_data_jsi(jsi::Runtime &rt, std::string self, std::string auxiliary_data);
        void transaction_builder_set_metadata_jsi(jsi::Runtime &rt, std::string self, std::string metadata);
        void transaction_builder_add_metadatum_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string val);
        void transaction_builder_add_json_metadatum_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string val);
        void transaction_builder_add_json_metadatum_with_schema_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string val, double schema);
        void transaction_builder_set_mint_builder_jsi(jsi::Runtime &rt, std::string self, std::string mint_builder);
        std::optional<std::string> transaction_builder_get_mint_builder_jsi(jsi::Runtime &rt, std::string self);
        void transaction_builder_set_mint_jsi(jsi::Runtime &rt, std::string self, std::string mint, std::string mint_scripts);
        std::optional<std::string> transaction_builder_get_mint_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_builder_get_mint_scripts_jsi(jsi::Runtime &rt, std::string self);
        void transaction_builder_set_mint_asset_jsi(jsi::Runtime &rt, std::string self, std::string policy_script, std::string mint_assets);
        void transaction_builder_add_mint_asset_jsi(jsi::Runtime &rt, std::string self, std::string policy_script, std::string asset_name, std::string amount);
        void transaction_builder_add_mint_asset_and_output_jsi(jsi::Runtime &rt, std::string self, std::string policy_script, std::string asset_name, std::string amount, std::string output_builder, std::string output_coin);
        void transaction_builder_add_mint_asset_and_output_min_required_coin_jsi(jsi::Runtime &rt, std::string self, std::string policy_script, std::string asset_name, std::string amount, std::string output_builder);
        void transaction_builder_add_extra_witness_datum_jsi(jsi::Runtime &rt, std::string self, std::string datum);
        std::optional<std::string> transaction_builder_get_extra_witness_datums_jsi(jsi::Runtime &rt, std::string self);
        void transaction_builder_set_donation_jsi(jsi::Runtime &rt, std::string self, std::string donation);
        std::optional<std::string> transaction_builder_get_donation_jsi(jsi::Runtime &rt, std::string self);
        void transaction_builder_set_current_treasury_value_jsi(jsi::Runtime &rt, std::string self, std::string current_treasury_value);
        std::optional<std::string> transaction_builder_get_current_treasury_value_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_new_jsi(jsi::Runtime &rt, std::string cfg);
        std::string transaction_builder_get_reference_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_get_explicit_input_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_get_implicit_input_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_get_total_input_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_get_total_output_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_get_explicit_output_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_get_deposit_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_builder_get_fee_if_set_jsi(jsi::Runtime &rt, std::string self);
        bool transaction_builder_add_change_if_needed_jsi(jsi::Runtime &rt, std::string self, std::string address);
        bool transaction_builder_add_change_if_needed_with_datum_jsi(jsi::Runtime &rt, std::string self, std::string address, std::string plutus_data);
        void transaction_builder_calc_script_data_hash_jsi(jsi::Runtime &rt, std::string self, std::string cost_models);
        void transaction_builder_set_script_data_hash_jsi(jsi::Runtime &rt, std::string self, std::string hash);
        void transaction_builder_remove_script_data_hash_jsi(jsi::Runtime &rt, std::string self);
        void transaction_builder_add_required_signer_jsi(jsi::Runtime &rt, std::string self, std::string key);
        double transaction_builder_full_size_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_output_sizes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_build_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_build_tx_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_build_tx_unsafe_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_builder_min_fee_jsi(jsi::Runtime &rt, std::string self);


        std::string transaction_builder_config_builder_new_jsi(jsi::Runtime &rt);
        std::string transaction_builder_config_builder_fee_algo_jsi(jsi::Runtime &rt, std::string self, std::string fee_algo);
        std::string transaction_builder_config_builder_coins_per_utxo_word_jsi(jsi::Runtime &rt, std::string self, std::string coins_per_utxo_word);
        std::string transaction_builder_config_builder_coins_per_utxo_byte_jsi(jsi::Runtime &rt, std::string self, std::string coins_per_utxo_byte);
        std::string transaction_builder_config_builder_ex_unit_prices_jsi(jsi::Runtime &rt, std::string self, std::string ex_unit_prices);
        std::string transaction_builder_config_builder_pool_deposit_jsi(jsi::Runtime &rt, std::string self, std::string pool_deposit);
        std::string transaction_builder_config_builder_key_deposit_jsi(jsi::Runtime &rt, std::string self, std::string key_deposit);
        std::string transaction_builder_config_builder_max_value_size_jsi(jsi::Runtime &rt, std::string self, double max_value_size);
        std::string transaction_builder_config_builder_max_tx_size_jsi(jsi::Runtime &rt, std::string self, double max_tx_size);
        std::string transaction_builder_config_builder_prefer_pure_change_jsi(jsi::Runtime &rt, std::string self, bool prefer_pure_change);
        std::string transaction_builder_config_builder_build_jsi(jsi::Runtime &rt, std::string self);

        std::string transaction_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string transaction_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string transaction_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string transaction_input_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_input_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_input_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_input_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_input_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_input_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_input_transaction_id_jsi(jsi::Runtime &rt, std::string self);
        double transaction_input_index_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_input_new_jsi(jsi::Runtime &rt, std::string transaction_id, double index);

        std::string transaction_inputs_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_inputs_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_inputs_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_inputs_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_inputs_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_inputs_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_inputs_new_jsi(jsi::Runtime &rt);
        double transaction_inputs_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_inputs_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void transaction_inputs_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);
        std::optional<std::string> transaction_inputs_to_option_jsi(jsi::Runtime &rt, std::string self);

        std::string transaction_metadatum_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_metadatum_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_metadatum_new_map_jsi(jsi::Runtime &rt, std::string map);
        std::string transaction_metadatum_new_list_jsi(jsi::Runtime &rt, std::string list);
        std::string transaction_metadatum_new_int_jsi(jsi::Runtime &rt, std::string int_value);
        std::string transaction_metadatum_new_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_metadatum_new_text_jsi(jsi::Runtime &rt, std::string text);
        double transaction_metadatum_kind_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_as_map_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_as_list_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_as_int_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_as_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_as_text_jsi(jsi::Runtime &rt, std::string self);

        std::string transaction_metadatum_labels_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_labels_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_metadatum_labels_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_labels_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_metadatum_labels_new_jsi(jsi::Runtime &rt);
        double transaction_metadatum_labels_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_metadatum_labels_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void transaction_metadatum_labels_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string transaction_output_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_output_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_output_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_output_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_output_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_output_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_output_address_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_output_amount_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_output_data_hash_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_output_plutus_data_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> transaction_output_script_ref_jsi(jsi::Runtime &rt, std::string self);
        void transaction_output_set_script_ref_jsi(jsi::Runtime &rt, std::string self, std::string script_ref);
        void transaction_output_set_plutus_data_jsi(jsi::Runtime &rt, std::string self, std::string data);
        void transaction_output_set_data_hash_jsi(jsi::Runtime &rt, std::string self, std::string data_hash);
        bool transaction_output_has_plutus_data_jsi(jsi::Runtime &rt, std::string self);
        bool transaction_output_has_data_hash_jsi(jsi::Runtime &rt, std::string self);
        bool transaction_output_has_script_ref_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_output_new_jsi(jsi::Runtime &rt, std::string address, std::string amount);
        std::optional<double> transaction_output_serialization_format_jsi(jsi::Runtime &rt, std::string self);

        std::string transaction_output_amount_builder_with_value_jsi(jsi::Runtime &rt, std::string self, std::string amount);
        std::string transaction_output_amount_builder_with_coin_jsi(jsi::Runtime &rt, std::string self, std::string coin);
        std::string transaction_output_amount_builder_with_coin_and_asset_jsi(jsi::Runtime &rt, std::string self, std::string coin, std::string multiasset);
        std::string transaction_output_amount_builder_with_asset_and_min_required_coin_jsi(jsi::Runtime &rt, std::string self, std::string multiasset, std::string coins_per_utxo_word);
        std::string transaction_output_amount_builder_with_asset_and_min_required_coin_by_utxo_cost_jsi(jsi::Runtime &rt, std::string self, std::string multiasset, std::string data_cost);
        std::string transaction_output_amount_builder_build_jsi(jsi::Runtime &rt, std::string self);

        std::string transaction_output_builder_new_jsi(jsi::Runtime &rt);
        std::string transaction_output_builder_with_address_jsi(jsi::Runtime &rt, std::string self, std::string address);
        std::string transaction_output_builder_with_data_hash_jsi(jsi::Runtime &rt, std::string self, std::string data_hash);
        std::string transaction_output_builder_with_plutus_data_jsi(jsi::Runtime &rt, std::string self, std::string data);
        std::string transaction_output_builder_with_script_ref_jsi(jsi::Runtime &rt, std::string self, std::string script_ref);
        std::string transaction_output_builder_next_jsi(jsi::Runtime &rt, std::string self);

        std::string transaction_outputs_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_outputs_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_outputs_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_outputs_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_outputs_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_outputs_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_outputs_new_jsi(jsi::Runtime &rt);
        double transaction_outputs_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_outputs_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void transaction_outputs_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string transaction_unspent_output_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_unspent_output_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_unspent_output_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_unspent_output_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_unspent_output_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_unspent_output_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_unspent_output_new_jsi(jsi::Runtime &rt, std::string input, std::string output);
        std::string transaction_unspent_output_input_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_unspent_output_output_jsi(jsi::Runtime &rt, std::string self);

        std::string transaction_unspent_outputs_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_unspent_outputs_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_unspent_outputs_new_jsi(jsi::Runtime &rt);
        double transaction_unspent_outputs_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_unspent_outputs_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void transaction_unspent_outputs_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string transaction_witness_set_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_set_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_witness_set_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_set_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_witness_set_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_set_from_json_jsi(jsi::Runtime &rt, std::string json);
        void transaction_witness_set_set_vkeys_jsi(jsi::Runtime &rt, std::string self, std::string vkeys);
        std::optional<std::string> transaction_witness_set_vkeys_jsi(jsi::Runtime &rt, std::string self);
        void transaction_witness_set_set_native_scripts_jsi(jsi::Runtime &rt, std::string self, std::string native_scripts);
        std::optional<std::string> transaction_witness_set_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        void transaction_witness_set_set_bootstraps_jsi(jsi::Runtime &rt, std::string self, std::string bootstraps);
        std::optional<std::string> transaction_witness_set_bootstraps_jsi(jsi::Runtime &rt, std::string self);
        void transaction_witness_set_set_plutus_scripts_jsi(jsi::Runtime &rt, std::string self, std::string plutus_scripts);
        std::optional<std::string> transaction_witness_set_plutus_scripts_jsi(jsi::Runtime &rt, std::string self);
        void transaction_witness_set_set_plutus_data_jsi(jsi::Runtime &rt, std::string self, std::string plutus_data);
        std::optional<std::string> transaction_witness_set_plutus_data_jsi(jsi::Runtime &rt, std::string self);
        void transaction_witness_set_set_redeemers_jsi(jsi::Runtime &rt, std::string self, std::string redeemers);
        std::optional<std::string> transaction_witness_set_redeemers_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_set_new_jsi(jsi::Runtime &rt);

        std::string transaction_witness_sets_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_sets_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string transaction_witness_sets_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_sets_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string transaction_witness_sets_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_sets_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string transaction_witness_sets_new_jsi(jsi::Runtime &rt);
        double transaction_witness_sets_len_jsi(jsi::Runtime &rt, std::string self);
        std::string transaction_witness_sets_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void transaction_witness_sets_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string treasury_withdrawals_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string treasury_withdrawals_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string treasury_withdrawals_new_jsi(jsi::Runtime &rt);
        std::optional<std::string> treasury_withdrawals_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        void treasury_withdrawals_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::string treasury_withdrawals_keys_jsi(jsi::Runtime &rt, std::string self);
        double treasury_withdrawals_len_jsi(jsi::Runtime &rt, std::string self);

        std::string treasury_withdrawals_action_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string treasury_withdrawals_action_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string treasury_withdrawals_action_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string treasury_withdrawals_action_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string treasury_withdrawals_action_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string treasury_withdrawals_action_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string treasury_withdrawals_action_withdrawals_jsi(jsi::Runtime &rt, std::string self);
        std::string treasury_withdrawals_action_new_jsi(jsi::Runtime &rt, std::string withdrawals);

        std::string tx_builder_constants_plutus_default_cost_models_jsi(jsi::Runtime &rt);
        std::string tx_builder_constants_plutus_alonzo_cost_models_jsi(jsi::Runtime &rt);
        std::string tx_builder_constants_plutus_vasil_cost_models_jsi(jsi::Runtime &rt);

        std::string tx_inputs_builder_new_jsi(jsi::Runtime &rt);
        void tx_inputs_builder_add_key_input_jsi(jsi::Runtime &rt, std::string self, std::string hash, std::string input, std::string amount);
        void tx_inputs_builder_add_script_input_jsi(jsi::Runtime &rt, std::string self, std::string hash, std::string input, std::string amount);
        void tx_inputs_builder_add_native_script_input_jsi(jsi::Runtime &rt, std::string self, std::string script, std::string input, std::string amount);
        void tx_inputs_builder_add_plutus_script_input_jsi(jsi::Runtime &rt, std::string self, std::string witness, std::string input, std::string amount);
        void tx_inputs_builder_add_bootstrap_input_jsi(jsi::Runtime &rt, std::string self, std::string hash, std::string input, std::string amount);
        void tx_inputs_builder_add_input_jsi(jsi::Runtime &rt, std::string self, std::string address, std::string input, std::string amount);
        double tx_inputs_builder_count_missing_input_scripts_jsi(jsi::Runtime &rt, std::string self);
        double tx_inputs_builder_add_required_native_input_scripts_jsi(jsi::Runtime &rt, std::string self, std::string scripts);
        double tx_inputs_builder_add_required_plutus_input_scripts_jsi(jsi::Runtime &rt, std::string self, std::string scripts);
        double tx_inputs_builder_add_required_script_input_witnesses_jsi(jsi::Runtime &rt, std::string self, std::string inputs_with_wit);
        std::string tx_inputs_builder_get_ref_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> tx_inputs_builder_get_native_input_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> tx_inputs_builder_get_plutus_input_scripts_jsi(jsi::Runtime &rt, std::string self);
        double tx_inputs_builder_len_jsi(jsi::Runtime &rt, std::string self);
        void tx_inputs_builder_add_required_signer_jsi(jsi::Runtime &rt, std::string self, std::string key);
        void tx_inputs_builder_add_required_signers_jsi(jsi::Runtime &rt, std::string self, std::string keys);
        std::string tx_inputs_builder_total_value_jsi(jsi::Runtime &rt, std::string self);
        std::string tx_inputs_builder_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> tx_inputs_builder_inputs_option_jsi(jsi::Runtime &rt, std::string self);

        std::string u_r_l_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string u_r_l_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string u_r_l_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string u_r_l_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string u_r_l_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string u_r_l_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string u_r_l_new_jsi(jsi::Runtime &rt, std::string url);
        std::string u_r_l_url_jsi(jsi::Runtime &rt, std::string self);

        std::string unit_interval_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string unit_interval_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string unit_interval_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string unit_interval_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string unit_interval_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string unit_interval_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string unit_interval_numerator_jsi(jsi::Runtime &rt, std::string self);
        std::string unit_interval_denominator_jsi(jsi::Runtime &rt, std::string self);
        std::string unit_interval_new_jsi(jsi::Runtime &rt, std::string numerator, std::string denominator);

        std::string update_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string update_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string update_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string update_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string update_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string update_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string update_proposed_protocol_parameter_updates_jsi(jsi::Runtime &rt, std::string self);
        double update_epoch_jsi(jsi::Runtime &rt, std::string self);
        std::string update_new_jsi(jsi::Runtime &rt, std::string proposed_protocol_parameter_updates, double epoch);

        std::string update_committee_action_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string update_committee_action_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string update_committee_action_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string update_committee_action_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string update_committee_action_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string update_committee_action_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::optional<std::string> update_committee_action_gov_action_id_jsi(jsi::Runtime &rt, std::string self);
        std::string update_committee_action_committee_jsi(jsi::Runtime &rt, std::string self);
        std::string update_committee_action_members_to_remove_jsi(jsi::Runtime &rt, std::string self);
        std::string update_committee_action_new_jsi(jsi::Runtime &rt, std::string committee, std::string members_to_remove);
        std::string update_committee_action_new_with_action_id_jsi(jsi::Runtime &rt, std::string gov_action_id, std::string committee, std::string members_to_remove);

        std::string v_r_f_cert_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_cert_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string v_r_f_cert_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_cert_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string v_r_f_cert_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_cert_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string v_r_f_cert_output_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_cert_proof_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_cert_new_jsi(jsi::Runtime &rt, std::string output, std::string proof);

        std::string v_r_f_key_hash_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string v_r_f_key_hash_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_key_hash_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string v_r_f_key_hash_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string v_r_f_key_hash_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_key_hash_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string v_r_f_v_key_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string v_r_f_v_key_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_v_key_to_bech32_jsi(jsi::Runtime &rt, std::string self, std::string prefix);
        std::string v_r_f_v_key_from_bech32_jsi(jsi::Runtime &rt, std::string bech_str);
        std::string v_r_f_v_key_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string v_r_f_v_key_from_hex_jsi(jsi::Runtime &rt, std::string hex);

        std::string value_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string value_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string value_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string value_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string value_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string value_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string value_new_jsi(jsi::Runtime &rt, std::string coin);
        std::string value_new_from_assets_jsi(jsi::Runtime &rt, std::string multiasset);
        std::string value_new_with_assets_jsi(jsi::Runtime &rt, std::string coin, std::string multiasset);
        std::string value_zero_jsi(jsi::Runtime &rt);
        bool value_is_zero_jsi(jsi::Runtime &rt, std::string self);
        std::string value_coin_jsi(jsi::Runtime &rt, std::string self);
        void value_set_coin_jsi(jsi::Runtime &rt, std::string self, std::string coin);
        std::optional<std::string> value_multiasset_jsi(jsi::Runtime &rt, std::string self);
        void value_set_multiasset_jsi(jsi::Runtime &rt, std::string self, std::string multiasset);
        std::string value_checked_add_jsi(jsi::Runtime &rt, std::string self, std::string rhs);
        std::string value_checked_sub_jsi(jsi::Runtime &rt, std::string self, std::string rhs_value);
        std::string value_clamped_sub_jsi(jsi::Runtime &rt, std::string self, std::string rhs_value);
        std::optional<double> value_compare_jsi(jsi::Runtime &rt, std::string self, std::string rhs_value);

        std::string vkey_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string vkey_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string vkey_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string vkey_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string vkey_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string vkey_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string vkey_new_jsi(jsi::Runtime &rt, std::string pk);
        std::string vkey_public_key_jsi(jsi::Runtime &rt, std::string self);

        std::string vkeys_new_jsi(jsi::Runtime &rt);
        double vkeys_len_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeys_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void vkeys_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string vkeywitness_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitness_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string vkeywitness_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitness_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string vkeywitness_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitness_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string vkeywitness_new_jsi(jsi::Runtime &rt, std::string vkey, std::string signature);
        std::string vkeywitness_vkey_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitness_signature_jsi(jsi::Runtime &rt, std::string self);

        std::string vkeywitnesses_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitnesses_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string vkeywitnesses_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitnesses_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string vkeywitnesses_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitnesses_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string vkeywitnesses_new_jsi(jsi::Runtime &rt);
        double vkeywitnesses_len_jsi(jsi::Runtime &rt, std::string self);
        std::string vkeywitnesses_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void vkeywitnesses_add_jsi(jsi::Runtime &rt, std::string self, std::string elem);

        std::string vote_delegation_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_delegation_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string vote_delegation_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_delegation_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string vote_delegation_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_delegation_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string vote_delegation_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_delegation_drep_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_delegation_new_jsi(jsi::Runtime &rt, std::string stake_credential, std::string drep);
        bool vote_delegation_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string vote_registration_and_delegation_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_registration_and_delegation_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string vote_registration_and_delegation_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_registration_and_delegation_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string vote_registration_and_delegation_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_registration_and_delegation_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string vote_registration_and_delegation_stake_credential_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_registration_and_delegation_drep_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_registration_and_delegation_coin_jsi(jsi::Runtime &rt, std::string self);
        std::string vote_registration_and_delegation_new_jsi(jsi::Runtime &rt, std::string stake_credential, std::string drep, std::string coin);
        bool vote_registration_and_delegation_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);

        std::string voter_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string voter_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string voter_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string voter_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string voter_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string voter_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string voter_new_constitutional_committee_hot_key_jsi(jsi::Runtime &rt, std::string cred);
        std::string voter_new_drep_jsi(jsi::Runtime &rt, std::string cred);
        std::string voter_new_staking_pool_jsi(jsi::Runtime &rt, std::string key_hash);
        double voter_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> voter_to_constitutional_committee_hot_cred_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> voter_to_drep_cred_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> voter_to_staking_pool_key_hash_jsi(jsi::Runtime &rt, std::string self);
        bool voter_has_script_credentials_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> voter_to_key_hash_jsi(jsi::Runtime &rt, std::string self);

        std::string voters_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string voters_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string voters_new_jsi(jsi::Runtime &rt);
        void voters_add_jsi(jsi::Runtime &rt, std::string self, std::string voter);
        std::optional<std::string> voters_get_jsi(jsi::Runtime &rt, std::string self, double index);
        double voters_len_jsi(jsi::Runtime &rt, std::string self);

        std::string voting_builder_new_jsi(jsi::Runtime &rt);
        void voting_builder_add_jsi(jsi::Runtime &rt, std::string self, std::string voter, std::string gov_action_id, std::string voting_procedure);
        void voting_builder_add_with_plutus_witness_jsi(jsi::Runtime &rt, std::string self, std::string voter, std::string gov_action_id, std::string voting_procedure, std::string witness);
        void voting_builder_add_with_native_script_jsi(jsi::Runtime &rt, std::string self, std::string voter, std::string gov_action_id, std::string voting_procedure, std::string native_script_source);
        std::string voting_builder_get_plutus_witnesses_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_builder_get_ref_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_builder_get_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        bool voting_builder_has_plutus_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_builder_build_jsi(jsi::Runtime &rt, std::string self);

        std::string voting_procedure_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_procedure_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string voting_procedure_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_procedure_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string voting_procedure_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_procedure_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string voting_procedure_new_jsi(jsi::Runtime &rt, double vote);
        std::string voting_procedure_new_with_anchor_jsi(jsi::Runtime &rt, double vote, std::string anchor);
        double voting_procedure_vote_kind_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> voting_procedure_anchor_jsi(jsi::Runtime &rt, std::string self);

        std::string voting_procedures_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_procedures_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string voting_procedures_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_procedures_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string voting_procedures_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_procedures_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string voting_procedures_new_jsi(jsi::Runtime &rt);
        void voting_procedures_insert_jsi(jsi::Runtime &rt, std::string self, std::string voter, std::string governance_action_id, std::string voting_procedure);
        std::optional<std::string> voting_procedures_get_jsi(jsi::Runtime &rt, std::string self, std::string voter, std::string governance_action_id);
        std::string voting_procedures_get_voters_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_procedures_get_governance_action_ids_by_voter_jsi(jsi::Runtime &rt, std::string self, std::string voter);

        std::string voting_proposal_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string voting_proposal_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string voting_proposal_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string voting_proposal_governance_action_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_anchor_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_reward_account_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_deposit_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_new_jsi(jsi::Runtime &rt, std::string governance_action, std::string anchor, std::string reward_account, std::string deposit);

        std::string voting_proposal_builder_new_jsi(jsi::Runtime &rt);
        void voting_proposal_builder_add_jsi(jsi::Runtime &rt, std::string self, std::string proposal);
        void voting_proposal_builder_add_with_plutus_witness_jsi(jsi::Runtime &rt, std::string self, std::string proposal, std::string witness);
        std::string voting_proposal_builder_get_plutus_witnesses_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_builder_get_ref_inputs_jsi(jsi::Runtime &rt, std::string self);
        bool voting_proposal_builder_has_plutus_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposal_builder_build_jsi(jsi::Runtime &rt, std::string self);

        std::string voting_proposals_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposals_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string voting_proposals_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposals_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string voting_proposals_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposals_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string voting_proposals_new_jsi(jsi::Runtime &rt);
        double voting_proposals_len_jsi(jsi::Runtime &rt, std::string self);
        std::string voting_proposals_get_jsi(jsi::Runtime &rt, std::string self, double index);
        void voting_proposals_add_jsi(jsi::Runtime &rt, std::string self, std::string proposal);

        std::string withdrawals_to_bytes_jsi(jsi::Runtime &rt, std::string self);
        std::string withdrawals_from_bytes_jsi(jsi::Runtime &rt, std::string bytes);
        std::string withdrawals_to_hex_jsi(jsi::Runtime &rt, std::string self);
        std::string withdrawals_from_hex_jsi(jsi::Runtime &rt, std::string hex_str);
        std::string withdrawals_to_json_jsi(jsi::Runtime &rt, std::string self);
        std::string withdrawals_from_json_jsi(jsi::Runtime &rt, std::string json);
        std::string withdrawals_new_jsi(jsi::Runtime &rt);
        double withdrawals_len_jsi(jsi::Runtime &rt, std::string self);
        std::optional<std::string> withdrawals_insert_jsi(jsi::Runtime &rt, std::string self, std::string key, std::string value);
        std::optional<std::string> withdrawals_get_jsi(jsi::Runtime &rt, std::string self, std::string key);
        std::string withdrawals_keys_jsi(jsi::Runtime &rt, std::string self);

        std::string withdrawals_builder_new_jsi(jsi::Runtime &rt);
        void withdrawals_builder_add_jsi(jsi::Runtime &rt, std::string self, std::string address, std::string coin);
        void withdrawals_builder_add_with_plutus_witness_jsi(jsi::Runtime &rt, std::string self, std::string address, std::string coin, std::string witness);
        void withdrawals_builder_add_with_native_script_jsi(jsi::Runtime &rt, std::string self, std::string address, std::string coin, std::string native_script_source);
        std::string withdrawals_builder_get_plutus_witnesses_jsi(jsi::Runtime &rt, std::string self);
        std::string withdrawals_builder_get_ref_inputs_jsi(jsi::Runtime &rt, std::string self);
        std::string withdrawals_builder_get_native_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string withdrawals_builder_get_total_withdrawals_jsi(jsi::Runtime &rt, std::string self);
        bool withdrawals_builder_has_plutus_scripts_jsi(jsi::Runtime &rt, std::string self);
        std::string withdrawals_builder_build_jsi(jsi::Runtime &rt, std::string self);

    };

} // namespace facebook::react
